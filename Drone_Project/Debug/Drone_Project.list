
Drone_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bf4  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08008dc0  08008dc0  00009dc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e08  08008e08  0000a1b0  2**0
                  CONTENTS
  4 .ARM          00000008  08008e08  08008e08  00009e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e10  08008e10  0000a1b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e10  08008e10  00009e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e14  08008e14  00009e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08008e18  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000070  08008e88  0000a070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000110  08008f28  0000a110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000914  200001b0  08008fc8  0000a1b0  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  20000ac4  08008fc8  0000aac4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000a1b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017de8  00000000  00000000  0000a1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002e0f  00000000  00000000  00021fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001280  00000000  00000000  00024dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e68  00000000  00000000  00026058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00015f71  00000000  00000000  00026ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001879a  00000000  00000000  0003ce31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f76bd  00000000  00000000  000555cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0014cc88  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000055c0  00000000  00000000  0014cccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000056  00000000  00000000  0015228c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001b0 	.word	0x200001b0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008da4 	.word	0x08008da4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001b4 	.word	0x200001b4
 8000204:	08008da4 	.word	0x08008da4

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__aeabi_frsub>:
 8000b80:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b84:	e002      	b.n	8000b8c <__addsf3>
 8000b86:	bf00      	nop

08000b88 <__aeabi_fsub>:
 8000b88:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b8c <__addsf3>:
 8000b8c:	0042      	lsls	r2, r0, #1
 8000b8e:	bf1f      	itttt	ne
 8000b90:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b94:	ea92 0f03 	teqne	r2, r3
 8000b98:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b9c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba0:	d06a      	beq.n	8000c78 <__addsf3+0xec>
 8000ba2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000baa:	bfc1      	itttt	gt
 8000bac:	18d2      	addgt	r2, r2, r3
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	4048      	eorgt	r0, r1
 8000bb2:	4041      	eorgt	r1, r0
 8000bb4:	bfb8      	it	lt
 8000bb6:	425b      	neglt	r3, r3
 8000bb8:	2b19      	cmp	r3, #25
 8000bba:	bf88      	it	hi
 8000bbc:	4770      	bxhi	lr
 8000bbe:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bc2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bd2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bd6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bda:	bf18      	it	ne
 8000bdc:	4249      	negne	r1, r1
 8000bde:	ea92 0f03 	teq	r2, r3
 8000be2:	d03f      	beq.n	8000c64 <__addsf3+0xd8>
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bec:	eb10 000c 	adds.w	r0, r0, ip
 8000bf0:	f1c3 0320 	rsb	r3, r3, #32
 8000bf4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bfc:	d502      	bpl.n	8000c04 <__addsf3+0x78>
 8000bfe:	4249      	negs	r1, r1
 8000c00:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c04:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c08:	d313      	bcc.n	8000c32 <__addsf3+0xa6>
 8000c0a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c0e:	d306      	bcc.n	8000c1e <__addsf3+0x92>
 8000c10:	0840      	lsrs	r0, r0, #1
 8000c12:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c16:	f102 0201 	add.w	r2, r2, #1
 8000c1a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c1c:	d251      	bcs.n	8000cc2 <__addsf3+0x136>
 8000c1e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c26:	bf08      	it	eq
 8000c28:	f020 0001 	biceq.w	r0, r0, #1
 8000c2c:	ea40 0003 	orr.w	r0, r0, r3
 8000c30:	4770      	bx	lr
 8000c32:	0049      	lsls	r1, r1, #1
 8000c34:	eb40 0000 	adc.w	r0, r0, r0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	bf28      	it	cs
 8000c3c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c40:	d2ed      	bcs.n	8000c1e <__addsf3+0x92>
 8000c42:	fab0 fc80 	clz	ip, r0
 8000c46:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c4a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c52:	bfaa      	itet	ge
 8000c54:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c58:	4252      	neglt	r2, r2
 8000c5a:	4318      	orrge	r0, r3
 8000c5c:	bfbc      	itt	lt
 8000c5e:	40d0      	lsrlt	r0, r2
 8000c60:	4318      	orrlt	r0, r3
 8000c62:	4770      	bx	lr
 8000c64:	f092 0f00 	teq	r2, #0
 8000c68:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c6c:	bf06      	itte	eq
 8000c6e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c72:	3201      	addeq	r2, #1
 8000c74:	3b01      	subne	r3, #1
 8000c76:	e7b5      	b.n	8000be4 <__addsf3+0x58>
 8000c78:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c80:	bf18      	it	ne
 8000c82:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c86:	d021      	beq.n	8000ccc <__addsf3+0x140>
 8000c88:	ea92 0f03 	teq	r2, r3
 8000c8c:	d004      	beq.n	8000c98 <__addsf3+0x10c>
 8000c8e:	f092 0f00 	teq	r2, #0
 8000c92:	bf08      	it	eq
 8000c94:	4608      	moveq	r0, r1
 8000c96:	4770      	bx	lr
 8000c98:	ea90 0f01 	teq	r0, r1
 8000c9c:	bf1c      	itt	ne
 8000c9e:	2000      	movne	r0, #0
 8000ca0:	4770      	bxne	lr
 8000ca2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ca6:	d104      	bne.n	8000cb2 <__addsf3+0x126>
 8000ca8:	0040      	lsls	r0, r0, #1
 8000caa:	bf28      	it	cs
 8000cac:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cb0:	4770      	bx	lr
 8000cb2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cb6:	bf3c      	itt	cc
 8000cb8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cbc:	4770      	bxcc	lr
 8000cbe:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cc2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cc6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cca:	4770      	bx	lr
 8000ccc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cd0:	bf16      	itet	ne
 8000cd2:	4608      	movne	r0, r1
 8000cd4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd8:	4601      	movne	r1, r0
 8000cda:	0242      	lsls	r2, r0, #9
 8000cdc:	bf06      	itte	eq
 8000cde:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ce2:	ea90 0f01 	teqeq	r0, r1
 8000ce6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cea:	4770      	bx	lr

08000cec <__aeabi_ui2f>:
 8000cec:	f04f 0300 	mov.w	r3, #0
 8000cf0:	e004      	b.n	8000cfc <__aeabi_i2f+0x8>
 8000cf2:	bf00      	nop

08000cf4 <__aeabi_i2f>:
 8000cf4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cf8:	bf48      	it	mi
 8000cfa:	4240      	negmi	r0, r0
 8000cfc:	ea5f 0c00 	movs.w	ip, r0
 8000d00:	bf08      	it	eq
 8000d02:	4770      	bxeq	lr
 8000d04:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d08:	4601      	mov	r1, r0
 8000d0a:	f04f 0000 	mov.w	r0, #0
 8000d0e:	e01c      	b.n	8000d4a <__aeabi_l2f+0x2a>

08000d10 <__aeabi_ul2f>:
 8000d10:	ea50 0201 	orrs.w	r2, r0, r1
 8000d14:	bf08      	it	eq
 8000d16:	4770      	bxeq	lr
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e00a      	b.n	8000d34 <__aeabi_l2f+0x14>
 8000d1e:	bf00      	nop

08000d20 <__aeabi_l2f>:
 8000d20:	ea50 0201 	orrs.w	r2, r0, r1
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d2c:	d502      	bpl.n	8000d34 <__aeabi_l2f+0x14>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	ea5f 0c01 	movs.w	ip, r1
 8000d38:	bf02      	ittt	eq
 8000d3a:	4684      	moveq	ip, r0
 8000d3c:	4601      	moveq	r1, r0
 8000d3e:	2000      	moveq	r0, #0
 8000d40:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d44:	bf08      	it	eq
 8000d46:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d4a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d4e:	fabc f28c 	clz	r2, ip
 8000d52:	3a08      	subs	r2, #8
 8000d54:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d58:	db10      	blt.n	8000d7c <__aeabi_l2f+0x5c>
 8000d5a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5e:	4463      	add	r3, ip
 8000d60:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	f020 0001 	biceq.w	r0, r0, #1
 8000d7a:	4770      	bx	lr
 8000d7c:	f102 0220 	add.w	r2, r2, #32
 8000d80:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d8c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d9a:	4770      	bx	lr

08000d9c <__aeabi_ldivmod>:
 8000d9c:	b97b      	cbnz	r3, 8000dbe <__aeabi_ldivmod+0x22>
 8000d9e:	b972      	cbnz	r2, 8000dbe <__aeabi_ldivmod+0x22>
 8000da0:	2900      	cmp	r1, #0
 8000da2:	bfbe      	ittt	lt
 8000da4:	2000      	movlt	r0, #0
 8000da6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000daa:	e006      	blt.n	8000dba <__aeabi_ldivmod+0x1e>
 8000dac:	bf08      	it	eq
 8000dae:	2800      	cmpeq	r0, #0
 8000db0:	bf1c      	itt	ne
 8000db2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000db6:	f04f 30ff 	movne.w	r0, #4294967295
 8000dba:	f000 b9eb 	b.w	8001194 <__aeabi_idiv0>
 8000dbe:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dc2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dc6:	2900      	cmp	r1, #0
 8000dc8:	db09      	blt.n	8000dde <__aeabi_ldivmod+0x42>
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	db1a      	blt.n	8000e04 <__aeabi_ldivmod+0x68>
 8000dce:	f000 f883 	bl	8000ed8 <__udivmoddi4>
 8000dd2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dda:	b004      	add	sp, #16
 8000ddc:	4770      	bx	lr
 8000dde:	4240      	negs	r0, r0
 8000de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	db1b      	blt.n	8000e20 <__aeabi_ldivmod+0x84>
 8000de8:	f000 f876 	bl	8000ed8 <__udivmoddi4>
 8000dec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000df0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000df4:	b004      	add	sp, #16
 8000df6:	4240      	negs	r0, r0
 8000df8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfc:	4252      	negs	r2, r2
 8000dfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e02:	4770      	bx	lr
 8000e04:	4252      	negs	r2, r2
 8000e06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e0a:	f000 f865 	bl	8000ed8 <__udivmoddi4>
 8000e0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e16:	b004      	add	sp, #16
 8000e18:	4240      	negs	r0, r0
 8000e1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e1e:	4770      	bx	lr
 8000e20:	4252      	negs	r2, r2
 8000e22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e26:	f000 f857 	bl	8000ed8 <__udivmoddi4>
 8000e2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e32:	b004      	add	sp, #16
 8000e34:	4252      	negs	r2, r2
 8000e36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_uldivmod>:
 8000e3c:	b953      	cbnz	r3, 8000e54 <__aeabi_uldivmod+0x18>
 8000e3e:	b94a      	cbnz	r2, 8000e54 <__aeabi_uldivmod+0x18>
 8000e40:	2900      	cmp	r1, #0
 8000e42:	bf08      	it	eq
 8000e44:	2800      	cmpeq	r0, #0
 8000e46:	bf1c      	itt	ne
 8000e48:	f04f 31ff 	movne.w	r1, #4294967295
 8000e4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000e50:	f000 b9a0 	b.w	8001194 <__aeabi_idiv0>
 8000e54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e5c:	f000 f83c 	bl	8000ed8 <__udivmoddi4>
 8000e60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e68:	b004      	add	sp, #16
 8000e6a:	4770      	bx	lr

08000e6c <__aeabi_d2lz>:
 8000e6c:	b538      	push	{r3, r4, r5, lr}
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2300      	movs	r3, #0
 8000e72:	4604      	mov	r4, r0
 8000e74:	460d      	mov	r5, r1
 8000e76:	f7ff fdf5 	bl	8000a64 <__aeabi_dcmplt>
 8000e7a:	b928      	cbnz	r0, 8000e88 <__aeabi_d2lz+0x1c>
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	4629      	mov	r1, r5
 8000e80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e84:	f000 b80a 	b.w	8000e9c <__aeabi_d2ulz>
 8000e88:	4620      	mov	r0, r4
 8000e8a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000e8e:	f000 f805 	bl	8000e9c <__aeabi_d2ulz>
 8000e92:	4240      	negs	r0, r0
 8000e94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e98:	bd38      	pop	{r3, r4, r5, pc}
 8000e9a:	bf00      	nop

08000e9c <__aeabi_d2ulz>:
 8000e9c:	b5d0      	push	{r4, r6, r7, lr}
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <__aeabi_d2ulz+0x34>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	4606      	mov	r6, r0
 8000ea4:	460f      	mov	r7, r1
 8000ea6:	f7ff fb6b 	bl	8000580 <__aeabi_dmul>
 8000eaa:	f000 f975 	bl	8001198 <__aeabi_d2uiz>
 8000eae:	4604      	mov	r4, r0
 8000eb0:	f7ff faec 	bl	800048c <__aeabi_ui2d>
 8000eb4:	4b07      	ldr	r3, [pc, #28]	@ (8000ed4 <__aeabi_d2ulz+0x38>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f7ff fb62 	bl	8000580 <__aeabi_dmul>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4630      	mov	r0, r6
 8000ec2:	4639      	mov	r1, r7
 8000ec4:	f7ff f9a4 	bl	8000210 <__aeabi_dsub>
 8000ec8:	f000 f966 	bl	8001198 <__aeabi_d2uiz>
 8000ecc:	4621      	mov	r1, r4
 8000ece:	bdd0      	pop	{r4, r6, r7, pc}
 8000ed0:	3df00000 	.word	0x3df00000
 8000ed4:	41f00000 	.word	0x41f00000

08000ed8 <__udivmoddi4>:
 8000ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000edc:	9d08      	ldr	r5, [sp, #32]
 8000ede:	460c      	mov	r4, r1
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d14e      	bne.n	8000f82 <__udivmoddi4+0xaa>
 8000ee4:	4694      	mov	ip, r2
 8000ee6:	458c      	cmp	ip, r1
 8000ee8:	4686      	mov	lr, r0
 8000eea:	fab2 f282 	clz	r2, r2
 8000eee:	d962      	bls.n	8000fb6 <__udivmoddi4+0xde>
 8000ef0:	b14a      	cbz	r2, 8000f06 <__udivmoddi4+0x2e>
 8000ef2:	f1c2 0320 	rsb	r3, r2, #32
 8000ef6:	4091      	lsls	r1, r2
 8000ef8:	fa20 f303 	lsr.w	r3, r0, r3
 8000efc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f00:	4319      	orrs	r1, r3
 8000f02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f0a:	fa1f f68c 	uxth.w	r6, ip
 8000f0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f16:	fb07 1114 	mls	r1, r7, r4, r1
 8000f1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1e:	fb04 f106 	mul.w	r1, r4, r6
 8000f22:	4299      	cmp	r1, r3
 8000f24:	d90a      	bls.n	8000f3c <__udivmoddi4+0x64>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000f2e:	f080 8112 	bcs.w	8001156 <__udivmoddi4+0x27e>
 8000f32:	4299      	cmp	r1, r3
 8000f34:	f240 810f 	bls.w	8001156 <__udivmoddi4+0x27e>
 8000f38:	3c02      	subs	r4, #2
 8000f3a:	4463      	add	r3, ip
 8000f3c:	1a59      	subs	r1, r3, r1
 8000f3e:	fa1f f38e 	uxth.w	r3, lr
 8000f42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f46:	fb07 1110 	mls	r1, r7, r0, r1
 8000f4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f4e:	fb00 f606 	mul.w	r6, r0, r6
 8000f52:	429e      	cmp	r6, r3
 8000f54:	d90a      	bls.n	8000f6c <__udivmoddi4+0x94>
 8000f56:	eb1c 0303 	adds.w	r3, ip, r3
 8000f5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f5e:	f080 80fc 	bcs.w	800115a <__udivmoddi4+0x282>
 8000f62:	429e      	cmp	r6, r3
 8000f64:	f240 80f9 	bls.w	800115a <__udivmoddi4+0x282>
 8000f68:	4463      	add	r3, ip
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	1b9b      	subs	r3, r3, r6
 8000f6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000f72:	2100      	movs	r1, #0
 8000f74:	b11d      	cbz	r5, 8000f7e <__udivmoddi4+0xa6>
 8000f76:	40d3      	lsrs	r3, r2
 8000f78:	2200      	movs	r2, #0
 8000f7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f82:	428b      	cmp	r3, r1
 8000f84:	d905      	bls.n	8000f92 <__udivmoddi4+0xba>
 8000f86:	b10d      	cbz	r5, 8000f8c <__udivmoddi4+0xb4>
 8000f88:	e9c5 0100 	strd	r0, r1, [r5]
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4608      	mov	r0, r1
 8000f90:	e7f5      	b.n	8000f7e <__udivmoddi4+0xa6>
 8000f92:	fab3 f183 	clz	r1, r3
 8000f96:	2900      	cmp	r1, #0
 8000f98:	d146      	bne.n	8001028 <__udivmoddi4+0x150>
 8000f9a:	42a3      	cmp	r3, r4
 8000f9c:	d302      	bcc.n	8000fa4 <__udivmoddi4+0xcc>
 8000f9e:	4290      	cmp	r0, r2
 8000fa0:	f0c0 80f0 	bcc.w	8001184 <__udivmoddi4+0x2ac>
 8000fa4:	1a86      	subs	r6, r0, r2
 8000fa6:	eb64 0303 	sbc.w	r3, r4, r3
 8000faa:	2001      	movs	r0, #1
 8000fac:	2d00      	cmp	r5, #0
 8000fae:	d0e6      	beq.n	8000f7e <__udivmoddi4+0xa6>
 8000fb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000fb4:	e7e3      	b.n	8000f7e <__udivmoddi4+0xa6>
 8000fb6:	2a00      	cmp	r2, #0
 8000fb8:	f040 8090 	bne.w	80010dc <__udivmoddi4+0x204>
 8000fbc:	eba1 040c 	sub.w	r4, r1, ip
 8000fc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fc4:	fa1f f78c 	uxth.w	r7, ip
 8000fc8:	2101      	movs	r1, #1
 8000fca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000fce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000fd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000fd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000fda:	fb07 f006 	mul.w	r0, r7, r6
 8000fde:	4298      	cmp	r0, r3
 8000fe0:	d908      	bls.n	8000ff4 <__udivmoddi4+0x11c>
 8000fe2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fe6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000fea:	d202      	bcs.n	8000ff2 <__udivmoddi4+0x11a>
 8000fec:	4298      	cmp	r0, r3
 8000fee:	f200 80cd 	bhi.w	800118c <__udivmoddi4+0x2b4>
 8000ff2:	4626      	mov	r6, r4
 8000ff4:	1a1c      	subs	r4, r3, r0
 8000ff6:	fa1f f38e 	uxth.w	r3, lr
 8000ffa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ffe:	fb08 4410 	mls	r4, r8, r0, r4
 8001002:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001006:	fb00 f707 	mul.w	r7, r0, r7
 800100a:	429f      	cmp	r7, r3
 800100c:	d908      	bls.n	8001020 <__udivmoddi4+0x148>
 800100e:	eb1c 0303 	adds.w	r3, ip, r3
 8001012:	f100 34ff 	add.w	r4, r0, #4294967295
 8001016:	d202      	bcs.n	800101e <__udivmoddi4+0x146>
 8001018:	429f      	cmp	r7, r3
 800101a:	f200 80b0 	bhi.w	800117e <__udivmoddi4+0x2a6>
 800101e:	4620      	mov	r0, r4
 8001020:	1bdb      	subs	r3, r3, r7
 8001022:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001026:	e7a5      	b.n	8000f74 <__udivmoddi4+0x9c>
 8001028:	f1c1 0620 	rsb	r6, r1, #32
 800102c:	408b      	lsls	r3, r1
 800102e:	fa22 f706 	lsr.w	r7, r2, r6
 8001032:	431f      	orrs	r7, r3
 8001034:	fa20 fc06 	lsr.w	ip, r0, r6
 8001038:	fa04 f301 	lsl.w	r3, r4, r1
 800103c:	ea43 030c 	orr.w	r3, r3, ip
 8001040:	40f4      	lsrs	r4, r6
 8001042:	fa00 f801 	lsl.w	r8, r0, r1
 8001046:	0c38      	lsrs	r0, r7, #16
 8001048:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800104c:	fbb4 fef0 	udiv	lr, r4, r0
 8001050:	fa1f fc87 	uxth.w	ip, r7
 8001054:	fb00 441e 	mls	r4, r0, lr, r4
 8001058:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800105c:	fb0e f90c 	mul.w	r9, lr, ip
 8001060:	45a1      	cmp	r9, r4
 8001062:	fa02 f201 	lsl.w	r2, r2, r1
 8001066:	d90a      	bls.n	800107e <__udivmoddi4+0x1a6>
 8001068:	193c      	adds	r4, r7, r4
 800106a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800106e:	f080 8084 	bcs.w	800117a <__udivmoddi4+0x2a2>
 8001072:	45a1      	cmp	r9, r4
 8001074:	f240 8081 	bls.w	800117a <__udivmoddi4+0x2a2>
 8001078:	f1ae 0e02 	sub.w	lr, lr, #2
 800107c:	443c      	add	r4, r7
 800107e:	eba4 0409 	sub.w	r4, r4, r9
 8001082:	fa1f f983 	uxth.w	r9, r3
 8001086:	fbb4 f3f0 	udiv	r3, r4, r0
 800108a:	fb00 4413 	mls	r4, r0, r3, r4
 800108e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001092:	fb03 fc0c 	mul.w	ip, r3, ip
 8001096:	45a4      	cmp	ip, r4
 8001098:	d907      	bls.n	80010aa <__udivmoddi4+0x1d2>
 800109a:	193c      	adds	r4, r7, r4
 800109c:	f103 30ff 	add.w	r0, r3, #4294967295
 80010a0:	d267      	bcs.n	8001172 <__udivmoddi4+0x29a>
 80010a2:	45a4      	cmp	ip, r4
 80010a4:	d965      	bls.n	8001172 <__udivmoddi4+0x29a>
 80010a6:	3b02      	subs	r3, #2
 80010a8:	443c      	add	r4, r7
 80010aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80010ae:	fba0 9302 	umull	r9, r3, r0, r2
 80010b2:	eba4 040c 	sub.w	r4, r4, ip
 80010b6:	429c      	cmp	r4, r3
 80010b8:	46ce      	mov	lr, r9
 80010ba:	469c      	mov	ip, r3
 80010bc:	d351      	bcc.n	8001162 <__udivmoddi4+0x28a>
 80010be:	d04e      	beq.n	800115e <__udivmoddi4+0x286>
 80010c0:	b155      	cbz	r5, 80010d8 <__udivmoddi4+0x200>
 80010c2:	ebb8 030e 	subs.w	r3, r8, lr
 80010c6:	eb64 040c 	sbc.w	r4, r4, ip
 80010ca:	fa04 f606 	lsl.w	r6, r4, r6
 80010ce:	40cb      	lsrs	r3, r1
 80010d0:	431e      	orrs	r6, r3
 80010d2:	40cc      	lsrs	r4, r1
 80010d4:	e9c5 6400 	strd	r6, r4, [r5]
 80010d8:	2100      	movs	r1, #0
 80010da:	e750      	b.n	8000f7e <__udivmoddi4+0xa6>
 80010dc:	f1c2 0320 	rsb	r3, r2, #32
 80010e0:	fa20 f103 	lsr.w	r1, r0, r3
 80010e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80010e8:	fa24 f303 	lsr.w	r3, r4, r3
 80010ec:	4094      	lsls	r4, r2
 80010ee:	430c      	orrs	r4, r1
 80010f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80010f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80010f8:	fa1f f78c 	uxth.w	r7, ip
 80010fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8001100:	fb08 3110 	mls	r1, r8, r0, r3
 8001104:	0c23      	lsrs	r3, r4, #16
 8001106:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800110a:	fb00 f107 	mul.w	r1, r0, r7
 800110e:	4299      	cmp	r1, r3
 8001110:	d908      	bls.n	8001124 <__udivmoddi4+0x24c>
 8001112:	eb1c 0303 	adds.w	r3, ip, r3
 8001116:	f100 36ff 	add.w	r6, r0, #4294967295
 800111a:	d22c      	bcs.n	8001176 <__udivmoddi4+0x29e>
 800111c:	4299      	cmp	r1, r3
 800111e:	d92a      	bls.n	8001176 <__udivmoddi4+0x29e>
 8001120:	3802      	subs	r0, #2
 8001122:	4463      	add	r3, ip
 8001124:	1a5b      	subs	r3, r3, r1
 8001126:	b2a4      	uxth	r4, r4
 8001128:	fbb3 f1f8 	udiv	r1, r3, r8
 800112c:	fb08 3311 	mls	r3, r8, r1, r3
 8001130:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001134:	fb01 f307 	mul.w	r3, r1, r7
 8001138:	42a3      	cmp	r3, r4
 800113a:	d908      	bls.n	800114e <__udivmoddi4+0x276>
 800113c:	eb1c 0404 	adds.w	r4, ip, r4
 8001140:	f101 36ff 	add.w	r6, r1, #4294967295
 8001144:	d213      	bcs.n	800116e <__udivmoddi4+0x296>
 8001146:	42a3      	cmp	r3, r4
 8001148:	d911      	bls.n	800116e <__udivmoddi4+0x296>
 800114a:	3902      	subs	r1, #2
 800114c:	4464      	add	r4, ip
 800114e:	1ae4      	subs	r4, r4, r3
 8001150:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001154:	e739      	b.n	8000fca <__udivmoddi4+0xf2>
 8001156:	4604      	mov	r4, r0
 8001158:	e6f0      	b.n	8000f3c <__udivmoddi4+0x64>
 800115a:	4608      	mov	r0, r1
 800115c:	e706      	b.n	8000f6c <__udivmoddi4+0x94>
 800115e:	45c8      	cmp	r8, r9
 8001160:	d2ae      	bcs.n	80010c0 <__udivmoddi4+0x1e8>
 8001162:	ebb9 0e02 	subs.w	lr, r9, r2
 8001166:	eb63 0c07 	sbc.w	ip, r3, r7
 800116a:	3801      	subs	r0, #1
 800116c:	e7a8      	b.n	80010c0 <__udivmoddi4+0x1e8>
 800116e:	4631      	mov	r1, r6
 8001170:	e7ed      	b.n	800114e <__udivmoddi4+0x276>
 8001172:	4603      	mov	r3, r0
 8001174:	e799      	b.n	80010aa <__udivmoddi4+0x1d2>
 8001176:	4630      	mov	r0, r6
 8001178:	e7d4      	b.n	8001124 <__udivmoddi4+0x24c>
 800117a:	46d6      	mov	lr, sl
 800117c:	e77f      	b.n	800107e <__udivmoddi4+0x1a6>
 800117e:	4463      	add	r3, ip
 8001180:	3802      	subs	r0, #2
 8001182:	e74d      	b.n	8001020 <__udivmoddi4+0x148>
 8001184:	4606      	mov	r6, r0
 8001186:	4623      	mov	r3, r4
 8001188:	4608      	mov	r0, r1
 800118a:	e70f      	b.n	8000fac <__udivmoddi4+0xd4>
 800118c:	3e02      	subs	r6, #2
 800118e:	4463      	add	r3, ip
 8001190:	e730      	b.n	8000ff4 <__udivmoddi4+0x11c>
 8001192:	bf00      	nop

08001194 <__aeabi_idiv0>:
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop

08001198 <__aeabi_d2uiz>:
 8001198:	004a      	lsls	r2, r1, #1
 800119a:	d211      	bcs.n	80011c0 <__aeabi_d2uiz+0x28>
 800119c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80011a0:	d211      	bcs.n	80011c6 <__aeabi_d2uiz+0x2e>
 80011a2:	d50d      	bpl.n	80011c0 <__aeabi_d2uiz+0x28>
 80011a4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80011a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80011ac:	d40e      	bmi.n	80011cc <__aeabi_d2uiz+0x34>
 80011ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80011b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80011ba:	fa23 f002 	lsr.w	r0, r3, r2
 80011be:	4770      	bx	lr
 80011c0:	f04f 0000 	mov.w	r0, #0
 80011c4:	4770      	bx	lr
 80011c6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80011ca:	d102      	bne.n	80011d2 <__aeabi_d2uiz+0x3a>
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	4770      	bx	lr
 80011d2:	f04f 0000 	mov.w	r0, #0
 80011d6:	4770      	bx	lr

080011d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011de:	f000 fd60 	bl	8001ca2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e2:	f000 f83b 	bl	800125c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e6:	f000 f9cb 	bl	8001580 <MX_GPIO_Init>
  MX_ETH_Init();
 80011ea:	f000 f89f 	bl	800132c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80011ee:	f000 f969 	bl	80014c4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80011f2:	f000 f997 	bl	8001524 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 80011f6:	f000 f927 	bl	8001448 <MX_SPI1_Init>
  MX_I2C2_Init();
 80011fa:	f000 f8e5 	bl	80013c8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  LSM6DSOX_I2C_init(&gyro_acc, &GYRO_ACC_I2C_HANDLE);
 80011fe:	4911      	ldr	r1, [pc, #68]	@ (8001244 <main+0x6c>)
 8001200:	4811      	ldr	r0, [pc, #68]	@ (8001248 <main+0x70>)
 8001202:	f006 fbf3 	bl	80079ec <LSM6DSOX_I2C_init>
  LIS3MDL_Init(&mag_sensor, &GYRO_ACC_I2C_HANDLE);
 8001206:	490f      	ldr	r1, [pc, #60]	@ (8001244 <main+0x6c>)
 8001208:	4810      	ldr	r0, [pc, #64]	@ (800124c <main+0x74>)
 800120a:	f006 fb74 	bl	80078f6 <LIS3MDL_Init>
  BMP390_START(&baro_sensor, &BMP390_SPI_HANDLE, BMP390_SPI_CS_PORT, BMP390_SPI_CS_PIN);
 800120e:	2340      	movs	r3, #64	@ 0x40
 8001210:	4a0f      	ldr	r2, [pc, #60]	@ (8001250 <main+0x78>)
 8001212:	4910      	ldr	r1, [pc, #64]	@ (8001254 <main+0x7c>)
 8001214:	4810      	ldr	r0, [pc, #64]	@ (8001258 <main+0x80>)
 8001216:	f005 fa85 	bl	8006724 <BMP390_START>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LSM6DSOX_I2C_ReadTemp(&gyro_acc);
 800121a:	480b      	ldr	r0, [pc, #44]	@ (8001248 <main+0x70>)
 800121c:	f006 fc7a 	bl	8007b14 <LSM6DSOX_I2C_ReadTemp>
	  LSM6DSOX_I2C_ReadAccel(&gyro_acc);
 8001220:	4809      	ldr	r0, [pc, #36]	@ (8001248 <main+0x70>)
 8001222:	f006 fcbd 	bl	8007ba0 <LSM6DSOX_I2C_ReadAccel>
	  LSM6DSOX_I2C_ReadGyro(&gyro_acc);
 8001226:	4808      	ldr	r0, [pc, #32]	@ (8001248 <main+0x70>)
 8001228:	f006 fd6a 	bl	8007d00 <LSM6DSOX_I2C_ReadGyro>
	  uint64_t pressure = BMP390_Get_Altitude(&baro_sensor);
 800122c:	480a      	ldr	r0, [pc, #40]	@ (8001258 <main+0x80>)
 800122e:	f005 fb97 	bl	8006960 <BMP390_Get_Altitude>
 8001232:	e9c7 0100 	strd	r0, r1, [r7]
	  HAL_Delay(500);
 8001236:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800123a:	f000 fd8f 	bl	8001d5c <HAL_Delay>
  {
 800123e:	bf00      	nop
 8001240:	e7eb      	b.n	800121a <main+0x42>
 8001242:	bf00      	nop
 8001244:	200002b4 	.word	0x200002b4
 8001248:	200008fc 	.word	0x200008fc
 800124c:	20000930 	.word	0x20000930
 8001250:	40020800 	.word	0x40020800
 8001254:	20000308 	.word	0x20000308
 8001258:	20000940 	.word	0x20000940

0800125c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b094      	sub	sp, #80	@ 0x50
 8001260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001262:	f107 0320 	add.w	r3, r7, #32
 8001266:	2230      	movs	r2, #48	@ 0x30
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f006 fe09 	bl	8007e82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001280:	f002 fa9a 	bl	80037b8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001284:	4b27      	ldr	r3, [pc, #156]	@ (8001324 <SystemClock_Config+0xc8>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001288:	4a26      	ldr	r2, [pc, #152]	@ (8001324 <SystemClock_Config+0xc8>)
 800128a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800128e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001290:	4b24      	ldr	r3, [pc, #144]	@ (8001324 <SystemClock_Config+0xc8>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800129c:	4b22      	ldr	r3, [pc, #136]	@ (8001328 <SystemClock_Config+0xcc>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012a4:	4a20      	ldr	r2, [pc, #128]	@ (8001328 <SystemClock_Config+0xcc>)
 80012a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001328 <SystemClock_Config+0xcc>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b8:	2301      	movs	r3, #1
 80012ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012bc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80012c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c2:	2302      	movs	r3, #2
 80012c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012cc:	2304      	movs	r3, #4
 80012ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80012d0:	2348      	movs	r3, #72	@ 0x48
 80012d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012d4:	2302      	movs	r3, #2
 80012d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80012d8:	2303      	movs	r3, #3
 80012da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012dc:	f107 0320 	add.w	r3, r7, #32
 80012e0:	4618      	mov	r0, r3
 80012e2:	f002 fa79 	bl	80037d8 <HAL_RCC_OscConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012ec:	f000 f9f2 	bl	80016d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f0:	230f      	movs	r3, #15
 80012f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f4:	2302      	movs	r3, #2
 80012f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001300:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	2102      	movs	r1, #2
 800130c:	4618      	mov	r0, r3
 800130e:	f002 fd07 	bl	8003d20 <HAL_RCC_ClockConfig>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001318:	f000 f9dc 	bl	80016d4 <Error_Handler>
  }
}
 800131c:	bf00      	nop
 800131e:	3750      	adds	r7, #80	@ 0x50
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40023800 	.word	0x40023800
 8001328:	40007000 	.word	0x40007000

0800132c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001330:	4b1f      	ldr	r3, [pc, #124]	@ (80013b0 <MX_ETH_Init+0x84>)
 8001332:	4a20      	ldr	r2, [pc, #128]	@ (80013b4 <MX_ETH_Init+0x88>)
 8001334:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001336:	4b20      	ldr	r3, [pc, #128]	@ (80013b8 <MX_ETH_Init+0x8c>)
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800133c:	4b1e      	ldr	r3, [pc, #120]	@ (80013b8 <MX_ETH_Init+0x8c>)
 800133e:	2280      	movs	r2, #128	@ 0x80
 8001340:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001342:	4b1d      	ldr	r3, [pc, #116]	@ (80013b8 <MX_ETH_Init+0x8c>)
 8001344:	22e1      	movs	r2, #225	@ 0xe1
 8001346:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001348:	4b1b      	ldr	r3, [pc, #108]	@ (80013b8 <MX_ETH_Init+0x8c>)
 800134a:	2200      	movs	r2, #0
 800134c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800134e:	4b1a      	ldr	r3, [pc, #104]	@ (80013b8 <MX_ETH_Init+0x8c>)
 8001350:	2200      	movs	r2, #0
 8001352:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001354:	4b18      	ldr	r3, [pc, #96]	@ (80013b8 <MX_ETH_Init+0x8c>)
 8001356:	2200      	movs	r2, #0
 8001358:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800135a:	4b15      	ldr	r3, [pc, #84]	@ (80013b0 <MX_ETH_Init+0x84>)
 800135c:	4a16      	ldr	r2, [pc, #88]	@ (80013b8 <MX_ETH_Init+0x8c>)
 800135e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001360:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <MX_ETH_Init+0x84>)
 8001362:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001366:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001368:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <MX_ETH_Init+0x84>)
 800136a:	4a14      	ldr	r2, [pc, #80]	@ (80013bc <MX_ETH_Init+0x90>)
 800136c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800136e:	4b10      	ldr	r3, [pc, #64]	@ (80013b0 <MX_ETH_Init+0x84>)
 8001370:	4a13      	ldr	r2, [pc, #76]	@ (80013c0 <MX_ETH_Init+0x94>)
 8001372:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001374:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <MX_ETH_Init+0x84>)
 8001376:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800137a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800137c:	480c      	ldr	r0, [pc, #48]	@ (80013b0 <MX_ETH_Init+0x84>)
 800137e:	f000 fdf7 	bl	8001f70 <HAL_ETH_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001388:	f000 f9a4 	bl	80016d4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800138c:	2238      	movs	r2, #56	@ 0x38
 800138e:	2100      	movs	r1, #0
 8001390:	480c      	ldr	r0, [pc, #48]	@ (80013c4 <MX_ETH_Init+0x98>)
 8001392:	f006 fd76 	bl	8007e82 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001396:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <MX_ETH_Init+0x98>)
 8001398:	2221      	movs	r2, #33	@ 0x21
 800139a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800139c:	4b09      	ldr	r3, [pc, #36]	@ (80013c4 <MX_ETH_Init+0x98>)
 800139e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80013a2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80013a4:	4b07      	ldr	r3, [pc, #28]	@ (80013c4 <MX_ETH_Init+0x98>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000204 	.word	0x20000204
 80013b4:	40028000 	.word	0x40028000
 80013b8:	20000980 	.word	0x20000980
 80013bc:	20000110 	.word	0x20000110
 80013c0:	20000070 	.word	0x20000070
 80013c4:	200001cc 	.word	0x200001cc

080013c8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013cc:	4b1b      	ldr	r3, [pc, #108]	@ (800143c <MX_I2C2_Init+0x74>)
 80013ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001440 <MX_I2C2_Init+0x78>)
 80013d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 80013d2:	4b1a      	ldr	r3, [pc, #104]	@ (800143c <MX_I2C2_Init+0x74>)
 80013d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001444 <MX_I2C2_Init+0x7c>)
 80013d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80013d8:	4b18      	ldr	r3, [pc, #96]	@ (800143c <MX_I2C2_Init+0x74>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013de:	4b17      	ldr	r3, [pc, #92]	@ (800143c <MX_I2C2_Init+0x74>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e4:	4b15      	ldr	r3, [pc, #84]	@ (800143c <MX_I2C2_Init+0x74>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80013ea:	4b14      	ldr	r3, [pc, #80]	@ (800143c <MX_I2C2_Init+0x74>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013f0:	4b12      	ldr	r3, [pc, #72]	@ (800143c <MX_I2C2_Init+0x74>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013f6:	4b11      	ldr	r3, [pc, #68]	@ (800143c <MX_I2C2_Init+0x74>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	@ (800143c <MX_I2C2_Init+0x74>)
 80013fe:	2200      	movs	r2, #0
 8001400:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001402:	480e      	ldr	r0, [pc, #56]	@ (800143c <MX_I2C2_Init+0x74>)
 8001404:	f001 faa0 	bl	8002948 <HAL_I2C_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800140e:	f000 f961 	bl	80016d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001412:	2100      	movs	r1, #0
 8001414:	4809      	ldr	r0, [pc, #36]	@ (800143c <MX_I2C2_Init+0x74>)
 8001416:	f001 ffef 	bl	80033f8 <HAL_I2CEx_ConfigAnalogFilter>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001420:	f000 f958 	bl	80016d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001424:	2100      	movs	r1, #0
 8001426:	4805      	ldr	r0, [pc, #20]	@ (800143c <MX_I2C2_Init+0x74>)
 8001428:	f002 f831 	bl	800348e <HAL_I2CEx_ConfigDigitalFilter>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001432:	f000 f94f 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200002b4 	.word	0x200002b4
 8001440:	40005800 	.word	0x40005800
 8001444:	00808cd2 	.word	0x00808cd2

08001448 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800144c:	4b1b      	ldr	r3, [pc, #108]	@ (80014bc <MX_SPI1_Init+0x74>)
 800144e:	4a1c      	ldr	r2, [pc, #112]	@ (80014c0 <MX_SPI1_Init+0x78>)
 8001450:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001452:	4b1a      	ldr	r3, [pc, #104]	@ (80014bc <MX_SPI1_Init+0x74>)
 8001454:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001458:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800145a:	4b18      	ldr	r3, [pc, #96]	@ (80014bc <MX_SPI1_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001460:	4b16      	ldr	r3, [pc, #88]	@ (80014bc <MX_SPI1_Init+0x74>)
 8001462:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001466:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001468:	4b14      	ldr	r3, [pc, #80]	@ (80014bc <MX_SPI1_Init+0x74>)
 800146a:	2202      	movs	r2, #2
 800146c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800146e:	4b13      	ldr	r3, [pc, #76]	@ (80014bc <MX_SPI1_Init+0x74>)
 8001470:	2201      	movs	r2, #1
 8001472:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001474:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <MX_SPI1_Init+0x74>)
 8001476:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800147a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800147c:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <MX_SPI1_Init+0x74>)
 800147e:	2220      	movs	r2, #32
 8001480:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <MX_SPI1_Init+0x74>)
 8001484:	2200      	movs	r2, #0
 8001486:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001488:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <MX_SPI1_Init+0x74>)
 800148a:	2200      	movs	r2, #0
 800148c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800148e:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <MX_SPI1_Init+0x74>)
 8001490:	2200      	movs	r2, #0
 8001492:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001494:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <MX_SPI1_Init+0x74>)
 8001496:	2207      	movs	r2, #7
 8001498:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800149a:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <MX_SPI1_Init+0x74>)
 800149c:	2200      	movs	r2, #0
 800149e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80014a0:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <MX_SPI1_Init+0x74>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014a6:	4805      	ldr	r0, [pc, #20]	@ (80014bc <MX_SPI1_Init+0x74>)
 80014a8:	f003 fa50 	bl	800494c <HAL_SPI_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80014b2:	f000 f90f 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000308 	.word	0x20000308
 80014c0:	40013000 	.word	0x40013000

080014c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014c8:	4b14      	ldr	r3, [pc, #80]	@ (800151c <MX_USART3_UART_Init+0x58>)
 80014ca:	4a15      	ldr	r2, [pc, #84]	@ (8001520 <MX_USART3_UART_Init+0x5c>)
 80014cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014ce:	4b13      	ldr	r3, [pc, #76]	@ (800151c <MX_USART3_UART_Init+0x58>)
 80014d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014d6:	4b11      	ldr	r3, [pc, #68]	@ (800151c <MX_USART3_UART_Init+0x58>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014dc:	4b0f      	ldr	r3, [pc, #60]	@ (800151c <MX_USART3_UART_Init+0x58>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	@ (800151c <MX_USART3_UART_Init+0x58>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <MX_USART3_UART_Init+0x58>)
 80014ea:	220c      	movs	r2, #12
 80014ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <MX_USART3_UART_Init+0x58>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f4:	4b09      	ldr	r3, [pc, #36]	@ (800151c <MX_USART3_UART_Init+0x58>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014fa:	4b08      	ldr	r3, [pc, #32]	@ (800151c <MX_USART3_UART_Init+0x58>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <MX_USART3_UART_Init+0x58>)
 8001502:	2200      	movs	r2, #0
 8001504:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001506:	4805      	ldr	r0, [pc, #20]	@ (800151c <MX_USART3_UART_Init+0x58>)
 8001508:	f004 f980 	bl	800580c <HAL_UART_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001512:	f000 f8df 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	2000036c 	.word	0x2000036c
 8001520:	40004800 	.word	0x40004800

08001524 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001528:	4b14      	ldr	r3, [pc, #80]	@ (800157c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800152a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800152e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001530:	4b12      	ldr	r3, [pc, #72]	@ (800157c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001532:	2206      	movs	r2, #6
 8001534:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001536:	4b11      	ldr	r3, [pc, #68]	@ (800157c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001538:	2202      	movs	r2, #2
 800153a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800153c:	4b0f      	ldr	r3, [pc, #60]	@ (800157c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001542:	4b0e      	ldr	r3, [pc, #56]	@ (800157c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001544:	2202      	movs	r2, #2
 8001546:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001548:	4b0c      	ldr	r3, [pc, #48]	@ (800157c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800154a:	2201      	movs	r2, #1
 800154c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800154e:	4b0b      	ldr	r3, [pc, #44]	@ (800157c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001550:	2200      	movs	r2, #0
 8001552:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001554:	4b09      	ldr	r3, [pc, #36]	@ (800157c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001556:	2200      	movs	r2, #0
 8001558:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800155a:	4b08      	ldr	r3, [pc, #32]	@ (800157c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800155c:	2201      	movs	r2, #1
 800155e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001560:	4b06      	ldr	r3, [pc, #24]	@ (800157c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001562:	2200      	movs	r2, #0
 8001564:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001566:	4805      	ldr	r0, [pc, #20]	@ (800157c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001568:	f001 ffdd 	bl	8003526 <HAL_PCD_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001572:	f000 f8af 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200003f4 	.word	0x200003f4

08001580 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08c      	sub	sp, #48	@ 0x30
 8001584:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001586:	f107 031c 	add.w	r3, r7, #28
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
 8001594:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001596:	4b4c      	ldr	r3, [pc, #304]	@ (80016c8 <MX_GPIO_Init+0x148>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159a:	4a4b      	ldr	r2, [pc, #300]	@ (80016c8 <MX_GPIO_Init+0x148>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a2:	4b49      	ldr	r3, [pc, #292]	@ (80016c8 <MX_GPIO_Init+0x148>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	61bb      	str	r3, [r7, #24]
 80015ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015ae:	4b46      	ldr	r3, [pc, #280]	@ (80016c8 <MX_GPIO_Init+0x148>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	4a45      	ldr	r2, [pc, #276]	@ (80016c8 <MX_GPIO_Init+0x148>)
 80015b4:	f043 0320 	orr.w	r3, r3, #32
 80015b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ba:	4b43      	ldr	r3, [pc, #268]	@ (80016c8 <MX_GPIO_Init+0x148>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	f003 0320 	and.w	r3, r3, #32
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015c6:	4b40      	ldr	r3, [pc, #256]	@ (80016c8 <MX_GPIO_Init+0x148>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	4a3f      	ldr	r2, [pc, #252]	@ (80016c8 <MX_GPIO_Init+0x148>)
 80015cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d2:	4b3d      	ldr	r3, [pc, #244]	@ (80016c8 <MX_GPIO_Init+0x148>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	4b3a      	ldr	r3, [pc, #232]	@ (80016c8 <MX_GPIO_Init+0x148>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	4a39      	ldr	r2, [pc, #228]	@ (80016c8 <MX_GPIO_Init+0x148>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ea:	4b37      	ldr	r3, [pc, #220]	@ (80016c8 <MX_GPIO_Init+0x148>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	4b34      	ldr	r3, [pc, #208]	@ (80016c8 <MX_GPIO_Init+0x148>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	4a33      	ldr	r2, [pc, #204]	@ (80016c8 <MX_GPIO_Init+0x148>)
 80015fc:	f043 0302 	orr.w	r3, r3, #2
 8001600:	6313      	str	r3, [r2, #48]	@ 0x30
 8001602:	4b31      	ldr	r3, [pc, #196]	@ (80016c8 <MX_GPIO_Init+0x148>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800160e:	4b2e      	ldr	r3, [pc, #184]	@ (80016c8 <MX_GPIO_Init+0x148>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	4a2d      	ldr	r2, [pc, #180]	@ (80016c8 <MX_GPIO_Init+0x148>)
 8001614:	f043 0308 	orr.w	r3, r3, #8
 8001618:	6313      	str	r3, [r2, #48]	@ 0x30
 800161a:	4b2b      	ldr	r3, [pc, #172]	@ (80016c8 <MX_GPIO_Init+0x148>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001626:	4b28      	ldr	r3, [pc, #160]	@ (80016c8 <MX_GPIO_Init+0x148>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	4a27      	ldr	r2, [pc, #156]	@ (80016c8 <MX_GPIO_Init+0x148>)
 800162c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001630:	6313      	str	r3, [r2, #48]	@ 0x30
 8001632:	4b25      	ldr	r3, [pc, #148]	@ (80016c8 <MX_GPIO_Init+0x148>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800163a:	603b      	str	r3, [r7, #0]
 800163c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	2140      	movs	r1, #64	@ 0x40
 8001642:	4822      	ldr	r0, [pc, #136]	@ (80016cc <MX_GPIO_Init+0x14c>)
 8001644:	f001 f966 	bl	8002914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001648:	2201      	movs	r2, #1
 800164a:	2140      	movs	r1, #64	@ 0x40
 800164c:	4820      	ldr	r0, [pc, #128]	@ (80016d0 <MX_GPIO_Init+0x150>)
 800164e:	f001 f961 	bl	8002914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001652:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001658:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800165c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001662:	f107 031c 	add.w	r3, r7, #28
 8001666:	4619      	mov	r1, r3
 8001668:	4819      	ldr	r0, [pc, #100]	@ (80016d0 <MX_GPIO_Init+0x150>)
 800166a:	f000 ffa7 	bl	80025bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800166e:	2340      	movs	r3, #64	@ 0x40
 8001670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001672:	2301      	movs	r3, #1
 8001674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2300      	movs	r3, #0
 800167c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800167e:	f107 031c 	add.w	r3, r7, #28
 8001682:	4619      	mov	r1, r3
 8001684:	4811      	ldr	r0, [pc, #68]	@ (80016cc <MX_GPIO_Init+0x14c>)
 8001686:	f000 ff99 	bl	80025bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800168a:	2380      	movs	r3, #128	@ 0x80
 800168c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168e:	2300      	movs	r3, #0
 8001690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	4619      	mov	r1, r3
 800169c:	480b      	ldr	r0, [pc, #44]	@ (80016cc <MX_GPIO_Init+0x14c>)
 800169e:	f000 ff8d 	bl	80025bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016a2:	2340      	movs	r3, #64	@ 0x40
 80016a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a6:	2301      	movs	r3, #1
 80016a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	4619      	mov	r1, r3
 80016b8:	4805      	ldr	r0, [pc, #20]	@ (80016d0 <MX_GPIO_Init+0x150>)
 80016ba:	f000 ff7f 	bl	80025bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016be:	bf00      	nop
 80016c0:	3730      	adds	r7, #48	@ 0x30
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40021800 	.word	0x40021800
 80016d0:	40020800 	.word	0x40020800

080016d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d8:	b672      	cpsid	i
}
 80016da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <Error_Handler+0x8>

080016e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <HAL_MspInit+0x44>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001724 <HAL_MspInit+0x44>)
 80016ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <HAL_MspInit+0x44>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fe:	4b09      	ldr	r3, [pc, #36]	@ (8001724 <HAL_MspInit+0x44>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001702:	4a08      	ldr	r2, [pc, #32]	@ (8001724 <HAL_MspInit+0x44>)
 8001704:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001708:	6453      	str	r3, [r2, #68]	@ 0x44
 800170a:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <HAL_MspInit+0x44>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800

08001728 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08e      	sub	sp, #56	@ 0x38
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a4e      	ldr	r2, [pc, #312]	@ (8001880 <HAL_ETH_MspInit+0x158>)
 8001746:	4293      	cmp	r3, r2
 8001748:	f040 8096 	bne.w	8001878 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800174c:	4b4d      	ldr	r3, [pc, #308]	@ (8001884 <HAL_ETH_MspInit+0x15c>)
 800174e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001750:	4a4c      	ldr	r2, [pc, #304]	@ (8001884 <HAL_ETH_MspInit+0x15c>)
 8001752:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001756:	6313      	str	r3, [r2, #48]	@ 0x30
 8001758:	4b4a      	ldr	r3, [pc, #296]	@ (8001884 <HAL_ETH_MspInit+0x15c>)
 800175a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001760:	623b      	str	r3, [r7, #32]
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	4b47      	ldr	r3, [pc, #284]	@ (8001884 <HAL_ETH_MspInit+0x15c>)
 8001766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001768:	4a46      	ldr	r2, [pc, #280]	@ (8001884 <HAL_ETH_MspInit+0x15c>)
 800176a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800176e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001770:	4b44      	ldr	r3, [pc, #272]	@ (8001884 <HAL_ETH_MspInit+0x15c>)
 8001772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001774:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	4b41      	ldr	r3, [pc, #260]	@ (8001884 <HAL_ETH_MspInit+0x15c>)
 800177e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001780:	4a40      	ldr	r2, [pc, #256]	@ (8001884 <HAL_ETH_MspInit+0x15c>)
 8001782:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001786:	6313      	str	r3, [r2, #48]	@ 0x30
 8001788:	4b3e      	ldr	r3, [pc, #248]	@ (8001884 <HAL_ETH_MspInit+0x15c>)
 800178a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001790:	61bb      	str	r3, [r7, #24]
 8001792:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001794:	4b3b      	ldr	r3, [pc, #236]	@ (8001884 <HAL_ETH_MspInit+0x15c>)
 8001796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001798:	4a3a      	ldr	r2, [pc, #232]	@ (8001884 <HAL_ETH_MspInit+0x15c>)
 800179a:	f043 0304 	orr.w	r3, r3, #4
 800179e:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a0:	4b38      	ldr	r3, [pc, #224]	@ (8001884 <HAL_ETH_MspInit+0x15c>)
 80017a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ac:	4b35      	ldr	r3, [pc, #212]	@ (8001884 <HAL_ETH_MspInit+0x15c>)
 80017ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b0:	4a34      	ldr	r2, [pc, #208]	@ (8001884 <HAL_ETH_MspInit+0x15c>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b8:	4b32      	ldr	r3, [pc, #200]	@ (8001884 <HAL_ETH_MspInit+0x15c>)
 80017ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001884 <HAL_ETH_MspInit+0x15c>)
 80017c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c8:	4a2e      	ldr	r2, [pc, #184]	@ (8001884 <HAL_ETH_MspInit+0x15c>)
 80017ca:	f043 0302 	orr.w	r3, r3, #2
 80017ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001884 <HAL_ETH_MspInit+0x15c>)
 80017d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017dc:	4b29      	ldr	r3, [pc, #164]	@ (8001884 <HAL_ETH_MspInit+0x15c>)
 80017de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e0:	4a28      	ldr	r2, [pc, #160]	@ (8001884 <HAL_ETH_MspInit+0x15c>)
 80017e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e8:	4b26      	ldr	r3, [pc, #152]	@ (8001884 <HAL_ETH_MspInit+0x15c>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80017f4:	2332      	movs	r3, #50	@ 0x32
 80017f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001800:	2303      	movs	r3, #3
 8001802:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001804:	230b      	movs	r3, #11
 8001806:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001808:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800180c:	4619      	mov	r1, r3
 800180e:	481e      	ldr	r0, [pc, #120]	@ (8001888 <HAL_ETH_MspInit+0x160>)
 8001810:	f000 fed4 	bl	80025bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001814:	2386      	movs	r3, #134	@ 0x86
 8001816:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001818:	2302      	movs	r3, #2
 800181a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001820:	2303      	movs	r3, #3
 8001822:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001824:	230b      	movs	r3, #11
 8001826:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001828:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800182c:	4619      	mov	r1, r3
 800182e:	4817      	ldr	r0, [pc, #92]	@ (800188c <HAL_ETH_MspInit+0x164>)
 8001830:	f000 fec4 	bl	80025bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001834:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001838:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001842:	2303      	movs	r3, #3
 8001844:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001846:	230b      	movs	r3, #11
 8001848:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800184a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800184e:	4619      	mov	r1, r3
 8001850:	480f      	ldr	r0, [pc, #60]	@ (8001890 <HAL_ETH_MspInit+0x168>)
 8001852:	f000 feb3 	bl	80025bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001856:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800185a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001864:	2303      	movs	r3, #3
 8001866:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001868:	230b      	movs	r3, #11
 800186a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800186c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001870:	4619      	mov	r1, r3
 8001872:	4808      	ldr	r0, [pc, #32]	@ (8001894 <HAL_ETH_MspInit+0x16c>)
 8001874:	f000 fea2 	bl	80025bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001878:	bf00      	nop
 800187a:	3738      	adds	r7, #56	@ 0x38
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40028000 	.word	0x40028000
 8001884:	40023800 	.word	0x40023800
 8001888:	40020800 	.word	0x40020800
 800188c:	40020000 	.word	0x40020000
 8001890:	40020400 	.word	0x40020400
 8001894:	40021800 	.word	0x40021800

08001898 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b0aa      	sub	sp, #168	@ 0xa8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018b0:	f107 0310 	add.w	r3, r7, #16
 80018b4:	2284      	movs	r2, #132	@ 0x84
 80018b6:	2100      	movs	r1, #0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f006 fae2 	bl	8007e82 <memset>
  if(hi2c->Instance==I2C2)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a21      	ldr	r2, [pc, #132]	@ (8001948 <HAL_I2C_MspInit+0xb0>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d13b      	bne.n	8001940 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80018c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018cc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80018ce:	2300      	movs	r3, #0
 80018d0:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018d2:	f107 0310 	add.w	r3, r7, #16
 80018d6:	4618      	mov	r0, r3
 80018d8:	f002 fc48 	bl	800416c <HAL_RCCEx_PeriphCLKConfig>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80018e2:	f7ff fef7 	bl	80016d4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018e6:	4b19      	ldr	r3, [pc, #100]	@ (800194c <HAL_I2C_MspInit+0xb4>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	4a18      	ldr	r2, [pc, #96]	@ (800194c <HAL_I2C_MspInit+0xb4>)
 80018ec:	f043 0320 	orr.w	r3, r3, #32
 80018f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f2:	4b16      	ldr	r3, [pc, #88]	@ (800194c <HAL_I2C_MspInit+0xb4>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	f003 0320 	and.w	r3, r3, #32
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018fe:	2303      	movs	r3, #3
 8001900:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001904:	2312      	movs	r3, #18
 8001906:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001910:	2303      	movs	r3, #3
 8001912:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001916:	2304      	movs	r3, #4
 8001918:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800191c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001920:	4619      	mov	r1, r3
 8001922:	480b      	ldr	r0, [pc, #44]	@ (8001950 <HAL_I2C_MspInit+0xb8>)
 8001924:	f000 fe4a 	bl	80025bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001928:	4b08      	ldr	r3, [pc, #32]	@ (800194c <HAL_I2C_MspInit+0xb4>)
 800192a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192c:	4a07      	ldr	r2, [pc, #28]	@ (800194c <HAL_I2C_MspInit+0xb4>)
 800192e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001932:	6413      	str	r3, [r2, #64]	@ 0x40
 8001934:	4b05      	ldr	r3, [pc, #20]	@ (800194c <HAL_I2C_MspInit+0xb4>)
 8001936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001938:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001940:	bf00      	nop
 8001942:	37a8      	adds	r7, #168	@ 0xa8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40005800 	.word	0x40005800
 800194c:	40023800 	.word	0x40023800
 8001950:	40021400 	.word	0x40021400

08001954 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	@ 0x28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a25      	ldr	r2, [pc, #148]	@ (8001a08 <HAL_SPI_MspInit+0xb4>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d143      	bne.n	80019fe <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001976:	4b25      	ldr	r3, [pc, #148]	@ (8001a0c <HAL_SPI_MspInit+0xb8>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197a:	4a24      	ldr	r2, [pc, #144]	@ (8001a0c <HAL_SPI_MspInit+0xb8>)
 800197c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001980:	6453      	str	r3, [r2, #68]	@ 0x44
 8001982:	4b22      	ldr	r3, [pc, #136]	@ (8001a0c <HAL_SPI_MspInit+0xb8>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001986:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a0c <HAL_SPI_MspInit+0xb8>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	4a1e      	ldr	r2, [pc, #120]	@ (8001a0c <HAL_SPI_MspInit+0xb8>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6313      	str	r3, [r2, #48]	@ 0x30
 800199a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a0c <HAL_SPI_MspInit+0xb8>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a6:	4b19      	ldr	r3, [pc, #100]	@ (8001a0c <HAL_SPI_MspInit+0xb8>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	4a18      	ldr	r2, [pc, #96]	@ (8001a0c <HAL_SPI_MspInit+0xb8>)
 80019ac:	f043 0302 	orr.w	r3, r3, #2
 80019b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b2:	4b16      	ldr	r3, [pc, #88]	@ (8001a0c <HAL_SPI_MspInit+0xb8>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80019be:	2360      	movs	r3, #96	@ 0x60
 80019c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c2:	2302      	movs	r3, #2
 80019c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ca:	2303      	movs	r3, #3
 80019cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019ce:	2305      	movs	r3, #5
 80019d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	4619      	mov	r1, r3
 80019d8:	480d      	ldr	r0, [pc, #52]	@ (8001a10 <HAL_SPI_MspInit+0xbc>)
 80019da:	f000 fdef 	bl	80025bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019de:	2320      	movs	r3, #32
 80019e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ea:	2303      	movs	r3, #3
 80019ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019ee:	2305      	movs	r3, #5
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4619      	mov	r1, r3
 80019f8:	4806      	ldr	r0, [pc, #24]	@ (8001a14 <HAL_SPI_MspInit+0xc0>)
 80019fa:	f000 fddf 	bl	80025bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019fe:	bf00      	nop
 8001a00:	3728      	adds	r7, #40	@ 0x28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40013000 	.word	0x40013000
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020000 	.word	0x40020000
 8001a14:	40020400 	.word	0x40020400

08001a18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b0aa      	sub	sp, #168	@ 0xa8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a30:	f107 0310 	add.w	r3, r7, #16
 8001a34:	2284      	movs	r2, #132	@ 0x84
 8001a36:	2100      	movs	r1, #0
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f006 fa22 	bl	8007e82 <memset>
  if(huart->Instance==USART3)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a22      	ldr	r2, [pc, #136]	@ (8001acc <HAL_UART_MspInit+0xb4>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d13c      	bne.n	8001ac2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a4c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a52:	f107 0310 	add.w	r3, r7, #16
 8001a56:	4618      	mov	r0, r3
 8001a58:	f002 fb88 	bl	800416c <HAL_RCCEx_PeriphCLKConfig>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a62:	f7ff fe37 	bl	80016d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a66:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <HAL_UART_MspInit+0xb8>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6a:	4a19      	ldr	r2, [pc, #100]	@ (8001ad0 <HAL_UART_MspInit+0xb8>)
 8001a6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a72:	4b17      	ldr	r3, [pc, #92]	@ (8001ad0 <HAL_UART_MspInit+0xb8>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a7e:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <HAL_UART_MspInit+0xb8>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	4a13      	ldr	r2, [pc, #76]	@ (8001ad0 <HAL_UART_MspInit+0xb8>)
 8001a84:	f043 0308 	orr.w	r3, r3, #8
 8001a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8a:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <HAL_UART_MspInit+0xb8>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a96:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ab0:	2307      	movs	r3, #7
 8001ab2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ab6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001aba:	4619      	mov	r1, r3
 8001abc:	4805      	ldr	r0, [pc, #20]	@ (8001ad4 <HAL_UART_MspInit+0xbc>)
 8001abe:	f000 fd7d 	bl	80025bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ac2:	bf00      	nop
 8001ac4:	37a8      	adds	r7, #168	@ 0xa8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40004800 	.word	0x40004800
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40020c00 	.word	0x40020c00

08001ad8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b0ac      	sub	sp, #176	@ 0xb0
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001af0:	f107 0318 	add.w	r3, r7, #24
 8001af4:	2284      	movs	r2, #132	@ 0x84
 8001af6:	2100      	movs	r1, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f006 f9c2 	bl	8007e82 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b06:	d159      	bne.n	8001bbc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001b08:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001b0c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b14:	f107 0318 	add.w	r3, r7, #24
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f002 fb27 	bl	800416c <HAL_RCCEx_PeriphCLKConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001b24:	f7ff fdd6 	bl	80016d4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b28:	4b26      	ldr	r3, [pc, #152]	@ (8001bc4 <HAL_PCD_MspInit+0xec>)
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2c:	4a25      	ldr	r2, [pc, #148]	@ (8001bc4 <HAL_PCD_MspInit+0xec>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b34:	4b23      	ldr	r3, [pc, #140]	@ (8001bc4 <HAL_PCD_MspInit+0xec>)
 8001b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001b40:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001b44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b54:	2303      	movs	r3, #3
 8001b56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b5a:	230a      	movs	r3, #10
 8001b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b60:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b64:	4619      	mov	r1, r3
 8001b66:	4818      	ldr	r0, [pc, #96]	@ (8001bc8 <HAL_PCD_MspInit+0xf0>)
 8001b68:	f000 fd28 	bl	80025bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001b6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b80:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b84:	4619      	mov	r1, r3
 8001b86:	4810      	ldr	r0, [pc, #64]	@ (8001bc8 <HAL_PCD_MspInit+0xf0>)
 8001b88:	f000 fd18 	bl	80025bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc4 <HAL_PCD_MspInit+0xec>)
 8001b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b90:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc4 <HAL_PCD_MspInit+0xec>)
 8001b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b96:	6353      	str	r3, [r2, #52]	@ 0x34
 8001b98:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc4 <HAL_PCD_MspInit+0xec>)
 8001b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4b07      	ldr	r3, [pc, #28]	@ (8001bc4 <HAL_PCD_MspInit+0xec>)
 8001ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba8:	4a06      	ldr	r2, [pc, #24]	@ (8001bc4 <HAL_PCD_MspInit+0xec>)
 8001baa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bae:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bb0:	4b04      	ldr	r3, [pc, #16]	@ (8001bc4 <HAL_PCD_MspInit+0xec>)
 8001bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001bbc:	bf00      	nop
 8001bbe:	37b0      	adds	r7, #176	@ 0xb0
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40020000 	.word	0x40020000

08001bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <NMI_Handler+0x4>

08001bd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <HardFault_Handler+0x4>

08001bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <MemManage_Handler+0x4>

08001be4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <BusFault_Handler+0x4>

08001bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <UsageFault_Handler+0x4>

08001bf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c22:	f000 f87b 	bl	8001d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c30:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <SystemInit+0x20>)
 8001c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c36:	4a05      	ldr	r2, [pc, #20]	@ (8001c4c <SystemInit+0x20>)
 8001c38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c54:	480d      	ldr	r0, [pc, #52]	@ (8001c8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c56:	490e      	ldr	r1, [pc, #56]	@ (8001c90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c58:	4a0e      	ldr	r2, [pc, #56]	@ (8001c94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c5c:	e002      	b.n	8001c64 <LoopCopyDataInit>

08001c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c62:	3304      	adds	r3, #4

08001c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c68:	d3f9      	bcc.n	8001c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c6a:	4a0b      	ldr	r2, [pc, #44]	@ (8001c98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c6c:	4c0b      	ldr	r4, [pc, #44]	@ (8001c9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c70:	e001      	b.n	8001c76 <LoopFillZerobss>

08001c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c74:	3204      	adds	r2, #4

08001c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c78:	d3fb      	bcc.n	8001c72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c7a:	f7ff ffd7 	bl	8001c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c7e:	f006 f90f 	bl	8007ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c82:	f7ff faa9 	bl	80011d8 <main>
  bx  lr    
 8001c86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c88:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c90:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c94:	08008e18 	.word	0x08008e18
  ldr r2, =_sbss
 8001c98:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 8001c9c:	20000ac4 	.word	0x20000ac4

08001ca0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ca0:	e7fe      	b.n	8001ca0 <ADC_IRQHandler>

08001ca2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca6:	2003      	movs	r0, #3
 8001ca8:	f000 f92e 	bl	8001f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cac:	2000      	movs	r0, #0
 8001cae:	f000 f805 	bl	8001cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb2:	f7ff fd15 	bl	80016e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cc4:	4b12      	ldr	r3, [pc, #72]	@ (8001d10 <HAL_InitTick+0x54>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4b12      	ldr	r3, [pc, #72]	@ (8001d14 <HAL_InitTick+0x58>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 f93b 	bl	8001f56 <HAL_SYSTICK_Config>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e00e      	b.n	8001d08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b0f      	cmp	r3, #15
 8001cee:	d80a      	bhi.n	8001d06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf8:	f000 f911 	bl	8001f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cfc:	4a06      	ldr	r2, [pc, #24]	@ (8001d18 <HAL_InitTick+0x5c>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
 8001d04:	e000      	b.n	8001d08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000000 	.word	0x20000000
 8001d14:	20000008 	.word	0x20000008
 8001d18:	20000004 	.word	0x20000004

08001d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d20:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <HAL_IncTick+0x20>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	461a      	mov	r2, r3
 8001d26:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <HAL_IncTick+0x24>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	4a04      	ldr	r2, [pc, #16]	@ (8001d40 <HAL_IncTick+0x24>)
 8001d2e:	6013      	str	r3, [r2, #0]
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000008 	.word	0x20000008
 8001d40:	20000988 	.word	0x20000988

08001d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return uwTick;
 8001d48:	4b03      	ldr	r3, [pc, #12]	@ (8001d58 <HAL_GetTick+0x14>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	20000988 	.word	0x20000988

08001d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d64:	f7ff ffee 	bl	8001d44 <HAL_GetTick>
 8001d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d74:	d005      	beq.n	8001d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d76:	4b0a      	ldr	r3, [pc, #40]	@ (8001da0 <HAL_Delay+0x44>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4413      	add	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d82:	bf00      	nop
 8001d84:	f7ff ffde 	bl	8001d44 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d8f7      	bhi.n	8001d84 <HAL_Delay+0x28>
  {
  }
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000008 	.word	0x20000008

08001da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db4:	4b0b      	ldr	r3, [pc, #44]	@ (8001de4 <__NVIC_SetPriorityGrouping+0x40>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001dcc:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dd2:	4a04      	ldr	r2, [pc, #16]	@ (8001de4 <__NVIC_SetPriorityGrouping+0x40>)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	60d3      	str	r3, [r2, #12]
}
 8001dd8:	bf00      	nop
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000ed00 	.word	0xe000ed00
 8001de8:	05fa0000 	.word	0x05fa0000

08001dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df0:	4b04      	ldr	r3, [pc, #16]	@ (8001e04 <__NVIC_GetPriorityGrouping+0x18>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	0a1b      	lsrs	r3, r3, #8
 8001df6:	f003 0307 	and.w	r3, r3, #7
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	6039      	str	r1, [r7, #0]
 8001e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	db0a      	blt.n	8001e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	490c      	ldr	r1, [pc, #48]	@ (8001e54 <__NVIC_SetPriority+0x4c>)
 8001e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e26:	0112      	lsls	r2, r2, #4
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e30:	e00a      	b.n	8001e48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	4908      	ldr	r1, [pc, #32]	@ (8001e58 <__NVIC_SetPriority+0x50>)
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	3b04      	subs	r3, #4
 8001e40:	0112      	lsls	r2, r2, #4
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	440b      	add	r3, r1
 8001e46:	761a      	strb	r2, [r3, #24]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	e000e100 	.word	0xe000e100
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b089      	sub	sp, #36	@ 0x24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f1c3 0307 	rsb	r3, r3, #7
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	bf28      	it	cs
 8001e7a:	2304      	movcs	r3, #4
 8001e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3304      	adds	r3, #4
 8001e82:	2b06      	cmp	r3, #6
 8001e84:	d902      	bls.n	8001e8c <NVIC_EncodePriority+0x30>
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3b03      	subs	r3, #3
 8001e8a:	e000      	b.n	8001e8e <NVIC_EncodePriority+0x32>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e90:	f04f 32ff 	mov.w	r2, #4294967295
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	401a      	ands	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001eae:	43d9      	mvns	r1, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb4:	4313      	orrs	r3, r2
         );
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3724      	adds	r7, #36	@ 0x24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ed4:	d301      	bcc.n	8001eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e00f      	b.n	8001efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eda:	4a0a      	ldr	r2, [pc, #40]	@ (8001f04 <SysTick_Config+0x40>)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ee2:	210f      	movs	r1, #15
 8001ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee8:	f7ff ff8e 	bl	8001e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eec:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <SysTick_Config+0x40>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ef2:	4b04      	ldr	r3, [pc, #16]	@ (8001f04 <SysTick_Config+0x40>)
 8001ef4:	2207      	movs	r2, #7
 8001ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	e000e010 	.word	0xe000e010

08001f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff ff47 	bl	8001da4 <__NVIC_SetPriorityGrouping>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b086      	sub	sp, #24
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	4603      	mov	r3, r0
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
 8001f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f30:	f7ff ff5c 	bl	8001dec <__NVIC_GetPriorityGrouping>
 8001f34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	68b9      	ldr	r1, [r7, #8]
 8001f3a:	6978      	ldr	r0, [r7, #20]
 8001f3c:	f7ff ff8e 	bl	8001e5c <NVIC_EncodePriority>
 8001f40:	4602      	mov	r2, r0
 8001f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f46:	4611      	mov	r1, r2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff5d 	bl	8001e08 <__NVIC_SetPriority>
}
 8001f4e:	bf00      	nop
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff ffb0 	bl	8001ec4 <SysTick_Config>
 8001f64:	4603      	mov	r3, r0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e06a      	b.n	8002058 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d106      	bne.n	8001f9a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2223      	movs	r2, #35	@ 0x23
 8001f90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff fbc7 	bl	8001728 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9a:	4b31      	ldr	r3, [pc, #196]	@ (8002060 <HAL_ETH_Init+0xf0>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9e:	4a30      	ldr	r2, [pc, #192]	@ (8002060 <HAL_ETH_Init+0xf0>)
 8001fa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fa6:	4b2e      	ldr	r3, [pc, #184]	@ (8002060 <HAL_ETH_Init+0xf0>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001faa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001fb2:	4b2c      	ldr	r3, [pc, #176]	@ (8002064 <HAL_ETH_Init+0xf4>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	4a2b      	ldr	r2, [pc, #172]	@ (8002064 <HAL_ETH_Init+0xf4>)
 8001fb8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001fbc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001fbe:	4b29      	ldr	r3, [pc, #164]	@ (8002064 <HAL_ETH_Init+0xf4>)
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	4927      	ldr	r1, [pc, #156]	@ (8002064 <HAL_ETH_Init+0xf4>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001fcc:	4b25      	ldr	r3, [pc, #148]	@ (8002064 <HAL_ETH_Init+0xf4>)
 8001fce:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6812      	ldr	r2, [r2, #0]
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fe6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fe8:	f7ff feac 	bl	8001d44 <HAL_GetTick>
 8001fec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001fee:	e011      	b.n	8002014 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001ff0:	f7ff fea8 	bl	8001d44 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001ffe:	d909      	bls.n	8002014 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2204      	movs	r2, #4
 8002004:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	22e0      	movs	r2, #224	@ 0xe0
 800200c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e021      	b.n	8002058 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1e4      	bne.n	8001ff0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f958 	bl	80022dc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f9ff 	bl	8002430 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 fa55 	bl	80024e2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	461a      	mov	r2, r3
 800203e:	2100      	movs	r1, #0
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f9bd 	bl	80023c0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2210      	movs	r2, #16
 8002052:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40023800 	.word	0x40023800
 8002064:	40013800 	.word	0x40013800

08002068 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	4b51      	ldr	r3, [pc, #324]	@ (80021c4 <ETH_SetMACConfig+0x15c>)
 800207e:	4013      	ands	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	7c1b      	ldrb	r3, [r3, #16]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d102      	bne.n	8002090 <ETH_SetMACConfig+0x28>
 800208a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800208e:	e000      	b.n	8002092 <ETH_SetMACConfig+0x2a>
 8002090:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	7c5b      	ldrb	r3, [r3, #17]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d102      	bne.n	80020a0 <ETH_SetMACConfig+0x38>
 800209a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800209e:	e000      	b.n	80020a2 <ETH_SetMACConfig+0x3a>
 80020a0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020a2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80020a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	7fdb      	ldrb	r3, [r3, #31]
 80020ae:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80020b0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80020b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	7f92      	ldrb	r2, [r2, #30]
 80020bc:	2a00      	cmp	r2, #0
 80020be:	d102      	bne.n	80020c6 <ETH_SetMACConfig+0x5e>
 80020c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020c4:	e000      	b.n	80020c8 <ETH_SetMACConfig+0x60>
 80020c6:	2200      	movs	r2, #0
                        macconf->Speed |
 80020c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	7f1b      	ldrb	r3, [r3, #28]
 80020ce:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80020d0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80020d6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	791b      	ldrb	r3, [r3, #4]
 80020dc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80020de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80020e6:	2a00      	cmp	r2, #0
 80020e8:	d102      	bne.n	80020f0 <ETH_SetMACConfig+0x88>
 80020ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020ee:	e000      	b.n	80020f2 <ETH_SetMACConfig+0x8a>
 80020f0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80020f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	7bdb      	ldrb	r3, [r3, #15]
 80020f8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80020fa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002100:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002108:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800210a:	4313      	orrs	r3, r2
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	4313      	orrs	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002122:	2001      	movs	r0, #1
 8002124:	f7ff fe1a 	bl	8001d5c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800213e:	4013      	ands	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002146:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800214e:	2a00      	cmp	r2, #0
 8002150:	d101      	bne.n	8002156 <ETH_SetMACConfig+0xee>
 8002152:	2280      	movs	r2, #128	@ 0x80
 8002154:	e000      	b.n	8002158 <ETH_SetMACConfig+0xf0>
 8002156:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002158:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800215e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002166:	2a01      	cmp	r2, #1
 8002168:	d101      	bne.n	800216e <ETH_SetMACConfig+0x106>
 800216a:	2208      	movs	r2, #8
 800216c:	e000      	b.n	8002170 <ETH_SetMACConfig+0x108>
 800216e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002170:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002178:	2a01      	cmp	r2, #1
 800217a:	d101      	bne.n	8002180 <ETH_SetMACConfig+0x118>
 800217c:	2204      	movs	r2, #4
 800217e:	e000      	b.n	8002182 <ETH_SetMACConfig+0x11a>
 8002180:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002182:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800218a:	2a01      	cmp	r2, #1
 800218c:	d101      	bne.n	8002192 <ETH_SetMACConfig+0x12a>
 800218e:	2202      	movs	r2, #2
 8002190:	e000      	b.n	8002194 <ETH_SetMACConfig+0x12c>
 8002192:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002194:	4313      	orrs	r3, r2
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4313      	orrs	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021ac:	2001      	movs	r0, #1
 80021ae:	f7ff fdd5 	bl	8001d5c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	619a      	str	r2, [r3, #24]
}
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	ff20810f 	.word	0xff20810f

080021c8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4b3d      	ldr	r3, [pc, #244]	@ (80022d8 <ETH_SetDMAConfig+0x110>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	7b1b      	ldrb	r3, [r3, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d102      	bne.n	80021f4 <ETH_SetDMAConfig+0x2c>
 80021ee:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80021f2:	e000      	b.n	80021f6 <ETH_SetDMAConfig+0x2e>
 80021f4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	7b5b      	ldrb	r3, [r3, #13]
 80021fa:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021fc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	7f52      	ldrb	r2, [r2, #29]
 8002202:	2a00      	cmp	r2, #0
 8002204:	d102      	bne.n	800220c <ETH_SetDMAConfig+0x44>
 8002206:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800220a:	e000      	b.n	800220e <ETH_SetDMAConfig+0x46>
 800220c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800220e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	7b9b      	ldrb	r3, [r3, #14]
 8002214:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002216:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800221c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	7f1b      	ldrb	r3, [r3, #28]
 8002222:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002224:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	7f9b      	ldrb	r3, [r3, #30]
 800222a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800222c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002232:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800223a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800223c:	4313      	orrs	r3, r2
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	4313      	orrs	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800224c:	461a      	mov	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800225e:	2001      	movs	r0, #1
 8002260:	f7ff fd7c 	bl	8001d5c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800226c:	461a      	mov	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	791b      	ldrb	r3, [r3, #4]
 8002276:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800227c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002282:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002288:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002290:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002292:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002298:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800229a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80022a0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6812      	ldr	r2, [r2, #0]
 80022a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022ae:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022bc:	2001      	movs	r0, #1
 80022be:	f7ff fd4d 	bl	8001d5c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022ca:	461a      	mov	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6013      	str	r3, [r2, #0]
}
 80022d0:	bf00      	nop
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	f8de3f23 	.word	0xf8de3f23

080022dc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b0a6      	sub	sp, #152	@ 0x98
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80022e4:	2301      	movs	r3, #1
 80022e6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80022ea:	2301      	movs	r3, #1
 80022ec:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80022f0:	2300      	movs	r3, #0
 80022f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80022fa:	2301      	movs	r3, #1
 80022fc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002300:	2300      	movs	r3, #0
 8002302:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002306:	2301      	movs	r3, #1
 8002308:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800230c:	2300      	movs	r3, #0
 800230e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002312:	2300      	movs	r3, #0
 8002314:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002318:	2300      	movs	r3, #0
 800231a:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800231c:	2300      	movs	r3, #0
 800231e:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002322:	2300      	movs	r3, #0
 8002324:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002326:	2300      	movs	r3, #0
 8002328:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800232c:	2300      	movs	r3, #0
 800232e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002332:	2300      	movs	r3, #0
 8002334:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002338:	2300      	movs	r3, #0
 800233a:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800233e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002342:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002344:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002348:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002350:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002354:	4619      	mov	r1, r3
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff fe86 	bl	8002068 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800235c:	2301      	movs	r3, #1
 800235e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002360:	2301      	movs	r3, #1
 8002362:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002364:	2301      	movs	r3, #1
 8002366:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800236a:	2301      	movs	r3, #1
 800236c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002372:	2300      	movs	r3, #0
 8002374:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002378:	2300      	movs	r3, #0
 800237a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800237e:	2300      	movs	r3, #0
 8002380:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002382:	2301      	movs	r3, #1
 8002384:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002388:	2301      	movs	r3, #1
 800238a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800238c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002390:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002392:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002396:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002398:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800239c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800239e:	2301      	movs	r3, #1
 80023a0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80023ac:	f107 0308 	add.w	r3, r7, #8
 80023b0:	4619      	mov	r1, r3
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff ff08 	bl	80021c8 <ETH_SetDMAConfig>
}
 80023b8:	bf00      	nop
 80023ba:	3798      	adds	r7, #152	@ 0x98
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b087      	sub	sp, #28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3305      	adds	r3, #5
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	021b      	lsls	r3, r3, #8
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	3204      	adds	r2, #4
 80023d8:	7812      	ldrb	r2, [r2, #0]
 80023da:	4313      	orrs	r3, r2
 80023dc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	4b11      	ldr	r3, [pc, #68]	@ (8002428 <ETH_MACAddressConfig+0x68>)
 80023e2:	4413      	add	r3, r2
 80023e4:	461a      	mov	r2, r3
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3303      	adds	r3, #3
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	061a      	lsls	r2, r3, #24
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3302      	adds	r3, #2
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	041b      	lsls	r3, r3, #16
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3301      	adds	r3, #1
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	021b      	lsls	r3, r3, #8
 8002404:	4313      	orrs	r3, r2
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	7812      	ldrb	r2, [r2, #0]
 800240a:	4313      	orrs	r3, r2
 800240c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	4b06      	ldr	r3, [pc, #24]	@ (800242c <ETH_MACAddressConfig+0x6c>)
 8002412:	4413      	add	r3, r2
 8002414:	461a      	mov	r2, r3
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	6013      	str	r3, [r2, #0]
}
 800241a:	bf00      	nop
 800241c:	371c      	adds	r7, #28
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40028040 	.word	0x40028040
 800242c:	40028044 	.word	0x40028044

08002430 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002438:	2300      	movs	r3, #0
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	e03e      	b.n	80024bc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68d9      	ldr	r1, [r3, #12]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	440b      	add	r3, r1
 800244e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2200      	movs	r2, #0
 800245a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2200      	movs	r2, #0
 8002466:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002468:	68b9      	ldr	r1, [r7, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	3206      	adds	r2, #6
 8002470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d80c      	bhi.n	80024a0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68d9      	ldr	r1, [r3, #12]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	440b      	add	r3, r1
 8002498:	461a      	mov	r2, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	e004      	b.n	80024aa <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	461a      	mov	r2, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3301      	adds	r3, #1
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2b03      	cmp	r3, #3
 80024c0:	d9bd      	bls.n	800243e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024d4:	611a      	str	r2, [r3, #16]
}
 80024d6:	bf00      	nop
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b085      	sub	sp, #20
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	e046      	b.n	800257e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6919      	ldr	r1, [r3, #16]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	440b      	add	r3, r1
 8002500:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2200      	movs	r2, #0
 800250c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2200      	movs	r2, #0
 8002512:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	2200      	movs	r2, #0
 8002518:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2200      	movs	r2, #0
 800251e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2200      	movs	r2, #0
 8002524:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800252c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8002534:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002542:	68b9      	ldr	r1, [r7, #8]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	3212      	adds	r2, #18
 800254a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2b02      	cmp	r3, #2
 8002552:	d80c      	bhi.n	800256e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6919      	ldr	r1, [r3, #16]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	440b      	add	r3, r1
 8002566:	461a      	mov	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	60da      	str	r2, [r3, #12]
 800256c:	e004      	b.n	8002578 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	461a      	mov	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	3301      	adds	r3, #1
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2b03      	cmp	r3, #3
 8002582:	d9b5      	bls.n	80024f0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691a      	ldr	r2, [r3, #16]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025ae:	60da      	str	r2, [r3, #12]
}
 80025b0:	bf00      	nop
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025bc:	b480      	push	{r7}
 80025be:	b089      	sub	sp, #36	@ 0x24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80025ce:	2300      	movs	r3, #0
 80025d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
 80025da:	e175      	b.n	80028c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80025dc:	2201      	movs	r2, #1
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	4013      	ands	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	f040 8164 	bne.w	80028c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	2b01      	cmp	r3, #1
 8002604:	d005      	beq.n	8002612 <HAL_GPIO_Init+0x56>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d130      	bne.n	8002674 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	2203      	movs	r2, #3
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002648:	2201      	movs	r2, #1
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	091b      	lsrs	r3, r3, #4
 800265e:	f003 0201 	and.w	r2, r3, #1
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	2b03      	cmp	r3, #3
 800267e:	d017      	beq.n	80026b0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	2203      	movs	r2, #3
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d123      	bne.n	8002704 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	08da      	lsrs	r2, r3, #3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3208      	adds	r2, #8
 80026c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	220f      	movs	r2, #15
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	691a      	ldr	r2, [r3, #16]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	08da      	lsrs	r2, r3, #3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3208      	adds	r2, #8
 80026fe:	69b9      	ldr	r1, [r7, #24]
 8002700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	2203      	movs	r2, #3
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 0203 	and.w	r2, r3, #3
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 80be 	beq.w	80028c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002746:	4b66      	ldr	r3, [pc, #408]	@ (80028e0 <HAL_GPIO_Init+0x324>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274a:	4a65      	ldr	r2, [pc, #404]	@ (80028e0 <HAL_GPIO_Init+0x324>)
 800274c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002750:	6453      	str	r3, [r2, #68]	@ 0x44
 8002752:	4b63      	ldr	r3, [pc, #396]	@ (80028e0 <HAL_GPIO_Init+0x324>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002756:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800275e:	4a61      	ldr	r2, [pc, #388]	@ (80028e4 <HAL_GPIO_Init+0x328>)
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	089b      	lsrs	r3, r3, #2
 8002764:	3302      	adds	r3, #2
 8002766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	220f      	movs	r2, #15
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43db      	mvns	r3, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4013      	ands	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a58      	ldr	r2, [pc, #352]	@ (80028e8 <HAL_GPIO_Init+0x32c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d037      	beq.n	80027fa <HAL_GPIO_Init+0x23e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a57      	ldr	r2, [pc, #348]	@ (80028ec <HAL_GPIO_Init+0x330>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d031      	beq.n	80027f6 <HAL_GPIO_Init+0x23a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a56      	ldr	r2, [pc, #344]	@ (80028f0 <HAL_GPIO_Init+0x334>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d02b      	beq.n	80027f2 <HAL_GPIO_Init+0x236>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a55      	ldr	r2, [pc, #340]	@ (80028f4 <HAL_GPIO_Init+0x338>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d025      	beq.n	80027ee <HAL_GPIO_Init+0x232>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a54      	ldr	r2, [pc, #336]	@ (80028f8 <HAL_GPIO_Init+0x33c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d01f      	beq.n	80027ea <HAL_GPIO_Init+0x22e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a53      	ldr	r2, [pc, #332]	@ (80028fc <HAL_GPIO_Init+0x340>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d019      	beq.n	80027e6 <HAL_GPIO_Init+0x22a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a52      	ldr	r2, [pc, #328]	@ (8002900 <HAL_GPIO_Init+0x344>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d013      	beq.n	80027e2 <HAL_GPIO_Init+0x226>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a51      	ldr	r2, [pc, #324]	@ (8002904 <HAL_GPIO_Init+0x348>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d00d      	beq.n	80027de <HAL_GPIO_Init+0x222>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a50      	ldr	r2, [pc, #320]	@ (8002908 <HAL_GPIO_Init+0x34c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d007      	beq.n	80027da <HAL_GPIO_Init+0x21e>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a4f      	ldr	r2, [pc, #316]	@ (800290c <HAL_GPIO_Init+0x350>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d101      	bne.n	80027d6 <HAL_GPIO_Init+0x21a>
 80027d2:	2309      	movs	r3, #9
 80027d4:	e012      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027d6:	230a      	movs	r3, #10
 80027d8:	e010      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027da:	2308      	movs	r3, #8
 80027dc:	e00e      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027de:	2307      	movs	r3, #7
 80027e0:	e00c      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027e2:	2306      	movs	r3, #6
 80027e4:	e00a      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027e6:	2305      	movs	r3, #5
 80027e8:	e008      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027ea:	2304      	movs	r3, #4
 80027ec:	e006      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027ee:	2303      	movs	r3, #3
 80027f0:	e004      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e002      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027fa:	2300      	movs	r3, #0
 80027fc:	69fa      	ldr	r2, [r7, #28]
 80027fe:	f002 0203 	and.w	r2, r2, #3
 8002802:	0092      	lsls	r2, r2, #2
 8002804:	4093      	lsls	r3, r2
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800280c:	4935      	ldr	r1, [pc, #212]	@ (80028e4 <HAL_GPIO_Init+0x328>)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	089b      	lsrs	r3, r3, #2
 8002812:	3302      	adds	r3, #2
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800281a:	4b3d      	ldr	r3, [pc, #244]	@ (8002910 <HAL_GPIO_Init+0x354>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800283e:	4a34      	ldr	r2, [pc, #208]	@ (8002910 <HAL_GPIO_Init+0x354>)
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002844:	4b32      	ldr	r3, [pc, #200]	@ (8002910 <HAL_GPIO_Init+0x354>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002868:	4a29      	ldr	r2, [pc, #164]	@ (8002910 <HAL_GPIO_Init+0x354>)
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800286e:	4b28      	ldr	r3, [pc, #160]	@ (8002910 <HAL_GPIO_Init+0x354>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	43db      	mvns	r3, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4013      	ands	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002892:	4a1f      	ldr	r2, [pc, #124]	@ (8002910 <HAL_GPIO_Init+0x354>)
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002898:	4b1d      	ldr	r3, [pc, #116]	@ (8002910 <HAL_GPIO_Init+0x354>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028bc:	4a14      	ldr	r2, [pc, #80]	@ (8002910 <HAL_GPIO_Init+0x354>)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3301      	adds	r3, #1
 80028c6:	61fb      	str	r3, [r7, #28]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	2b0f      	cmp	r3, #15
 80028cc:	f67f ae86 	bls.w	80025dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80028d0:	bf00      	nop
 80028d2:	bf00      	nop
 80028d4:	3724      	adds	r7, #36	@ 0x24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40013800 	.word	0x40013800
 80028e8:	40020000 	.word	0x40020000
 80028ec:	40020400 	.word	0x40020400
 80028f0:	40020800 	.word	0x40020800
 80028f4:	40020c00 	.word	0x40020c00
 80028f8:	40021000 	.word	0x40021000
 80028fc:	40021400 	.word	0x40021400
 8002900:	40021800 	.word	0x40021800
 8002904:	40021c00 	.word	0x40021c00
 8002908:	40022000 	.word	0x40022000
 800290c:	40022400 	.word	0x40022400
 8002910:	40013c00 	.word	0x40013c00

08002914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	807b      	strh	r3, [r7, #2]
 8002920:	4613      	mov	r3, r2
 8002922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002924:	787b      	ldrb	r3, [r7, #1]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800292a:	887a      	ldrh	r2, [r7, #2]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002930:	e003      	b.n	800293a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002932:	887b      	ldrh	r3, [r7, #2]
 8002934:	041a      	lsls	r2, r3, #16
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	619a      	str	r2, [r3, #24]
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
	...

08002948 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e07f      	b.n	8002a5a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d106      	bne.n	8002974 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7fe ff92 	bl	8001898 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2224      	movs	r2, #36	@ 0x24
 8002978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0201 	bic.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002998:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d107      	bne.n	80029c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	e006      	b.n	80029d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80029ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d104      	bne.n	80029e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80029e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6859      	ldr	r1, [r3, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002a64 <HAL_I2C_Init+0x11c>)
 80029ee:	430b      	orrs	r3, r1
 80029f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691a      	ldr	r2, [r3, #16]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69d9      	ldr	r1, [r3, #28]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a1a      	ldr	r2, [r3, #32]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2220      	movs	r2, #32
 8002a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	02008000 	.word	0x02008000

08002a68 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	4608      	mov	r0, r1
 8002a72:	4611      	mov	r1, r2
 8002a74:	461a      	mov	r2, r3
 8002a76:	4603      	mov	r3, r0
 8002a78:	817b      	strh	r3, [r7, #10]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	813b      	strh	r3, [r7, #8]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b20      	cmp	r3, #32
 8002a8c:	f040 80f9 	bne.w	8002c82 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d002      	beq.n	8002a9c <HAL_I2C_Mem_Write+0x34>
 8002a96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d105      	bne.n	8002aa8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aa2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0ed      	b.n	8002c84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <HAL_I2C_Mem_Write+0x4e>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e0e6      	b.n	8002c84 <HAL_I2C_Mem_Write+0x21c>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002abe:	f7ff f941 	bl	8001d44 <HAL_GetTick>
 8002ac2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	2319      	movs	r3, #25
 8002aca:	2201      	movs	r2, #1
 8002acc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 fac3 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e0d1      	b.n	8002c84 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2221      	movs	r2, #33	@ 0x21
 8002ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2240      	movs	r2, #64	@ 0x40
 8002aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a3a      	ldr	r2, [r7, #32]
 8002afa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002b00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b08:	88f8      	ldrh	r0, [r7, #6]
 8002b0a:	893a      	ldrh	r2, [r7, #8]
 8002b0c:	8979      	ldrh	r1, [r7, #10]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	9301      	str	r3, [sp, #4]
 8002b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	4603      	mov	r3, r0
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 f9d3 	bl	8002ec4 <I2C_RequestMemoryWrite>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0a9      	b.n	8002c84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	2bff      	cmp	r3, #255	@ 0xff
 8002b38:	d90e      	bls.n	8002b58 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	22ff      	movs	r2, #255	@ 0xff
 8002b3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	8979      	ldrh	r1, [r7, #10]
 8002b48:	2300      	movs	r3, #0
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 fc1f 	bl	8003394 <I2C_TransferConfig>
 8002b56:	e00f      	b.n	8002b78 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	8979      	ldrh	r1, [r7, #10]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 fc0e 	bl	8003394 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 faad 	bl	80030dc <I2C_WaitOnTXISFlagUntilTimeout>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e07b      	b.n	8002c84 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b90:	781a      	ldrb	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d034      	beq.n	8002c30 <HAL_I2C_Mem_Write+0x1c8>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d130      	bne.n	8002c30 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2180      	movs	r1, #128	@ 0x80
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 fa3f 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e04d      	b.n	8002c84 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	2bff      	cmp	r3, #255	@ 0xff
 8002bf0:	d90e      	bls.n	8002c10 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	22ff      	movs	r2, #255	@ 0xff
 8002bf6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	8979      	ldrh	r1, [r7, #10]
 8002c00:	2300      	movs	r3, #0
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 fbc3 	bl	8003394 <I2C_TransferConfig>
 8002c0e:	e00f      	b.n	8002c30 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	8979      	ldrh	r1, [r7, #10]
 8002c22:	2300      	movs	r3, #0
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 fbb2 	bl	8003394 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d19e      	bne.n	8002b78 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 fa8c 	bl	800315c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e01a      	b.n	8002c84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2220      	movs	r2, #32
 8002c54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6859      	ldr	r1, [r3, #4]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	4b0a      	ldr	r3, [pc, #40]	@ (8002c8c <HAL_I2C_Mem_Write+0x224>)
 8002c62:	400b      	ands	r3, r1
 8002c64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	e000      	b.n	8002c84 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002c82:	2302      	movs	r3, #2
  }
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	fe00e800 	.word	0xfe00e800

08002c90 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af02      	add	r7, sp, #8
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	4608      	mov	r0, r1
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	817b      	strh	r3, [r7, #10]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	813b      	strh	r3, [r7, #8]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b20      	cmp	r3, #32
 8002cb4:	f040 80fd 	bne.w	8002eb2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d002      	beq.n	8002cc4 <HAL_I2C_Mem_Read+0x34>
 8002cbe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d105      	bne.n	8002cd0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cca:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e0f1      	b.n	8002eb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d101      	bne.n	8002cde <HAL_I2C_Mem_Read+0x4e>
 8002cda:	2302      	movs	r3, #2
 8002cdc:	e0ea      	b.n	8002eb4 <HAL_I2C_Mem_Read+0x224>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ce6:	f7ff f82d 	bl	8001d44 <HAL_GetTick>
 8002cea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	2319      	movs	r3, #25
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 f9af 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0d5      	b.n	8002eb4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2222      	movs	r2, #34	@ 0x22
 8002d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2240      	movs	r2, #64	@ 0x40
 8002d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a3a      	ldr	r2, [r7, #32]
 8002d22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d30:	88f8      	ldrh	r0, [r7, #6]
 8002d32:	893a      	ldrh	r2, [r7, #8]
 8002d34:	8979      	ldrh	r1, [r7, #10]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	9301      	str	r3, [sp, #4]
 8002d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	4603      	mov	r3, r0
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 f913 	bl	8002f6c <I2C_RequestMemoryRead>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0ad      	b.n	8002eb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2bff      	cmp	r3, #255	@ 0xff
 8002d60:	d90e      	bls.n	8002d80 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	22ff      	movs	r2, #255	@ 0xff
 8002d66:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	8979      	ldrh	r1, [r7, #10]
 8002d70:	4b52      	ldr	r3, [pc, #328]	@ (8002ebc <HAL_I2C_Mem_Read+0x22c>)
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 fb0b 	bl	8003394 <I2C_TransferConfig>
 8002d7e:	e00f      	b.n	8002da0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	8979      	ldrh	r1, [r7, #10]
 8002d92:	4b4a      	ldr	r3, [pc, #296]	@ (8002ebc <HAL_I2C_Mem_Read+0x22c>)
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 fafa 	bl	8003394 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da6:	2200      	movs	r2, #0
 8002da8:	2104      	movs	r1, #4
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 f956 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e07c      	b.n	8002eb4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	3b01      	subs	r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d034      	beq.n	8002e60 <HAL_I2C_Mem_Read+0x1d0>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d130      	bne.n	8002e60 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e04:	2200      	movs	r2, #0
 8002e06:	2180      	movs	r1, #128	@ 0x80
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 f927 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e04d      	b.n	8002eb4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2bff      	cmp	r3, #255	@ 0xff
 8002e20:	d90e      	bls.n	8002e40 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	22ff      	movs	r2, #255	@ 0xff
 8002e26:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	8979      	ldrh	r1, [r7, #10]
 8002e30:	2300      	movs	r3, #0
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 faab 	bl	8003394 <I2C_TransferConfig>
 8002e3e:	e00f      	b.n	8002e60 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	8979      	ldrh	r1, [r7, #10]
 8002e52:	2300      	movs	r3, #0
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 fa9a 	bl	8003394 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d19a      	bne.n	8002da0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 f974 	bl	800315c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e01a      	b.n	8002eb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2220      	movs	r2, #32
 8002e84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6859      	ldr	r1, [r3, #4]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <HAL_I2C_Mem_Read+0x230>)
 8002e92:	400b      	ands	r3, r1
 8002e94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	e000      	b.n	8002eb4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002eb2:	2302      	movs	r3, #2
  }
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	80002400 	.word	0x80002400
 8002ec0:	fe00e800 	.word	0xfe00e800

08002ec4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	4608      	mov	r0, r1
 8002ece:	4611      	mov	r1, r2
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	817b      	strh	r3, [r7, #10]
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	813b      	strh	r3, [r7, #8]
 8002eda:	4613      	mov	r3, r2
 8002edc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002ede:	88fb      	ldrh	r3, [r7, #6]
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	8979      	ldrh	r1, [r7, #10]
 8002ee4:	4b20      	ldr	r3, [pc, #128]	@ (8002f68 <I2C_RequestMemoryWrite+0xa4>)
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 fa51 	bl	8003394 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ef2:	69fa      	ldr	r2, [r7, #28]
 8002ef4:	69b9      	ldr	r1, [r7, #24]
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 f8f0 	bl	80030dc <I2C_WaitOnTXISFlagUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e02c      	b.n	8002f60 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f06:	88fb      	ldrh	r3, [r7, #6]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d105      	bne.n	8002f18 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f0c:	893b      	ldrh	r3, [r7, #8]
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f16:	e015      	b.n	8002f44 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f18:	893b      	ldrh	r3, [r7, #8]
 8002f1a:	0a1b      	lsrs	r3, r3, #8
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f26:	69fa      	ldr	r2, [r7, #28]
 8002f28:	69b9      	ldr	r1, [r7, #24]
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 f8d6 	bl	80030dc <I2C_WaitOnTXISFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e012      	b.n	8002f60 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f3a:	893b      	ldrh	r3, [r7, #8]
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2180      	movs	r1, #128	@ 0x80
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f884 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	80002000 	.word	0x80002000

08002f6c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af02      	add	r7, sp, #8
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	4608      	mov	r0, r1
 8002f76:	4611      	mov	r1, r2
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	817b      	strh	r3, [r7, #10]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	813b      	strh	r3, [r7, #8]
 8002f82:	4613      	mov	r3, r2
 8002f84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002f86:	88fb      	ldrh	r3, [r7, #6]
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	8979      	ldrh	r1, [r7, #10]
 8002f8c:	4b20      	ldr	r3, [pc, #128]	@ (8003010 <I2C_RequestMemoryRead+0xa4>)
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	2300      	movs	r3, #0
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 f9fe 	bl	8003394 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f98:	69fa      	ldr	r2, [r7, #28]
 8002f9a:	69b9      	ldr	r1, [r7, #24]
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 f89d 	bl	80030dc <I2C_WaitOnTXISFlagUntilTimeout>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e02c      	b.n	8003006 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fac:	88fb      	ldrh	r3, [r7, #6]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d105      	bne.n	8002fbe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fb2:	893b      	ldrh	r3, [r7, #8]
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	629a      	str	r2, [r3, #40]	@ 0x28
 8002fbc:	e015      	b.n	8002fea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002fbe:	893b      	ldrh	r3, [r7, #8]
 8002fc0:	0a1b      	lsrs	r3, r3, #8
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fcc:	69fa      	ldr	r2, [r7, #28]
 8002fce:	69b9      	ldr	r1, [r7, #24]
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 f883 	bl	80030dc <I2C_WaitOnTXISFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e012      	b.n	8003006 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fe0:	893b      	ldrh	r3, [r7, #8]
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2140      	movs	r1, #64	@ 0x40
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 f831 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e000      	b.n	8003006 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	80002000 	.word	0x80002000

08003014 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b02      	cmp	r3, #2
 8003028:	d103      	bne.n	8003032 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2200      	movs	r2, #0
 8003030:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b01      	cmp	r3, #1
 800303e:	d007      	beq.n	8003050 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699a      	ldr	r2, [r3, #24]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0201 	orr.w	r2, r2, #1
 800304e:	619a      	str	r2, [r3, #24]
  }
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	603b      	str	r3, [r7, #0]
 8003068:	4613      	mov	r3, r2
 800306a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800306c:	e022      	b.n	80030b4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003074:	d01e      	beq.n	80030b4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003076:	f7fe fe65 	bl	8001d44 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d302      	bcc.n	800308c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d113      	bne.n	80030b4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003090:	f043 0220 	orr.w	r2, r3, #32
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e00f      	b.n	80030d4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699a      	ldr	r2, [r3, #24]
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	4013      	ands	r3, r2
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	bf0c      	ite	eq
 80030c4:	2301      	moveq	r3, #1
 80030c6:	2300      	movne	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d0cd      	beq.n	800306e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030e8:	e02c      	b.n	8003144 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	68b9      	ldr	r1, [r7, #8]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 f870 	bl	80031d4 <I2C_IsErrorOccurred>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e02a      	b.n	8003154 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003104:	d01e      	beq.n	8003144 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003106:	f7fe fe1d 	bl	8001d44 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	429a      	cmp	r2, r3
 8003114:	d302      	bcc.n	800311c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d113      	bne.n	8003144 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003120:	f043 0220 	orr.w	r2, r3, #32
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e007      	b.n	8003154 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b02      	cmp	r3, #2
 8003150:	d1cb      	bne.n	80030ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003168:	e028      	b.n	80031bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	68b9      	ldr	r1, [r7, #8]
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 f830 	bl	80031d4 <I2C_IsErrorOccurred>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e026      	b.n	80031cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317e:	f7fe fde1 	bl	8001d44 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	429a      	cmp	r2, r3
 800318c:	d302      	bcc.n	8003194 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d113      	bne.n	80031bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003198:	f043 0220 	orr.w	r2, r3, #32
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e007      	b.n	80031cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	f003 0320 	and.w	r3, r3, #32
 80031c6:	2b20      	cmp	r3, #32
 80031c8:	d1cf      	bne.n	800316a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08a      	sub	sp, #40	@ 0x28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80031ee:	2300      	movs	r3, #0
 80031f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	f003 0310 	and.w	r3, r3, #16
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d068      	beq.n	80032d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2210      	movs	r2, #16
 8003206:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003208:	e049      	b.n	800329e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003210:	d045      	beq.n	800329e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003212:	f7fe fd97 	bl	8001d44 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	429a      	cmp	r2, r3
 8003220:	d302      	bcc.n	8003228 <I2C_IsErrorOccurred+0x54>
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d13a      	bne.n	800329e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003232:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800323a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003246:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800324a:	d121      	bne.n	8003290 <I2C_IsErrorOccurred+0xbc>
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003252:	d01d      	beq.n	8003290 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003254:	7cfb      	ldrb	r3, [r7, #19]
 8003256:	2b20      	cmp	r3, #32
 8003258:	d01a      	beq.n	8003290 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003268:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800326a:	f7fe fd6b 	bl	8001d44 <HAL_GetTick>
 800326e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003270:	e00e      	b.n	8003290 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003272:	f7fe fd67 	bl	8001d44 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b19      	cmp	r3, #25
 800327e:	d907      	bls.n	8003290 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	f043 0320 	orr.w	r3, r3, #32
 8003286:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800328e:	e006      	b.n	800329e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	f003 0320 	and.w	r3, r3, #32
 800329a:	2b20      	cmp	r3, #32
 800329c:	d1e9      	bne.n	8003272 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	f003 0320 	and.w	r3, r3, #32
 80032a8:	2b20      	cmp	r3, #32
 80032aa:	d003      	beq.n	80032b4 <I2C_IsErrorOccurred+0xe0>
 80032ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0aa      	beq.n	800320a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80032b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d103      	bne.n	80032c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2220      	movs	r2, #32
 80032c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	f043 0304 	orr.w	r3, r3, #4
 80032ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00b      	beq.n	80032fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00b      	beq.n	800331e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	f043 0308 	orr.w	r3, r3, #8
 800330c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003316:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00b      	beq.n	8003340 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	f043 0302 	orr.w	r3, r3, #2
 800332e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003338:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003340:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003344:	2b00      	cmp	r3, #0
 8003346:	d01c      	beq.n	8003382 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f7ff fe63 	bl	8003014 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6859      	ldr	r1, [r3, #4]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	4b0d      	ldr	r3, [pc, #52]	@ (8003390 <I2C_IsErrorOccurred+0x1bc>)
 800335a:	400b      	ands	r3, r1
 800335c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	431a      	orrs	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2220      	movs	r2, #32
 800336e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003382:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003386:	4618      	mov	r0, r3
 8003388:	3728      	adds	r7, #40	@ 0x28
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	fe00e800 	.word	0xfe00e800

08003394 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	607b      	str	r3, [r7, #4]
 800339e:	460b      	mov	r3, r1
 80033a0:	817b      	strh	r3, [r7, #10]
 80033a2:	4613      	mov	r3, r2
 80033a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033a6:	897b      	ldrh	r3, [r7, #10]
 80033a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033ac:	7a7b      	ldrb	r3, [r7, #9]
 80033ae:	041b      	lsls	r3, r3, #16
 80033b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	4313      	orrs	r3, r2
 80033be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	0d5b      	lsrs	r3, r3, #21
 80033ce:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80033d2:	4b08      	ldr	r3, [pc, #32]	@ (80033f4 <I2C_TransferConfig+0x60>)
 80033d4:	430b      	orrs	r3, r1
 80033d6:	43db      	mvns	r3, r3
 80033d8:	ea02 0103 	and.w	r1, r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80033e6:	bf00      	nop
 80033e8:	371c      	adds	r7, #28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	03ff63ff 	.word	0x03ff63ff

080033f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b20      	cmp	r3, #32
 800340c:	d138      	bne.n	8003480 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003418:	2302      	movs	r3, #2
 800341a:	e032      	b.n	8003482 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2224      	movs	r2, #36	@ 0x24
 8003428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0201 	bic.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800344a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6819      	ldr	r1, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	e000      	b.n	8003482 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003480:	2302      	movs	r3, #2
  }
}
 8003482:	4618      	mov	r0, r3
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800348e:	b480      	push	{r7}
 8003490:	b085      	sub	sp, #20
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	d139      	bne.n	8003518 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e033      	b.n	800351a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2224      	movs	r2, #36	@ 0x24
 80034be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0201 	bic.w	r2, r2, #1
 80034d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80034e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	021b      	lsls	r3, r3, #8
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003514:	2300      	movs	r3, #0
 8003516:	e000      	b.n	800351a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003518:	2302      	movs	r3, #2
  }
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003526:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003528:	b08f      	sub	sp, #60	@ 0x3c
 800352a:	af0a      	add	r7, sp, #40	@ 0x28
 800352c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e116      	b.n	8003766 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d106      	bne.n	8003558 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7fe fac0 	bl	8001ad8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2203      	movs	r2, #3
 800355c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003568:	2b00      	cmp	r3, #0
 800356a:	d102      	bne.n	8003572 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f002 fdf2 	bl	8006160 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	603b      	str	r3, [r7, #0]
 8003582:	687e      	ldr	r6, [r7, #4]
 8003584:	466d      	mov	r5, sp
 8003586:	f106 0410 	add.w	r4, r6, #16
 800358a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800358c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800358e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003590:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003592:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003596:	e885 0003 	stmia.w	r5, {r0, r1}
 800359a:	1d33      	adds	r3, r6, #4
 800359c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800359e:	6838      	ldr	r0, [r7, #0]
 80035a0:	f002 fd86 	bl	80060b0 <USB_CoreInit>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d005      	beq.n	80035b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2202      	movs	r2, #2
 80035ae:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e0d7      	b.n	8003766 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2100      	movs	r1, #0
 80035bc:	4618      	mov	r0, r3
 80035be:	f002 fde0 	bl	8006182 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035c2:	2300      	movs	r3, #0
 80035c4:	73fb      	strb	r3, [r7, #15]
 80035c6:	e04a      	b.n	800365e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035c8:	7bfa      	ldrb	r2, [r7, #15]
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	4613      	mov	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	333d      	adds	r3, #61	@ 0x3d
 80035d8:	2201      	movs	r2, #1
 80035da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035dc:	7bfa      	ldrb	r2, [r7, #15]
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	4613      	mov	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	4413      	add	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	333c      	adds	r3, #60	@ 0x3c
 80035ec:	7bfa      	ldrb	r2, [r7, #15]
 80035ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035f0:	7bfa      	ldrb	r2, [r7, #15]
 80035f2:	7bfb      	ldrb	r3, [r7, #15]
 80035f4:	b298      	uxth	r0, r3
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	3344      	adds	r3, #68	@ 0x44
 8003604:	4602      	mov	r2, r0
 8003606:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003608:	7bfa      	ldrb	r2, [r7, #15]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4413      	add	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	3340      	adds	r3, #64	@ 0x40
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800361c:	7bfa      	ldrb	r2, [r7, #15]
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	3348      	adds	r3, #72	@ 0x48
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003630:	7bfa      	ldrb	r2, [r7, #15]
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	334c      	adds	r3, #76	@ 0x4c
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003644:	7bfa      	ldrb	r2, [r7, #15]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	3354      	adds	r3, #84	@ 0x54
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	3301      	adds	r3, #1
 800365c:	73fb      	strb	r3, [r7, #15]
 800365e:	7bfa      	ldrb	r2, [r7, #15]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	429a      	cmp	r2, r3
 8003666:	d3af      	bcc.n	80035c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003668:	2300      	movs	r3, #0
 800366a:	73fb      	strb	r3, [r7, #15]
 800366c:	e044      	b.n	80036f8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800366e:	7bfa      	ldrb	r2, [r7, #15]
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	4613      	mov	r3, r2
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	4413      	add	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	440b      	add	r3, r1
 800367c:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003680:	2200      	movs	r2, #0
 8003682:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003684:	7bfa      	ldrb	r2, [r7, #15]
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003696:	7bfa      	ldrb	r2, [r7, #15]
 8003698:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800369a:	7bfa      	ldrb	r2, [r7, #15]
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80036ac:	2200      	movs	r2, #0
 80036ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036b0:	7bfa      	ldrb	r2, [r7, #15]
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	4613      	mov	r3, r2
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	4413      	add	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036c6:	7bfa      	ldrb	r2, [r7, #15]
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	4613      	mov	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	4413      	add	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	440b      	add	r3, r1
 80036d4:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036dc:	7bfa      	ldrb	r2, [r7, #15]
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4413      	add	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
 80036f4:	3301      	adds	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]
 80036f8:	7bfa      	ldrb	r2, [r7, #15]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d3b5      	bcc.n	800366e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	603b      	str	r3, [r7, #0]
 8003708:	687e      	ldr	r6, [r7, #4]
 800370a:	466d      	mov	r5, sp
 800370c:	f106 0410 	add.w	r4, r6, #16
 8003710:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003712:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003714:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003716:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003718:	e894 0003 	ldmia.w	r4, {r0, r1}
 800371c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003720:	1d33      	adds	r3, r6, #4
 8003722:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003724:	6838      	ldr	r0, [r7, #0]
 8003726:	f002 fd79 	bl	800621c <USB_DevInit>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d005      	beq.n	800373c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e014      	b.n	8003766 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003750:	2b01      	cmp	r3, #1
 8003752:	d102      	bne.n	800375a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f80b 	bl	8003770 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f002 ff37 	bl	80065d2 <USB_DevDisconnect>

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003770 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800379e:	4b05      	ldr	r3, [pc, #20]	@ (80037b4 <HAL_PCDEx_ActivateLPM+0x44>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	10000003 	.word	0x10000003

080037b8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037bc:	4b05      	ldr	r3, [pc, #20]	@ (80037d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a04      	ldr	r2, [pc, #16]	@ (80037d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037c6:	6013      	str	r3, [r2, #0]
}
 80037c8:	bf00      	nop
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40007000 	.word	0x40007000

080037d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80037e0:	2300      	movs	r3, #0
 80037e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e291      	b.n	8003d12 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 8087 	beq.w	800390a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037fc:	4b96      	ldr	r3, [pc, #600]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 030c 	and.w	r3, r3, #12
 8003804:	2b04      	cmp	r3, #4
 8003806:	d00c      	beq.n	8003822 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003808:	4b93      	ldr	r3, [pc, #588]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 030c 	and.w	r3, r3, #12
 8003810:	2b08      	cmp	r3, #8
 8003812:	d112      	bne.n	800383a <HAL_RCC_OscConfig+0x62>
 8003814:	4b90      	ldr	r3, [pc, #576]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800381c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003820:	d10b      	bne.n	800383a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003822:	4b8d      	ldr	r3, [pc, #564]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d06c      	beq.n	8003908 <HAL_RCC_OscConfig+0x130>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d168      	bne.n	8003908 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e26b      	b.n	8003d12 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003842:	d106      	bne.n	8003852 <HAL_RCC_OscConfig+0x7a>
 8003844:	4b84      	ldr	r3, [pc, #528]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a83      	ldr	r2, [pc, #524]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 800384a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	e02e      	b.n	80038b0 <HAL_RCC_OscConfig+0xd8>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10c      	bne.n	8003874 <HAL_RCC_OscConfig+0x9c>
 800385a:	4b7f      	ldr	r3, [pc, #508]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a7e      	ldr	r2, [pc, #504]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 8003860:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	4b7c      	ldr	r3, [pc, #496]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a7b      	ldr	r2, [pc, #492]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 800386c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	e01d      	b.n	80038b0 <HAL_RCC_OscConfig+0xd8>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800387c:	d10c      	bne.n	8003898 <HAL_RCC_OscConfig+0xc0>
 800387e:	4b76      	ldr	r3, [pc, #472]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a75      	ldr	r2, [pc, #468]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 8003884:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	4b73      	ldr	r3, [pc, #460]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a72      	ldr	r2, [pc, #456]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 8003890:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	e00b      	b.n	80038b0 <HAL_RCC_OscConfig+0xd8>
 8003898:	4b6f      	ldr	r3, [pc, #444]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a6e      	ldr	r2, [pc, #440]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 800389e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	4b6c      	ldr	r3, [pc, #432]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a6b      	ldr	r2, [pc, #428]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 80038aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d013      	beq.n	80038e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b8:	f7fe fa44 	bl	8001d44 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c0:	f7fe fa40 	bl	8001d44 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b64      	cmp	r3, #100	@ 0x64
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e21f      	b.n	8003d12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d2:	4b61      	ldr	r3, [pc, #388]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0f0      	beq.n	80038c0 <HAL_RCC_OscConfig+0xe8>
 80038de:	e014      	b.n	800390a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e0:	f7fe fa30 	bl	8001d44 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e8:	f7fe fa2c 	bl	8001d44 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b64      	cmp	r3, #100	@ 0x64
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e20b      	b.n	8003d12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038fa:	4b57      	ldr	r3, [pc, #348]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f0      	bne.n	80038e8 <HAL_RCC_OscConfig+0x110>
 8003906:	e000      	b.n	800390a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d069      	beq.n	80039ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003916:	4b50      	ldr	r3, [pc, #320]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 030c 	and.w	r3, r3, #12
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00b      	beq.n	800393a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003922:	4b4d      	ldr	r3, [pc, #308]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 030c 	and.w	r3, r3, #12
 800392a:	2b08      	cmp	r3, #8
 800392c:	d11c      	bne.n	8003968 <HAL_RCC_OscConfig+0x190>
 800392e:	4b4a      	ldr	r3, [pc, #296]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d116      	bne.n	8003968 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800393a:	4b47      	ldr	r3, [pc, #284]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d005      	beq.n	8003952 <HAL_RCC_OscConfig+0x17a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d001      	beq.n	8003952 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e1df      	b.n	8003d12 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003952:	4b41      	ldr	r3, [pc, #260]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	493d      	ldr	r1, [pc, #244]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 8003962:	4313      	orrs	r3, r2
 8003964:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003966:	e040      	b.n	80039ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d023      	beq.n	80039b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003970:	4b39      	ldr	r3, [pc, #228]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a38      	ldr	r2, [pc, #224]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 8003976:	f043 0301 	orr.w	r3, r3, #1
 800397a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397c:	f7fe f9e2 	bl	8001d44 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003984:	f7fe f9de 	bl	8001d44 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e1bd      	b.n	8003d12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003996:	4b30      	ldr	r3, [pc, #192]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f0      	beq.n	8003984 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	4929      	ldr	r1, [pc, #164]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	600b      	str	r3, [r1, #0]
 80039b6:	e018      	b.n	80039ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039b8:	4b27      	ldr	r3, [pc, #156]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a26      	ldr	r2, [pc, #152]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 80039be:	f023 0301 	bic.w	r3, r3, #1
 80039c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c4:	f7fe f9be 	bl	8001d44 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039cc:	f7fe f9ba 	bl	8001d44 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e199      	b.n	8003d12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039de:	4b1e      	ldr	r3, [pc, #120]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d038      	beq.n	8003a68 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d019      	beq.n	8003a32 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039fe:	4b16      	ldr	r3, [pc, #88]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 8003a00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a02:	4a15      	ldr	r2, [pc, #84]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 8003a04:	f043 0301 	orr.w	r3, r3, #1
 8003a08:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a0a:	f7fe f99b 	bl	8001d44 <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a10:	e008      	b.n	8003a24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a12:	f7fe f997 	bl	8001d44 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e176      	b.n	8003d12 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a24:	4b0c      	ldr	r3, [pc, #48]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 8003a26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0f0      	beq.n	8003a12 <HAL_RCC_OscConfig+0x23a>
 8003a30:	e01a      	b.n	8003a68 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a32:	4b09      	ldr	r3, [pc, #36]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 8003a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a36:	4a08      	ldr	r2, [pc, #32]	@ (8003a58 <HAL_RCC_OscConfig+0x280>)
 8003a38:	f023 0301 	bic.w	r3, r3, #1
 8003a3c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3e:	f7fe f981 	bl	8001d44 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a44:	e00a      	b.n	8003a5c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a46:	f7fe f97d 	bl	8001d44 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d903      	bls.n	8003a5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e15c      	b.n	8003d12 <HAL_RCC_OscConfig+0x53a>
 8003a58:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a5c:	4b91      	ldr	r3, [pc, #580]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003a5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1ee      	bne.n	8003a46 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 80a4 	beq.w	8003bbe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a76:	4b8b      	ldr	r3, [pc, #556]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10d      	bne.n	8003a9e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a82:	4b88      	ldr	r3, [pc, #544]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a86:	4a87      	ldr	r2, [pc, #540]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a8e:	4b85      	ldr	r3, [pc, #532]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a96:	60bb      	str	r3, [r7, #8]
 8003a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a9e:	4b82      	ldr	r3, [pc, #520]	@ (8003ca8 <HAL_RCC_OscConfig+0x4d0>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d118      	bne.n	8003adc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003aaa:	4b7f      	ldr	r3, [pc, #508]	@ (8003ca8 <HAL_RCC_OscConfig+0x4d0>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a7e      	ldr	r2, [pc, #504]	@ (8003ca8 <HAL_RCC_OscConfig+0x4d0>)
 8003ab0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab6:	f7fe f945 	bl	8001d44 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003abe:	f7fe f941 	bl	8001d44 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b64      	cmp	r3, #100	@ 0x64
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e120      	b.n	8003d12 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ad0:	4b75      	ldr	r3, [pc, #468]	@ (8003ca8 <HAL_RCC_OscConfig+0x4d0>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0f0      	beq.n	8003abe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d106      	bne.n	8003af2 <HAL_RCC_OscConfig+0x31a>
 8003ae4:	4b6f      	ldr	r3, [pc, #444]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae8:	4a6e      	ldr	r2, [pc, #440]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	6713      	str	r3, [r2, #112]	@ 0x70
 8003af0:	e02d      	b.n	8003b4e <HAL_RCC_OscConfig+0x376>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10c      	bne.n	8003b14 <HAL_RCC_OscConfig+0x33c>
 8003afa:	4b6a      	ldr	r3, [pc, #424]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003afe:	4a69      	ldr	r2, [pc, #420]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003b00:	f023 0301 	bic.w	r3, r3, #1
 8003b04:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b06:	4b67      	ldr	r3, [pc, #412]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0a:	4a66      	ldr	r2, [pc, #408]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003b0c:	f023 0304 	bic.w	r3, r3, #4
 8003b10:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b12:	e01c      	b.n	8003b4e <HAL_RCC_OscConfig+0x376>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2b05      	cmp	r3, #5
 8003b1a:	d10c      	bne.n	8003b36 <HAL_RCC_OscConfig+0x35e>
 8003b1c:	4b61      	ldr	r3, [pc, #388]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b20:	4a60      	ldr	r2, [pc, #384]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003b22:	f043 0304 	orr.w	r3, r3, #4
 8003b26:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b28:	4b5e      	ldr	r3, [pc, #376]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2c:	4a5d      	ldr	r2, [pc, #372]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003b2e:	f043 0301 	orr.w	r3, r3, #1
 8003b32:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b34:	e00b      	b.n	8003b4e <HAL_RCC_OscConfig+0x376>
 8003b36:	4b5b      	ldr	r3, [pc, #364]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b3a:	4a5a      	ldr	r2, [pc, #360]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003b3c:	f023 0301 	bic.w	r3, r3, #1
 8003b40:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b42:	4b58      	ldr	r3, [pc, #352]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b46:	4a57      	ldr	r2, [pc, #348]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003b48:	f023 0304 	bic.w	r3, r3, #4
 8003b4c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d015      	beq.n	8003b82 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b56:	f7fe f8f5 	bl	8001d44 <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b5c:	e00a      	b.n	8003b74 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b5e:	f7fe f8f1 	bl	8001d44 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e0ce      	b.n	8003d12 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b74:	4b4b      	ldr	r3, [pc, #300]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0ee      	beq.n	8003b5e <HAL_RCC_OscConfig+0x386>
 8003b80:	e014      	b.n	8003bac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b82:	f7fe f8df 	bl	8001d44 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b88:	e00a      	b.n	8003ba0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8a:	f7fe f8db 	bl	8001d44 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e0b8      	b.n	8003d12 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba0:	4b40      	ldr	r3, [pc, #256]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1ee      	bne.n	8003b8a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bac:	7dfb      	ldrb	r3, [r7, #23]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d105      	bne.n	8003bbe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb2:	4b3c      	ldr	r3, [pc, #240]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb6:	4a3b      	ldr	r2, [pc, #236]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003bb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bbc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 80a4 	beq.w	8003d10 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bc8:	4b36      	ldr	r3, [pc, #216]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 030c 	and.w	r3, r3, #12
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d06b      	beq.n	8003cac <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d149      	bne.n	8003c70 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bdc:	4b31      	ldr	r3, [pc, #196]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a30      	ldr	r2, [pc, #192]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003be2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be8:	f7fe f8ac 	bl	8001d44 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf0:	f7fe f8a8 	bl	8001d44 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e087      	b.n	8003d12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c02:	4b28      	ldr	r3, [pc, #160]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f0      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69da      	ldr	r2, [r3, #28]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1c:	019b      	lsls	r3, r3, #6
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c24:	085b      	lsrs	r3, r3, #1
 8003c26:	3b01      	subs	r3, #1
 8003c28:	041b      	lsls	r3, r3, #16
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c30:	061b      	lsls	r3, r3, #24
 8003c32:	4313      	orrs	r3, r2
 8003c34:	4a1b      	ldr	r2, [pc, #108]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003c36:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003c3a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c3c:	4b19      	ldr	r3, [pc, #100]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a18      	ldr	r2, [pc, #96]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003c42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c48:	f7fe f87c 	bl	8001d44 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c50:	f7fe f878 	bl	8001d44 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e057      	b.n	8003d12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c62:	4b10      	ldr	r3, [pc, #64]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0f0      	beq.n	8003c50 <HAL_RCC_OscConfig+0x478>
 8003c6e:	e04f      	b.n	8003d10 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c70:	4b0c      	ldr	r3, [pc, #48]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a0b      	ldr	r2, [pc, #44]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003c76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7fe f862 	bl	8001d44 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c84:	f7fe f85e 	bl	8001d44 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e03d      	b.n	8003d12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c96:	4b03      	ldr	r3, [pc, #12]	@ (8003ca4 <HAL_RCC_OscConfig+0x4cc>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x4ac>
 8003ca2:	e035      	b.n	8003d10 <HAL_RCC_OscConfig+0x538>
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003cac:	4b1b      	ldr	r3, [pc, #108]	@ (8003d1c <HAL_RCC_OscConfig+0x544>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d028      	beq.n	8003d0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d121      	bne.n	8003d0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d11a      	bne.n	8003d0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003cdc:	4013      	ands	r3, r2
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ce2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d111      	bne.n	8003d0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf2:	085b      	lsrs	r3, r3, #1
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d107      	bne.n	8003d0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d06:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d001      	beq.n	8003d10 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e000      	b.n	8003d12 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40023800 	.word	0x40023800

08003d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e0d0      	b.n	8003eda <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d38:	4b6a      	ldr	r3, [pc, #424]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 030f 	and.w	r3, r3, #15
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d910      	bls.n	8003d68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d46:	4b67      	ldr	r3, [pc, #412]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f023 020f 	bic.w	r2, r3, #15
 8003d4e:	4965      	ldr	r1, [pc, #404]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d56:	4b63      	ldr	r3, [pc, #396]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d001      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0b8      	b.n	8003eda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d020      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d80:	4b59      	ldr	r3, [pc, #356]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	4a58      	ldr	r2, [pc, #352]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d86:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d98:	4b53      	ldr	r3, [pc, #332]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	4a52      	ldr	r2, [pc, #328]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003da2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da4:	4b50      	ldr	r3, [pc, #320]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	494d      	ldr	r1, [pc, #308]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d040      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d107      	bne.n	8003dda <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dca:	4b47      	ldr	r3, [pc, #284]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d115      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e07f      	b.n	8003eda <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d107      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de2:	4b41      	ldr	r3, [pc, #260]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d109      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e073      	b.n	8003eda <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e06b      	b.n	8003eda <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e02:	4b39      	ldr	r3, [pc, #228]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f023 0203 	bic.w	r2, r3, #3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	4936      	ldr	r1, [pc, #216]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e14:	f7fd ff96 	bl	8001d44 <HAL_GetTick>
 8003e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e1a:	e00a      	b.n	8003e32 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e1c:	f7fd ff92 	bl	8001d44 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e053      	b.n	8003eda <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e32:	4b2d      	ldr	r3, [pc, #180]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 020c 	and.w	r2, r3, #12
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d1eb      	bne.n	8003e1c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e44:	4b27      	ldr	r3, [pc, #156]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 030f 	and.w	r3, r3, #15
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d210      	bcs.n	8003e74 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e52:	4b24      	ldr	r3, [pc, #144]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f023 020f 	bic.w	r2, r3, #15
 8003e5a:	4922      	ldr	r1, [pc, #136]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e62:	4b20      	ldr	r3, [pc, #128]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e032      	b.n	8003eda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e80:	4b19      	ldr	r3, [pc, #100]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	4916      	ldr	r1, [pc, #88]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d009      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e9e:	4b12      	ldr	r3, [pc, #72]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	490e      	ldr	r1, [pc, #56]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eb2:	f000 f821 	bl	8003ef8 <HAL_RCC_GetSysClockFreq>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	091b      	lsrs	r3, r3, #4
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	490a      	ldr	r1, [pc, #40]	@ (8003eec <HAL_RCC_ClockConfig+0x1cc>)
 8003ec4:	5ccb      	ldrb	r3, [r1, r3]
 8003ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eca:	4a09      	ldr	r2, [pc, #36]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1d0>)
 8003ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ece:	4b09      	ldr	r3, [pc, #36]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1d4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fd fef2 	bl	8001cbc <HAL_InitTick>

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40023c00 	.word	0x40023c00
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	08008dc0 	.word	0x08008dc0
 8003ef0:	20000000 	.word	0x20000000
 8003ef4:	20000004 	.word	0x20000004

08003ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003efc:	b094      	sub	sp, #80	@ 0x50
 8003efe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f04:	2300      	movs	r3, #0
 8003f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f08:	2300      	movs	r3, #0
 8003f0a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f10:	4b79      	ldr	r3, [pc, #484]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f003 030c 	and.w	r3, r3, #12
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d00d      	beq.n	8003f38 <HAL_RCC_GetSysClockFreq+0x40>
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	f200 80e1 	bhi.w	80040e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <HAL_RCC_GetSysClockFreq+0x34>
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d003      	beq.n	8003f32 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f2a:	e0db      	b.n	80040e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f2c:	4b73      	ldr	r3, [pc, #460]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x204>)
 8003f2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f30:	e0db      	b.n	80040ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f32:	4b73      	ldr	r3, [pc, #460]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f36:	e0d8      	b.n	80040ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f38:	4b6f      	ldr	r3, [pc, #444]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f40:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003f42:	4b6d      	ldr	r3, [pc, #436]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d063      	beq.n	8004016 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f4e:	4b6a      	ldr	r3, [pc, #424]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	099b      	lsrs	r3, r3, #6
 8003f54:	2200      	movs	r2, #0
 8003f56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f58:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f60:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f62:	2300      	movs	r3, #0
 8003f64:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f6a:	4622      	mov	r2, r4
 8003f6c:	462b      	mov	r3, r5
 8003f6e:	f04f 0000 	mov.w	r0, #0
 8003f72:	f04f 0100 	mov.w	r1, #0
 8003f76:	0159      	lsls	r1, r3, #5
 8003f78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f7c:	0150      	lsls	r0, r2, #5
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	4621      	mov	r1, r4
 8003f84:	1a51      	subs	r1, r2, r1
 8003f86:	6139      	str	r1, [r7, #16]
 8003f88:	4629      	mov	r1, r5
 8003f8a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	f04f 0300 	mov.w	r3, #0
 8003f98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f9c:	4659      	mov	r1, fp
 8003f9e:	018b      	lsls	r3, r1, #6
 8003fa0:	4651      	mov	r1, sl
 8003fa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fa6:	4651      	mov	r1, sl
 8003fa8:	018a      	lsls	r2, r1, #6
 8003faa:	4651      	mov	r1, sl
 8003fac:	ebb2 0801 	subs.w	r8, r2, r1
 8003fb0:	4659      	mov	r1, fp
 8003fb2:	eb63 0901 	sbc.w	r9, r3, r1
 8003fb6:	f04f 0200 	mov.w	r2, #0
 8003fba:	f04f 0300 	mov.w	r3, #0
 8003fbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fca:	4690      	mov	r8, r2
 8003fcc:	4699      	mov	r9, r3
 8003fce:	4623      	mov	r3, r4
 8003fd0:	eb18 0303 	adds.w	r3, r8, r3
 8003fd4:	60bb      	str	r3, [r7, #8]
 8003fd6:	462b      	mov	r3, r5
 8003fd8:	eb49 0303 	adc.w	r3, r9, r3
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	f04f 0300 	mov.w	r3, #0
 8003fe6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fea:	4629      	mov	r1, r5
 8003fec:	024b      	lsls	r3, r1, #9
 8003fee:	4621      	mov	r1, r4
 8003ff0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	024a      	lsls	r2, r1, #9
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ffe:	2200      	movs	r2, #0
 8004000:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004002:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004004:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004008:	f7fc ff18 	bl	8000e3c <__aeabi_uldivmod>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	4613      	mov	r3, r2
 8004012:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004014:	e058      	b.n	80040c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004016:	4b38      	ldr	r3, [pc, #224]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	099b      	lsrs	r3, r3, #6
 800401c:	2200      	movs	r2, #0
 800401e:	4618      	mov	r0, r3
 8004020:	4611      	mov	r1, r2
 8004022:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004026:	623b      	str	r3, [r7, #32]
 8004028:	2300      	movs	r3, #0
 800402a:	627b      	str	r3, [r7, #36]	@ 0x24
 800402c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004030:	4642      	mov	r2, r8
 8004032:	464b      	mov	r3, r9
 8004034:	f04f 0000 	mov.w	r0, #0
 8004038:	f04f 0100 	mov.w	r1, #0
 800403c:	0159      	lsls	r1, r3, #5
 800403e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004042:	0150      	lsls	r0, r2, #5
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	4641      	mov	r1, r8
 800404a:	ebb2 0a01 	subs.w	sl, r2, r1
 800404e:	4649      	mov	r1, r9
 8004050:	eb63 0b01 	sbc.w	fp, r3, r1
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	f04f 0300 	mov.w	r3, #0
 800405c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004060:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004064:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004068:	ebb2 040a 	subs.w	r4, r2, sl
 800406c:	eb63 050b 	sbc.w	r5, r3, fp
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	f04f 0300 	mov.w	r3, #0
 8004078:	00eb      	lsls	r3, r5, #3
 800407a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800407e:	00e2      	lsls	r2, r4, #3
 8004080:	4614      	mov	r4, r2
 8004082:	461d      	mov	r5, r3
 8004084:	4643      	mov	r3, r8
 8004086:	18e3      	adds	r3, r4, r3
 8004088:	603b      	str	r3, [r7, #0]
 800408a:	464b      	mov	r3, r9
 800408c:	eb45 0303 	adc.w	r3, r5, r3
 8004090:	607b      	str	r3, [r7, #4]
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	f04f 0300 	mov.w	r3, #0
 800409a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800409e:	4629      	mov	r1, r5
 80040a0:	028b      	lsls	r3, r1, #10
 80040a2:	4621      	mov	r1, r4
 80040a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040a8:	4621      	mov	r1, r4
 80040aa:	028a      	lsls	r2, r1, #10
 80040ac:	4610      	mov	r0, r2
 80040ae:	4619      	mov	r1, r3
 80040b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040b2:	2200      	movs	r2, #0
 80040b4:	61bb      	str	r3, [r7, #24]
 80040b6:	61fa      	str	r2, [r7, #28]
 80040b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040bc:	f7fc febe 	bl	8000e3c <__aeabi_uldivmod>
 80040c0:	4602      	mov	r2, r0
 80040c2:	460b      	mov	r3, r1
 80040c4:	4613      	mov	r3, r2
 80040c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80040c8:	4b0b      	ldr	r3, [pc, #44]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	0c1b      	lsrs	r3, r3, #16
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	3301      	adds	r3, #1
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80040d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040e2:	e002      	b.n	80040ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040e4:	4b05      	ldr	r3, [pc, #20]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x204>)
 80040e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3750      	adds	r7, #80	@ 0x50
 80040f0:	46bd      	mov	sp, r7
 80040f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040f6:	bf00      	nop
 80040f8:	40023800 	.word	0x40023800
 80040fc:	00f42400 	.word	0x00f42400
 8004100:	007a1200 	.word	0x007a1200

08004104 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004108:	4b03      	ldr	r3, [pc, #12]	@ (8004118 <HAL_RCC_GetHCLKFreq+0x14>)
 800410a:	681b      	ldr	r3, [r3, #0]
}
 800410c:	4618      	mov	r0, r3
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	20000000 	.word	0x20000000

0800411c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004120:	f7ff fff0 	bl	8004104 <HAL_RCC_GetHCLKFreq>
 8004124:	4602      	mov	r2, r0
 8004126:	4b05      	ldr	r3, [pc, #20]	@ (800413c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	0a9b      	lsrs	r3, r3, #10
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	4903      	ldr	r1, [pc, #12]	@ (8004140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004132:	5ccb      	ldrb	r3, [r1, r3]
 8004134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004138:	4618      	mov	r0, r3
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40023800 	.word	0x40023800
 8004140:	08008dd0 	.word	0x08008dd0

08004144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004148:	f7ff ffdc 	bl	8004104 <HAL_RCC_GetHCLKFreq>
 800414c:	4602      	mov	r2, r0
 800414e:	4b05      	ldr	r3, [pc, #20]	@ (8004164 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	0b5b      	lsrs	r3, r3, #13
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	4903      	ldr	r1, [pc, #12]	@ (8004168 <HAL_RCC_GetPCLK2Freq+0x24>)
 800415a:	5ccb      	ldrb	r3, [r1, r3]
 800415c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004160:	4618      	mov	r0, r3
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40023800 	.word	0x40023800
 8004168:	08008dd0 	.word	0x08008dd0

0800416c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004178:	2300      	movs	r3, #0
 800417a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800417c:	2300      	movs	r3, #0
 800417e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004180:	2300      	movs	r3, #0
 8004182:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004184:	2300      	movs	r3, #0
 8004186:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b00      	cmp	r3, #0
 8004192:	d012      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004194:	4b69      	ldr	r3, [pc, #420]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	4a68      	ldr	r2, [pc, #416]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800419a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800419e:	6093      	str	r3, [r2, #8]
 80041a0:	4b66      	ldr	r3, [pc, #408]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041a8:	4964      	ldr	r1, [pc, #400]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80041b6:	2301      	movs	r3, #1
 80041b8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d017      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041c6:	4b5d      	ldr	r3, [pc, #372]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041cc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d4:	4959      	ldr	r1, [pc, #356]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041e4:	d101      	bne.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80041e6:	2301      	movs	r3, #1
 80041e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80041f2:	2301      	movs	r3, #1
 80041f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d017      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004202:	4b4e      	ldr	r3, [pc, #312]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004204:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004208:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004210:	494a      	ldr	r1, [pc, #296]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004212:	4313      	orrs	r3, r2
 8004214:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004220:	d101      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004222:	2301      	movs	r3, #1
 8004224:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800422e:	2301      	movs	r3, #1
 8004230:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800423e:	2301      	movs	r3, #1
 8004240:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0320 	and.w	r3, r3, #32
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 808b 	beq.w	8004366 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004250:	4b3a      	ldr	r3, [pc, #232]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004254:	4a39      	ldr	r2, [pc, #228]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004256:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800425a:	6413      	str	r3, [r2, #64]	@ 0x40
 800425c:	4b37      	ldr	r3, [pc, #220]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800425e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004264:	60bb      	str	r3, [r7, #8]
 8004266:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004268:	4b35      	ldr	r3, [pc, #212]	@ (8004340 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a34      	ldr	r2, [pc, #208]	@ (8004340 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800426e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004272:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004274:	f7fd fd66 	bl	8001d44 <HAL_GetTick>
 8004278:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800427a:	e008      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800427c:	f7fd fd62 	bl	8001d44 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b64      	cmp	r3, #100	@ 0x64
 8004288:	d901      	bls.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e357      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800428e:	4b2c      	ldr	r3, [pc, #176]	@ (8004340 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0f0      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800429a:	4b28      	ldr	r3, [pc, #160]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800429e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042a2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d035      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d02e      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042b8:	4b20      	ldr	r3, [pc, #128]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042c0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042c2:	4b1e      	ldr	r3, [pc, #120]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c6:	4a1d      	ldr	r2, [pc, #116]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042cc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042ce:	4b1b      	ldr	r3, [pc, #108]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d2:	4a1a      	ldr	r2, [pc, #104]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042d8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80042da:	4a18      	ldr	r2, [pc, #96]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042e0:	4b16      	ldr	r3, [pc, #88]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d114      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ec:	f7fd fd2a 	bl	8001d44 <HAL_GetTick>
 80042f0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f2:	e00a      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042f4:	f7fd fd26 	bl	8001d44 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004302:	4293      	cmp	r3, r2
 8004304:	d901      	bls.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e319      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800430a:	4b0c      	ldr	r3, [pc, #48]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800430c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0ee      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800431e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004322:	d111      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004324:	4b05      	ldr	r3, [pc, #20]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004330:	4b04      	ldr	r3, [pc, #16]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004332:	400b      	ands	r3, r1
 8004334:	4901      	ldr	r1, [pc, #4]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004336:	4313      	orrs	r3, r2
 8004338:	608b      	str	r3, [r1, #8]
 800433a:	e00b      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800433c:	40023800 	.word	0x40023800
 8004340:	40007000 	.word	0x40007000
 8004344:	0ffffcff 	.word	0x0ffffcff
 8004348:	4baa      	ldr	r3, [pc, #680]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	4aa9      	ldr	r2, [pc, #676]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800434e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004352:	6093      	str	r3, [r2, #8]
 8004354:	4ba7      	ldr	r3, [pc, #668]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004356:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004360:	49a4      	ldr	r1, [pc, #656]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004362:	4313      	orrs	r3, r2
 8004364:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0310 	and.w	r3, r3, #16
 800436e:	2b00      	cmp	r3, #0
 8004370:	d010      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004372:	4ba0      	ldr	r3, [pc, #640]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004374:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004378:	4a9e      	ldr	r2, [pc, #632]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800437a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800437e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004382:	4b9c      	ldr	r3, [pc, #624]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004384:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800438c:	4999      	ldr	r1, [pc, #612]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800438e:	4313      	orrs	r3, r2
 8004390:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00a      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043a0:	4b94      	ldr	r3, [pc, #592]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043a6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043ae:	4991      	ldr	r1, [pc, #580]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00a      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043c2:	4b8c      	ldr	r3, [pc, #560]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043d0:	4988      	ldr	r1, [pc, #544]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00a      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043e4:	4b83      	ldr	r3, [pc, #524]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043f2:	4980      	ldr	r1, [pc, #512]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004406:	4b7b      	ldr	r3, [pc, #492]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800440c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004414:	4977      	ldr	r1, [pc, #476]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004416:	4313      	orrs	r3, r2
 8004418:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00a      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004428:	4b72      	ldr	r3, [pc, #456]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800442a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800442e:	f023 0203 	bic.w	r2, r3, #3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004436:	496f      	ldr	r1, [pc, #444]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004438:	4313      	orrs	r3, r2
 800443a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800444a:	4b6a      	ldr	r3, [pc, #424]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800444c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004450:	f023 020c 	bic.w	r2, r3, #12
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004458:	4966      	ldr	r1, [pc, #408]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800445a:	4313      	orrs	r3, r2
 800445c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00a      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800446c:	4b61      	ldr	r3, [pc, #388]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004472:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800447a:	495e      	ldr	r1, [pc, #376]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800447c:	4313      	orrs	r3, r2
 800447e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00a      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800448e:	4b59      	ldr	r3, [pc, #356]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004494:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800449c:	4955      	ldr	r1, [pc, #340]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00a      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044b0:	4b50      	ldr	r3, [pc, #320]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044b6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044be:	494d      	ldr	r1, [pc, #308]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00a      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80044d2:	4b48      	ldr	r3, [pc, #288]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e0:	4944      	ldr	r1, [pc, #272]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00a      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80044f4:	4b3f      	ldr	r3, [pc, #252]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044fa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004502:	493c      	ldr	r1, [pc, #240]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00a      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004516:	4b37      	ldr	r3, [pc, #220]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800451c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004524:	4933      	ldr	r1, [pc, #204]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00a      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004538:	4b2e      	ldr	r3, [pc, #184]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800453a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800453e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004546:	492b      	ldr	r1, [pc, #172]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004548:	4313      	orrs	r3, r2
 800454a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d011      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800455a:	4b26      	ldr	r3, [pc, #152]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800455c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004560:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004568:	4922      	ldr	r1, [pc, #136]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800456a:	4313      	orrs	r3, r2
 800456c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004574:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004578:	d101      	bne.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800457a:	2301      	movs	r3, #1
 800457c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800458a:	2301      	movs	r3, #1
 800458c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800459a:	4b16      	ldr	r3, [pc, #88]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800459c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045a8:	4912      	ldr	r1, [pc, #72]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00b      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045bc:	4b0d      	ldr	r3, [pc, #52]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045cc:	4909      	ldr	r1, [pc, #36]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d006      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 80d9 	beq.w	800479a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045e8:	4b02      	ldr	r3, [pc, #8]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a01      	ldr	r2, [pc, #4]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80045f2:	e001      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80045f4:	40023800 	.word	0x40023800
 80045f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045fa:	f7fd fba3 	bl	8001d44 <HAL_GetTick>
 80045fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004600:	e008      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004602:	f7fd fb9f 	bl	8001d44 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b64      	cmp	r3, #100	@ 0x64
 800460e:	d901      	bls.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e194      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004614:	4b6c      	ldr	r3, [pc, #432]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1f0      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b00      	cmp	r3, #0
 800462a:	d021      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004630:	2b00      	cmp	r3, #0
 8004632:	d11d      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004634:	4b64      	ldr	r3, [pc, #400]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004636:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800463a:	0c1b      	lsrs	r3, r3, #16
 800463c:	f003 0303 	and.w	r3, r3, #3
 8004640:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004642:	4b61      	ldr	r3, [pc, #388]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004644:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004648:	0e1b      	lsrs	r3, r3, #24
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	019a      	lsls	r2, r3, #6
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	041b      	lsls	r3, r3, #16
 800465a:	431a      	orrs	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	061b      	lsls	r3, r3, #24
 8004660:	431a      	orrs	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	071b      	lsls	r3, r3, #28
 8004668:	4957      	ldr	r1, [pc, #348]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d004      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004680:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004684:	d00a      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800468e:	2b00      	cmp	r3, #0
 8004690:	d02e      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004696:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800469a:	d129      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800469c:	4b4a      	ldr	r3, [pc, #296]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800469e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046a2:	0c1b      	lsrs	r3, r3, #16
 80046a4:	f003 0303 	and.w	r3, r3, #3
 80046a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046aa:	4b47      	ldr	r3, [pc, #284]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046b0:	0f1b      	lsrs	r3, r3, #28
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	019a      	lsls	r2, r3, #6
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	041b      	lsls	r3, r3, #16
 80046c2:	431a      	orrs	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	061b      	lsls	r3, r3, #24
 80046ca:	431a      	orrs	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	071b      	lsls	r3, r3, #28
 80046d0:	493d      	ldr	r1, [pc, #244]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80046d8:	4b3b      	ldr	r3, [pc, #236]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046de:	f023 021f 	bic.w	r2, r3, #31
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e6:	3b01      	subs	r3, #1
 80046e8:	4937      	ldr	r1, [pc, #220]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d01d      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80046fc:	4b32      	ldr	r3, [pc, #200]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004702:	0e1b      	lsrs	r3, r3, #24
 8004704:	f003 030f 	and.w	r3, r3, #15
 8004708:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800470a:	4b2f      	ldr	r3, [pc, #188]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800470c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004710:	0f1b      	lsrs	r3, r3, #28
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	019a      	lsls	r2, r3, #6
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	041b      	lsls	r3, r3, #16
 8004724:	431a      	orrs	r2, r3
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	061b      	lsls	r3, r3, #24
 800472a:	431a      	orrs	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	071b      	lsls	r3, r3, #28
 8004730:	4925      	ldr	r1, [pc, #148]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004732:	4313      	orrs	r3, r2
 8004734:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d011      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	019a      	lsls	r2, r3, #6
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	041b      	lsls	r3, r3, #16
 8004750:	431a      	orrs	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	061b      	lsls	r3, r3, #24
 8004758:	431a      	orrs	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	071b      	lsls	r3, r3, #28
 8004760:	4919      	ldr	r1, [pc, #100]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004768:	4b17      	ldr	r3, [pc, #92]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a16      	ldr	r2, [pc, #88]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800476e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004772:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004774:	f7fd fae6 	bl	8001d44 <HAL_GetTick>
 8004778:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800477a:	e008      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800477c:	f7fd fae2 	bl	8001d44 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b64      	cmp	r3, #100	@ 0x64
 8004788:	d901      	bls.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e0d7      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800478e:	4b0e      	ldr	r3, [pc, #56]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0f0      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	2b01      	cmp	r3, #1
 800479e:	f040 80cd 	bne.w	800493c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80047a2:	4b09      	ldr	r3, [pc, #36]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a08      	ldr	r2, [pc, #32]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ae:	f7fd fac9 	bl	8001d44 <HAL_GetTick>
 80047b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047b4:	e00a      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80047b6:	f7fd fac5 	bl	8001d44 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b64      	cmp	r3, #100	@ 0x64
 80047c2:	d903      	bls.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e0ba      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80047c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047cc:	4b5e      	ldr	r3, [pc, #376]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047d8:	d0ed      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x682>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d009      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d02e      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d12a      	bne.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004802:	4b51      	ldr	r3, [pc, #324]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004808:	0c1b      	lsrs	r3, r3, #16
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004810:	4b4d      	ldr	r3, [pc, #308]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004816:	0f1b      	lsrs	r3, r3, #28
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	019a      	lsls	r2, r3, #6
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	041b      	lsls	r3, r3, #16
 8004828:	431a      	orrs	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	061b      	lsls	r3, r3, #24
 8004830:	431a      	orrs	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	071b      	lsls	r3, r3, #28
 8004836:	4944      	ldr	r1, [pc, #272]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800483e:	4b42      	ldr	r3, [pc, #264]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004840:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004844:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484c:	3b01      	subs	r3, #1
 800484e:	021b      	lsls	r3, r3, #8
 8004850:	493d      	ldr	r1, [pc, #244]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004852:	4313      	orrs	r3, r2
 8004854:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d022      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004868:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800486c:	d11d      	bne.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800486e:	4b36      	ldr	r3, [pc, #216]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004874:	0e1b      	lsrs	r3, r3, #24
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800487c:	4b32      	ldr	r3, [pc, #200]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800487e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004882:	0f1b      	lsrs	r3, r3, #28
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	019a      	lsls	r2, r3, #6
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	041b      	lsls	r3, r3, #16
 8004896:	431a      	orrs	r2, r3
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	061b      	lsls	r3, r3, #24
 800489c:	431a      	orrs	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	071b      	lsls	r3, r3, #28
 80048a2:	4929      	ldr	r1, [pc, #164]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0308 	and.w	r3, r3, #8
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d028      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048b6:	4b24      	ldr	r3, [pc, #144]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048bc:	0e1b      	lsrs	r3, r3, #24
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80048c4:	4b20      	ldr	r3, [pc, #128]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ca:	0c1b      	lsrs	r3, r3, #16
 80048cc:	f003 0303 	and.w	r3, r3, #3
 80048d0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	019a      	lsls	r2, r3, #6
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	041b      	lsls	r3, r3, #16
 80048dc:	431a      	orrs	r2, r3
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	061b      	lsls	r3, r3, #24
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	071b      	lsls	r3, r3, #28
 80048ea:	4917      	ldr	r1, [pc, #92]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80048f2:	4b15      	ldr	r3, [pc, #84]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004900:	4911      	ldr	r1, [pc, #68]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004902:	4313      	orrs	r3, r2
 8004904:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004908:	4b0f      	ldr	r3, [pc, #60]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a0e      	ldr	r2, [pc, #56]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800490e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004912:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004914:	f7fd fa16 	bl	8001d44 <HAL_GetTick>
 8004918:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800491a:	e008      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800491c:	f7fd fa12 	bl	8001d44 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b64      	cmp	r3, #100	@ 0x64
 8004928:	d901      	bls.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e007      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800492e:	4b06      	ldr	r3, [pc, #24]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004936:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800493a:	d1ef      	bne.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3720      	adds	r7, #32
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	40023800 	.word	0x40023800

0800494c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e09d      	b.n	8004a9a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004962:	2b00      	cmp	r3, #0
 8004964:	d108      	bne.n	8004978 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800496e:	d009      	beq.n	8004984 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	61da      	str	r2, [r3, #28]
 8004976:	e005      	b.n	8004984 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d106      	bne.n	80049a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7fc ffd8 	bl	8001954 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80049c4:	d902      	bls.n	80049cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]
 80049ca:	e002      	b.n	80049d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80049cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80049d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80049da:	d007      	beq.n	80049ec <HAL_SPI_Init+0xa0>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80049e4:	d002      	beq.n	80049ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80049fc:	431a      	orrs	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	431a      	orrs	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	69db      	ldr	r3, [r3, #28]
 8004a20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a24:	431a      	orrs	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a2e:	ea42 0103 	orr.w	r1, r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a36:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	0c1b      	lsrs	r3, r3, #16
 8004a48:	f003 0204 	and.w	r2, r3, #4
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a50:	f003 0310 	and.w	r3, r3, #16
 8004a54:	431a      	orrs	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004a68:	ea42 0103 	orr.w	r1, r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	69da      	ldr	r2, [r3, #28]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b088      	sub	sp, #32
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	60f8      	str	r0, [r7, #12]
 8004aaa:	60b9      	str	r1, [r7, #8]
 8004aac:	603b      	str	r3, [r7, #0]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d101      	bne.n	8004ac4 <HAL_SPI_Transmit+0x22>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	e158      	b.n	8004d76 <HAL_SPI_Transmit+0x2d4>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004acc:	f7fd f93a 	bl	8001d44 <HAL_GetTick>
 8004ad0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004ad2:	88fb      	ldrh	r3, [r7, #6]
 8004ad4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d002      	beq.n	8004ae8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ae6:	e13d      	b.n	8004d64 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <HAL_SPI_Transmit+0x52>
 8004aee:	88fb      	ldrh	r3, [r7, #6]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d102      	bne.n	8004afa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004af8:	e134      	b.n	8004d64 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2203      	movs	r2, #3
 8004afe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	88fa      	ldrh	r2, [r7, #6]
 8004b12:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	88fa      	ldrh	r2, [r7, #6]
 8004b18:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b44:	d10f      	bne.n	8004b66 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b70:	2b40      	cmp	r3, #64	@ 0x40
 8004b72:	d007      	beq.n	8004b84 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004b8c:	d94b      	bls.n	8004c26 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <HAL_SPI_Transmit+0xfa>
 8004b96:	8afb      	ldrh	r3, [r7, #22]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d13e      	bne.n	8004c1a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba0:	881a      	ldrh	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bac:	1c9a      	adds	r2, r3, #2
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004bc0:	e02b      	b.n	8004c1a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d112      	bne.n	8004bf6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd4:	881a      	ldrh	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be0:	1c9a      	adds	r2, r3, #2
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004bf4:	e011      	b.n	8004c1a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bf6:	f7fd f8a5 	bl	8001d44 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d803      	bhi.n	8004c0e <HAL_SPI_Transmit+0x16c>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0c:	d102      	bne.n	8004c14 <HAL_SPI_Transmit+0x172>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d102      	bne.n	8004c1a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c18:	e0a4      	b.n	8004d64 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1ce      	bne.n	8004bc2 <HAL_SPI_Transmit+0x120>
 8004c24:	e07c      	b.n	8004d20 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <HAL_SPI_Transmit+0x192>
 8004c2e:	8afb      	ldrh	r3, [r7, #22]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d170      	bne.n	8004d16 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d912      	bls.n	8004c64 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c42:	881a      	ldrh	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c4e:	1c9a      	adds	r2, r3, #2
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	3b02      	subs	r3, #2
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c62:	e058      	b.n	8004d16 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	330c      	adds	r3, #12
 8004c6e:	7812      	ldrb	r2, [r2, #0]
 8004c70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	3b01      	subs	r3, #1
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004c8a:	e044      	b.n	8004d16 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d12b      	bne.n	8004cf2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d912      	bls.n	8004cca <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca8:	881a      	ldrh	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb4:	1c9a      	adds	r2, r3, #2
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	3b02      	subs	r3, #2
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004cc8:	e025      	b.n	8004d16 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	330c      	adds	r3, #12
 8004cd4:	7812      	ldrb	r2, [r2, #0]
 8004cd6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004cf0:	e011      	b.n	8004d16 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cf2:	f7fd f827 	bl	8001d44 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d803      	bhi.n	8004d0a <HAL_SPI_Transmit+0x268>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d08:	d102      	bne.n	8004d10 <HAL_SPI_Transmit+0x26e>
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d102      	bne.n	8004d16 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d14:	e026      	b.n	8004d64 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1b5      	bne.n	8004c8c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	6839      	ldr	r1, [r7, #0]
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 fd07 	bl	8005738 <SPI_EndRxTxTransaction>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d002      	beq.n	8004d36 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2220      	movs	r2, #32
 8004d34:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10a      	bne.n	8004d54 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d3e:	2300      	movs	r3, #0
 8004d40:	613b      	str	r3, [r7, #16]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	613b      	str	r3, [r7, #16]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	613b      	str	r3, [r7, #16]
 8004d52:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d002      	beq.n	8004d62 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	77fb      	strb	r3, [r7, #31]
 8004d60:	e000      	b.n	8004d64 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004d62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004d74:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3720      	adds	r7, #32
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b088      	sub	sp, #32
 8004d82:	af02      	add	r7, sp, #8
 8004d84:	60f8      	str	r0, [r7, #12]
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	603b      	str	r3, [r7, #0]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d9a:	d112      	bne.n	8004dc2 <HAL_SPI_Receive+0x44>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10e      	bne.n	8004dc2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2204      	movs	r2, #4
 8004da8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004dac:	88fa      	ldrh	r2, [r7, #6]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	4613      	mov	r3, r2
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	68b9      	ldr	r1, [r7, #8]
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 f910 	bl	8004fde <HAL_SPI_TransmitReceive>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	e109      	b.n	8004fd6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d101      	bne.n	8004dd0 <HAL_SPI_Receive+0x52>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	e102      	b.n	8004fd6 <HAL_SPI_Receive+0x258>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dd8:	f7fc ffb4 	bl	8001d44 <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d002      	beq.n	8004df0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004dea:	2302      	movs	r3, #2
 8004dec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004dee:	e0e9      	b.n	8004fc4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <HAL_SPI_Receive+0x7e>
 8004df6:	88fb      	ldrh	r3, [r7, #6]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d102      	bne.n	8004e02 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e00:	e0e0      	b.n	8004fc4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2204      	movs	r2, #4
 8004e06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	88fa      	ldrh	r2, [r7, #6]
 8004e1a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	88fa      	ldrh	r2, [r7, #6]
 8004e22:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e4c:	d908      	bls.n	8004e60 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004e5c:	605a      	str	r2, [r3, #4]
 8004e5e:	e007      	b.n	8004e70 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004e6e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e78:	d10f      	bne.n	8004e9a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004e98:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ea4:	2b40      	cmp	r3, #64	@ 0x40
 8004ea6:	d007      	beq.n	8004eb8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004eb6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ec0:	d867      	bhi.n	8004f92 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004ec2:	e030      	b.n	8004f26 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d117      	bne.n	8004f02 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f103 020c 	add.w	r2, r3, #12
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ede:	7812      	ldrb	r2, [r2, #0]
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004f00:	e011      	b.n	8004f26 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f02:	f7fc ff1f 	bl	8001d44 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d803      	bhi.n	8004f1a <HAL_SPI_Receive+0x19c>
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f18:	d102      	bne.n	8004f20 <HAL_SPI_Receive+0x1a2>
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d102      	bne.n	8004f26 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004f24:	e04e      	b.n	8004fc4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1c8      	bne.n	8004ec4 <HAL_SPI_Receive+0x146>
 8004f32:	e034      	b.n	8004f9e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d115      	bne.n	8004f6e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68da      	ldr	r2, [r3, #12]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4c:	b292      	uxth	r2, r2
 8004f4e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f54:	1c9a      	adds	r2, r3, #2
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004f6c:	e011      	b.n	8004f92 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f6e:	f7fc fee9 	bl	8001d44 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d803      	bhi.n	8004f86 <HAL_SPI_Receive+0x208>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f84:	d102      	bne.n	8004f8c <HAL_SPI_Receive+0x20e>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d102      	bne.n	8004f92 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004f90:	e018      	b.n	8004fc4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1ca      	bne.n	8004f34 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	6839      	ldr	r1, [r7, #0]
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 fb4c 	bl	8005640 <SPI_EndRxTransaction>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d002      	beq.n	8004fb4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d002      	beq.n	8004fc2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	75fb      	strb	r3, [r7, #23]
 8004fc0:	e000      	b.n	8004fc4 <HAL_SPI_Receive+0x246>
  }

error :
 8004fc2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b08a      	sub	sp, #40	@ 0x28
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	60f8      	str	r0, [r7, #12]
 8004fe6:	60b9      	str	r1, [r7, #8]
 8004fe8:	607a      	str	r2, [r7, #4]
 8004fea:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004fec:	2301      	movs	r3, #1
 8004fee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d101      	bne.n	8005004 <HAL_SPI_TransmitReceive+0x26>
 8005000:	2302      	movs	r3, #2
 8005002:	e1fb      	b.n	80053fc <HAL_SPI_TransmitReceive+0x41e>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800500c:	f7fc fe9a 	bl	8001d44 <HAL_GetTick>
 8005010:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005018:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005020:	887b      	ldrh	r3, [r7, #2]
 8005022:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005024:	887b      	ldrh	r3, [r7, #2]
 8005026:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005028:	7efb      	ldrb	r3, [r7, #27]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d00e      	beq.n	800504c <HAL_SPI_TransmitReceive+0x6e>
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005034:	d106      	bne.n	8005044 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d102      	bne.n	8005044 <HAL_SPI_TransmitReceive+0x66>
 800503e:	7efb      	ldrb	r3, [r7, #27]
 8005040:	2b04      	cmp	r3, #4
 8005042:	d003      	beq.n	800504c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005044:	2302      	movs	r3, #2
 8005046:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800504a:	e1cd      	b.n	80053e8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d005      	beq.n	800505e <HAL_SPI_TransmitReceive+0x80>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d002      	beq.n	800505e <HAL_SPI_TransmitReceive+0x80>
 8005058:	887b      	ldrh	r3, [r7, #2]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d103      	bne.n	8005066 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005064:	e1c0      	b.n	80053e8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b04      	cmp	r3, #4
 8005070:	d003      	beq.n	800507a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2205      	movs	r2, #5
 8005076:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	887a      	ldrh	r2, [r7, #2]
 800508a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	887a      	ldrh	r2, [r7, #2]
 8005092:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	887a      	ldrh	r2, [r7, #2]
 80050a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	887a      	ldrh	r2, [r7, #2]
 80050a6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80050bc:	d802      	bhi.n	80050c4 <HAL_SPI_TransmitReceive+0xe6>
 80050be:	8a3b      	ldrh	r3, [r7, #16]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d908      	bls.n	80050d6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80050d2:	605a      	str	r2, [r3, #4]
 80050d4:	e007      	b.n	80050e6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80050e4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f0:	2b40      	cmp	r3, #64	@ 0x40
 80050f2:	d007      	beq.n	8005104 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005102:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800510c:	d97c      	bls.n	8005208 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d002      	beq.n	800511c <HAL_SPI_TransmitReceive+0x13e>
 8005116:	8a7b      	ldrh	r3, [r7, #18]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d169      	bne.n	80051f0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005120:	881a      	ldrh	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512c:	1c9a      	adds	r2, r3, #2
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005136:	b29b      	uxth	r3, r3
 8005138:	3b01      	subs	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005140:	e056      	b.n	80051f0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b02      	cmp	r3, #2
 800514e:	d11b      	bne.n	8005188 <HAL_SPI_TransmitReceive+0x1aa>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005154:	b29b      	uxth	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d016      	beq.n	8005188 <HAL_SPI_TransmitReceive+0x1aa>
 800515a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515c:	2b01      	cmp	r3, #1
 800515e:	d113      	bne.n	8005188 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005164:	881a      	ldrh	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005170:	1c9a      	adds	r2, r3, #2
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800517a:	b29b      	uxth	r3, r3
 800517c:	3b01      	subs	r3, #1
 800517e:	b29a      	uxth	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b01      	cmp	r3, #1
 8005194:	d11c      	bne.n	80051d0 <HAL_SPI_TransmitReceive+0x1f2>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800519c:	b29b      	uxth	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d016      	beq.n	80051d0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68da      	ldr	r2, [r3, #12]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ac:	b292      	uxth	r2, r2
 80051ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b4:	1c9a      	adds	r2, r3, #2
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051cc:	2301      	movs	r3, #1
 80051ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80051d0:	f7fc fdb8 	bl	8001d44 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051dc:	429a      	cmp	r2, r3
 80051de:	d807      	bhi.n	80051f0 <HAL_SPI_TransmitReceive+0x212>
 80051e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e6:	d003      	beq.n	80051f0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 80051ee:	e0fb      	b.n	80053e8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1a3      	bne.n	8005142 <HAL_SPI_TransmitReceive+0x164>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d19d      	bne.n	8005142 <HAL_SPI_TransmitReceive+0x164>
 8005206:	e0df      	b.n	80053c8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d003      	beq.n	8005218 <HAL_SPI_TransmitReceive+0x23a>
 8005210:	8a7b      	ldrh	r3, [r7, #18]
 8005212:	2b01      	cmp	r3, #1
 8005214:	f040 80cb 	bne.w	80053ae <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800521c:	b29b      	uxth	r3, r3
 800521e:	2b01      	cmp	r3, #1
 8005220:	d912      	bls.n	8005248 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005226:	881a      	ldrh	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005232:	1c9a      	adds	r2, r3, #2
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800523c:	b29b      	uxth	r3, r3
 800523e:	3b02      	subs	r3, #2
 8005240:	b29a      	uxth	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005246:	e0b2      	b.n	80053ae <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	330c      	adds	r3, #12
 8005252:	7812      	ldrb	r2, [r2, #0]
 8005254:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005264:	b29b      	uxth	r3, r3
 8005266:	3b01      	subs	r3, #1
 8005268:	b29a      	uxth	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800526e:	e09e      	b.n	80053ae <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b02      	cmp	r3, #2
 800527c:	d134      	bne.n	80052e8 <HAL_SPI_TransmitReceive+0x30a>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005282:	b29b      	uxth	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	d02f      	beq.n	80052e8 <HAL_SPI_TransmitReceive+0x30a>
 8005288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528a:	2b01      	cmp	r3, #1
 800528c:	d12c      	bne.n	80052e8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005292:	b29b      	uxth	r3, r3
 8005294:	2b01      	cmp	r3, #1
 8005296:	d912      	bls.n	80052be <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800529c:	881a      	ldrh	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a8:	1c9a      	adds	r2, r3, #2
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	3b02      	subs	r3, #2
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80052bc:	e012      	b.n	80052e4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	330c      	adds	r3, #12
 80052c8:	7812      	ldrb	r2, [r2, #0]
 80052ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052da:	b29b      	uxth	r3, r3
 80052dc:	3b01      	subs	r3, #1
 80052de:	b29a      	uxth	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052e4:	2300      	movs	r3, #0
 80052e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d148      	bne.n	8005388 <HAL_SPI_TransmitReceive+0x3aa>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d042      	beq.n	8005388 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005308:	b29b      	uxth	r3, r3
 800530a:	2b01      	cmp	r3, #1
 800530c:	d923      	bls.n	8005356 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68da      	ldr	r2, [r3, #12]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005318:	b292      	uxth	r2, r2
 800531a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005320:	1c9a      	adds	r2, r3, #2
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800532c:	b29b      	uxth	r3, r3
 800532e:	3b02      	subs	r3, #2
 8005330:	b29a      	uxth	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800533e:	b29b      	uxth	r3, r3
 8005340:	2b01      	cmp	r3, #1
 8005342:	d81f      	bhi.n	8005384 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005352:	605a      	str	r2, [r3, #4]
 8005354:	e016      	b.n	8005384 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f103 020c 	add.w	r2, r3, #12
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005362:	7812      	ldrb	r2, [r2, #0]
 8005364:	b2d2      	uxtb	r2, r2
 8005366:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005378:	b29b      	uxth	r3, r3
 800537a:	3b01      	subs	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005384:	2301      	movs	r3, #1
 8005386:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005388:	f7fc fcdc 	bl	8001d44 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005394:	429a      	cmp	r2, r3
 8005396:	d803      	bhi.n	80053a0 <HAL_SPI_TransmitReceive+0x3c2>
 8005398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800539a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539e:	d102      	bne.n	80053a6 <HAL_SPI_TransmitReceive+0x3c8>
 80053a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d103      	bne.n	80053ae <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 80053ac:	e01c      	b.n	80053e8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f47f af5b 	bne.w	8005270 <HAL_SPI_TransmitReceive+0x292>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f47f af54 	bne.w	8005270 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053c8:	69fa      	ldr	r2, [r7, #28]
 80053ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 f9b3 	bl	8005738 <SPI_EndRxTxTransaction>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d006      	beq.n	80053e6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2220      	movs	r2, #32
 80053e2:	661a      	str	r2, [r3, #96]	@ 0x60
 80053e4:	e000      	b.n	80053e8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80053e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80053f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3728      	adds	r7, #40	@ 0x28
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b088      	sub	sp, #32
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	603b      	str	r3, [r7, #0]
 8005410:	4613      	mov	r3, r2
 8005412:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005414:	f7fc fc96 	bl	8001d44 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541c:	1a9b      	subs	r3, r3, r2
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	4413      	add	r3, r2
 8005422:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005424:	f7fc fc8e 	bl	8001d44 <HAL_GetTick>
 8005428:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800542a:	4b39      	ldr	r3, [pc, #228]	@ (8005510 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	015b      	lsls	r3, r3, #5
 8005430:	0d1b      	lsrs	r3, r3, #20
 8005432:	69fa      	ldr	r2, [r7, #28]
 8005434:	fb02 f303 	mul.w	r3, r2, r3
 8005438:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800543a:	e054      	b.n	80054e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005442:	d050      	beq.n	80054e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005444:	f7fc fc7e 	bl	8001d44 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	69fa      	ldr	r2, [r7, #28]
 8005450:	429a      	cmp	r2, r3
 8005452:	d902      	bls.n	800545a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d13d      	bne.n	80054d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005468:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005472:	d111      	bne.n	8005498 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800547c:	d004      	beq.n	8005488 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005486:	d107      	bne.n	8005498 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005496:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800549c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054a0:	d10f      	bne.n	80054c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e017      	b.n	8005506 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d101      	bne.n	80054e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	3b01      	subs	r3, #1
 80054e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4013      	ands	r3, r2
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	bf0c      	ite	eq
 80054f6:	2301      	moveq	r3, #1
 80054f8:	2300      	movne	r3, #0
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	461a      	mov	r2, r3
 80054fe:	79fb      	ldrb	r3, [r7, #7]
 8005500:	429a      	cmp	r2, r3
 8005502:	d19b      	bne.n	800543c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3720      	adds	r7, #32
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	20000000 	.word	0x20000000

08005514 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b08a      	sub	sp, #40	@ 0x28
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
 8005520:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005522:	2300      	movs	r3, #0
 8005524:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005526:	f7fc fc0d 	bl	8001d44 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552e:	1a9b      	subs	r3, r3, r2
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	4413      	add	r3, r2
 8005534:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005536:	f7fc fc05 	bl	8001d44 <HAL_GetTick>
 800553a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	330c      	adds	r3, #12
 8005542:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005544:	4b3d      	ldr	r3, [pc, #244]	@ (800563c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	4613      	mov	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	00da      	lsls	r2, r3, #3
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	0d1b      	lsrs	r3, r3, #20
 8005554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005556:	fb02 f303 	mul.w	r3, r2, r3
 800555a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800555c:	e060      	b.n	8005620 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005564:	d107      	bne.n	8005576 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d104      	bne.n	8005576 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	b2db      	uxtb	r3, r3
 8005572:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005574:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557c:	d050      	beq.n	8005620 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800557e:	f7fc fbe1 	bl	8001d44 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800558a:	429a      	cmp	r2, r3
 800558c:	d902      	bls.n	8005594 <SPI_WaitFifoStateUntilTimeout+0x80>
 800558e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005590:	2b00      	cmp	r3, #0
 8005592:	d13d      	bne.n	8005610 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80055a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055ac:	d111      	bne.n	80055d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055b6:	d004      	beq.n	80055c2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055c0:	d107      	bne.n	80055d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055da:	d10f      	bne.n	80055fc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e010      	b.n	8005632 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005616:	2300      	movs	r3, #0
 8005618:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	3b01      	subs	r3, #1
 800561e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689a      	ldr	r2, [r3, #8]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	4013      	ands	r3, r2
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	429a      	cmp	r2, r3
 800562e:	d196      	bne.n	800555e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3728      	adds	r7, #40	@ 0x28
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	20000000 	.word	0x20000000

08005640 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b088      	sub	sp, #32
 8005644:	af02      	add	r7, sp, #8
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005654:	d111      	bne.n	800567a <SPI_EndRxTransaction+0x3a>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800565e:	d004      	beq.n	800566a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005668:	d107      	bne.n	800567a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005678:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005682:	d112      	bne.n	80056aa <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	2200      	movs	r2, #0
 800568c:	2180      	movs	r1, #128	@ 0x80
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f7ff feb8 	bl	8005404 <SPI_WaitFlagStateUntilTimeout>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d021      	beq.n	80056de <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800569e:	f043 0220 	orr.w	r2, r3, #32
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e03d      	b.n	8005726 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80056aa:	4b21      	ldr	r3, [pc, #132]	@ (8005730 <SPI_EndRxTransaction+0xf0>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a21      	ldr	r2, [pc, #132]	@ (8005734 <SPI_EndRxTransaction+0xf4>)
 80056b0:	fba2 2303 	umull	r2, r3, r2, r3
 80056b4:	0d5b      	lsrs	r3, r3, #21
 80056b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80056ba:	fb02 f303 	mul.w	r3, r2, r3
 80056be:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00a      	beq.n	80056dc <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056d6:	2b80      	cmp	r3, #128	@ 0x80
 80056d8:	d0f2      	beq.n	80056c0 <SPI_EndRxTransaction+0x80>
 80056da:	e000      	b.n	80056de <SPI_EndRxTransaction+0x9e>
        break;
 80056dc:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056e6:	d11d      	bne.n	8005724 <SPI_EndRxTransaction+0xe4>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056f0:	d004      	beq.n	80056fc <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056fa:	d113      	bne.n	8005724 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2200      	movs	r2, #0
 8005704:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f7ff ff03 	bl	8005514 <SPI_WaitFifoStateUntilTimeout>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d007      	beq.n	8005724 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005718:	f043 0220 	orr.w	r2, r3, #32
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e000      	b.n	8005726 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	20000000 	.word	0x20000000
 8005734:	165e9f81 	.word	0x165e9f81

08005738 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b088      	sub	sp, #32
 800573c:	af02      	add	r7, sp, #8
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2200      	movs	r2, #0
 800574c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f7ff fedf 	bl	8005514 <SPI_WaitFifoStateUntilTimeout>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d007      	beq.n	800576c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005760:	f043 0220 	orr.w	r2, r3, #32
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e046      	b.n	80057fa <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800576c:	4b25      	ldr	r3, [pc, #148]	@ (8005804 <SPI_EndRxTxTransaction+0xcc>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a25      	ldr	r2, [pc, #148]	@ (8005808 <SPI_EndRxTxTransaction+0xd0>)
 8005772:	fba2 2303 	umull	r2, r3, r2, r3
 8005776:	0d5b      	lsrs	r3, r3, #21
 8005778:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800577c:	fb02 f303 	mul.w	r3, r2, r3
 8005780:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800578a:	d112      	bne.n	80057b2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	2200      	movs	r2, #0
 8005794:	2180      	movs	r1, #128	@ 0x80
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f7ff fe34 	bl	8005404 <SPI_WaitFlagStateUntilTimeout>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d016      	beq.n	80057d0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057a6:	f043 0220 	orr.w	r2, r3, #32
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e023      	b.n	80057fa <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00a      	beq.n	80057ce <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	3b01      	subs	r3, #1
 80057bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057c8:	2b80      	cmp	r3, #128	@ 0x80
 80057ca:	d0f2      	beq.n	80057b2 <SPI_EndRxTxTransaction+0x7a>
 80057cc:	e000      	b.n	80057d0 <SPI_EndRxTxTransaction+0x98>
        break;
 80057ce:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f7ff fe99 	bl	8005514 <SPI_WaitFifoStateUntilTimeout>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d007      	beq.n	80057f8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057ec:	f043 0220 	orr.w	r2, r3, #32
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e000      	b.n	80057fa <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3718      	adds	r7, #24
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	20000000 	.word	0x20000000
 8005808:	165e9f81 	.word	0x165e9f81

0800580c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e040      	b.n	80058a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005822:	2b00      	cmp	r3, #0
 8005824:	d106      	bne.n	8005834 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7fc f8f2 	bl	8001a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2224      	movs	r2, #36	@ 0x24
 8005838:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 0201 	bic.w	r2, r2, #1
 8005848:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f82c 	bl	80058a8 <UART_SetConfig>
 8005850:	4603      	mov	r3, r0
 8005852:	2b01      	cmp	r3, #1
 8005854:	d101      	bne.n	800585a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e022      	b.n	80058a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585e:	2b00      	cmp	r3, #0
 8005860:	d002      	beq.n	8005868 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 fa84 	bl	8005d70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005876:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689a      	ldr	r2, [r3, #8]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005886:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f042 0201 	orr.w	r2, r2, #1
 8005896:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 fb0b 	bl	8005eb4 <UART_CheckIdleState>
 800589e:	4603      	mov	r3, r0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b088      	sub	sp, #32
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058b0:	2300      	movs	r3, #0
 80058b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689a      	ldr	r2, [r3, #8]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	431a      	orrs	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	4ba6      	ldr	r3, [pc, #664]	@ (8005b6c <UART_SetConfig+0x2c4>)
 80058d4:	4013      	ands	r3, r2
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	6812      	ldr	r2, [r2, #0]
 80058da:	6979      	ldr	r1, [r7, #20]
 80058dc:	430b      	orrs	r3, r1
 80058de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68da      	ldr	r2, [r3, #12]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	4313      	orrs	r3, r2
 8005904:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	430a      	orrs	r2, r1
 8005918:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a94      	ldr	r2, [pc, #592]	@ (8005b70 <UART_SetConfig+0x2c8>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d120      	bne.n	8005966 <UART_SetConfig+0xbe>
 8005924:	4b93      	ldr	r3, [pc, #588]	@ (8005b74 <UART_SetConfig+0x2cc>)
 8005926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800592a:	f003 0303 	and.w	r3, r3, #3
 800592e:	2b03      	cmp	r3, #3
 8005930:	d816      	bhi.n	8005960 <UART_SetConfig+0xb8>
 8005932:	a201      	add	r2, pc, #4	@ (adr r2, 8005938 <UART_SetConfig+0x90>)
 8005934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005938:	08005949 	.word	0x08005949
 800593c:	08005955 	.word	0x08005955
 8005940:	0800594f 	.word	0x0800594f
 8005944:	0800595b 	.word	0x0800595b
 8005948:	2301      	movs	r3, #1
 800594a:	77fb      	strb	r3, [r7, #31]
 800594c:	e150      	b.n	8005bf0 <UART_SetConfig+0x348>
 800594e:	2302      	movs	r3, #2
 8005950:	77fb      	strb	r3, [r7, #31]
 8005952:	e14d      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005954:	2304      	movs	r3, #4
 8005956:	77fb      	strb	r3, [r7, #31]
 8005958:	e14a      	b.n	8005bf0 <UART_SetConfig+0x348>
 800595a:	2308      	movs	r3, #8
 800595c:	77fb      	strb	r3, [r7, #31]
 800595e:	e147      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005960:	2310      	movs	r3, #16
 8005962:	77fb      	strb	r3, [r7, #31]
 8005964:	e144      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a83      	ldr	r2, [pc, #524]	@ (8005b78 <UART_SetConfig+0x2d0>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d132      	bne.n	80059d6 <UART_SetConfig+0x12e>
 8005970:	4b80      	ldr	r3, [pc, #512]	@ (8005b74 <UART_SetConfig+0x2cc>)
 8005972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005976:	f003 030c 	and.w	r3, r3, #12
 800597a:	2b0c      	cmp	r3, #12
 800597c:	d828      	bhi.n	80059d0 <UART_SetConfig+0x128>
 800597e:	a201      	add	r2, pc, #4	@ (adr r2, 8005984 <UART_SetConfig+0xdc>)
 8005980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005984:	080059b9 	.word	0x080059b9
 8005988:	080059d1 	.word	0x080059d1
 800598c:	080059d1 	.word	0x080059d1
 8005990:	080059d1 	.word	0x080059d1
 8005994:	080059c5 	.word	0x080059c5
 8005998:	080059d1 	.word	0x080059d1
 800599c:	080059d1 	.word	0x080059d1
 80059a0:	080059d1 	.word	0x080059d1
 80059a4:	080059bf 	.word	0x080059bf
 80059a8:	080059d1 	.word	0x080059d1
 80059ac:	080059d1 	.word	0x080059d1
 80059b0:	080059d1 	.word	0x080059d1
 80059b4:	080059cb 	.word	0x080059cb
 80059b8:	2300      	movs	r3, #0
 80059ba:	77fb      	strb	r3, [r7, #31]
 80059bc:	e118      	b.n	8005bf0 <UART_SetConfig+0x348>
 80059be:	2302      	movs	r3, #2
 80059c0:	77fb      	strb	r3, [r7, #31]
 80059c2:	e115      	b.n	8005bf0 <UART_SetConfig+0x348>
 80059c4:	2304      	movs	r3, #4
 80059c6:	77fb      	strb	r3, [r7, #31]
 80059c8:	e112      	b.n	8005bf0 <UART_SetConfig+0x348>
 80059ca:	2308      	movs	r3, #8
 80059cc:	77fb      	strb	r3, [r7, #31]
 80059ce:	e10f      	b.n	8005bf0 <UART_SetConfig+0x348>
 80059d0:	2310      	movs	r3, #16
 80059d2:	77fb      	strb	r3, [r7, #31]
 80059d4:	e10c      	b.n	8005bf0 <UART_SetConfig+0x348>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a68      	ldr	r2, [pc, #416]	@ (8005b7c <UART_SetConfig+0x2d4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d120      	bne.n	8005a22 <UART_SetConfig+0x17a>
 80059e0:	4b64      	ldr	r3, [pc, #400]	@ (8005b74 <UART_SetConfig+0x2cc>)
 80059e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059e6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80059ea:	2b30      	cmp	r3, #48	@ 0x30
 80059ec:	d013      	beq.n	8005a16 <UART_SetConfig+0x16e>
 80059ee:	2b30      	cmp	r3, #48	@ 0x30
 80059f0:	d814      	bhi.n	8005a1c <UART_SetConfig+0x174>
 80059f2:	2b20      	cmp	r3, #32
 80059f4:	d009      	beq.n	8005a0a <UART_SetConfig+0x162>
 80059f6:	2b20      	cmp	r3, #32
 80059f8:	d810      	bhi.n	8005a1c <UART_SetConfig+0x174>
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d002      	beq.n	8005a04 <UART_SetConfig+0x15c>
 80059fe:	2b10      	cmp	r3, #16
 8005a00:	d006      	beq.n	8005a10 <UART_SetConfig+0x168>
 8005a02:	e00b      	b.n	8005a1c <UART_SetConfig+0x174>
 8005a04:	2300      	movs	r3, #0
 8005a06:	77fb      	strb	r3, [r7, #31]
 8005a08:	e0f2      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	77fb      	strb	r3, [r7, #31]
 8005a0e:	e0ef      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005a10:	2304      	movs	r3, #4
 8005a12:	77fb      	strb	r3, [r7, #31]
 8005a14:	e0ec      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005a16:	2308      	movs	r3, #8
 8005a18:	77fb      	strb	r3, [r7, #31]
 8005a1a:	e0e9      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005a1c:	2310      	movs	r3, #16
 8005a1e:	77fb      	strb	r3, [r7, #31]
 8005a20:	e0e6      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a56      	ldr	r2, [pc, #344]	@ (8005b80 <UART_SetConfig+0x2d8>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d120      	bne.n	8005a6e <UART_SetConfig+0x1c6>
 8005a2c:	4b51      	ldr	r3, [pc, #324]	@ (8005b74 <UART_SetConfig+0x2cc>)
 8005a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a32:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005a36:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a38:	d013      	beq.n	8005a62 <UART_SetConfig+0x1ba>
 8005a3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a3c:	d814      	bhi.n	8005a68 <UART_SetConfig+0x1c0>
 8005a3e:	2b80      	cmp	r3, #128	@ 0x80
 8005a40:	d009      	beq.n	8005a56 <UART_SetConfig+0x1ae>
 8005a42:	2b80      	cmp	r3, #128	@ 0x80
 8005a44:	d810      	bhi.n	8005a68 <UART_SetConfig+0x1c0>
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d002      	beq.n	8005a50 <UART_SetConfig+0x1a8>
 8005a4a:	2b40      	cmp	r3, #64	@ 0x40
 8005a4c:	d006      	beq.n	8005a5c <UART_SetConfig+0x1b4>
 8005a4e:	e00b      	b.n	8005a68 <UART_SetConfig+0x1c0>
 8005a50:	2300      	movs	r3, #0
 8005a52:	77fb      	strb	r3, [r7, #31]
 8005a54:	e0cc      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005a56:	2302      	movs	r3, #2
 8005a58:	77fb      	strb	r3, [r7, #31]
 8005a5a:	e0c9      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005a5c:	2304      	movs	r3, #4
 8005a5e:	77fb      	strb	r3, [r7, #31]
 8005a60:	e0c6      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005a62:	2308      	movs	r3, #8
 8005a64:	77fb      	strb	r3, [r7, #31]
 8005a66:	e0c3      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005a68:	2310      	movs	r3, #16
 8005a6a:	77fb      	strb	r3, [r7, #31]
 8005a6c:	e0c0      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a44      	ldr	r2, [pc, #272]	@ (8005b84 <UART_SetConfig+0x2dc>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d125      	bne.n	8005ac4 <UART_SetConfig+0x21c>
 8005a78:	4b3e      	ldr	r3, [pc, #248]	@ (8005b74 <UART_SetConfig+0x2cc>)
 8005a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a86:	d017      	beq.n	8005ab8 <UART_SetConfig+0x210>
 8005a88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a8c:	d817      	bhi.n	8005abe <UART_SetConfig+0x216>
 8005a8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a92:	d00b      	beq.n	8005aac <UART_SetConfig+0x204>
 8005a94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a98:	d811      	bhi.n	8005abe <UART_SetConfig+0x216>
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <UART_SetConfig+0x1fe>
 8005a9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005aa2:	d006      	beq.n	8005ab2 <UART_SetConfig+0x20a>
 8005aa4:	e00b      	b.n	8005abe <UART_SetConfig+0x216>
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	77fb      	strb	r3, [r7, #31]
 8005aaa:	e0a1      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005aac:	2302      	movs	r3, #2
 8005aae:	77fb      	strb	r3, [r7, #31]
 8005ab0:	e09e      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005ab2:	2304      	movs	r3, #4
 8005ab4:	77fb      	strb	r3, [r7, #31]
 8005ab6:	e09b      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005ab8:	2308      	movs	r3, #8
 8005aba:	77fb      	strb	r3, [r7, #31]
 8005abc:	e098      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005abe:	2310      	movs	r3, #16
 8005ac0:	77fb      	strb	r3, [r7, #31]
 8005ac2:	e095      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a2f      	ldr	r2, [pc, #188]	@ (8005b88 <UART_SetConfig+0x2e0>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d125      	bne.n	8005b1a <UART_SetConfig+0x272>
 8005ace:	4b29      	ldr	r3, [pc, #164]	@ (8005b74 <UART_SetConfig+0x2cc>)
 8005ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ad4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005ad8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005adc:	d017      	beq.n	8005b0e <UART_SetConfig+0x266>
 8005ade:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ae2:	d817      	bhi.n	8005b14 <UART_SetConfig+0x26c>
 8005ae4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ae8:	d00b      	beq.n	8005b02 <UART_SetConfig+0x25a>
 8005aea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005aee:	d811      	bhi.n	8005b14 <UART_SetConfig+0x26c>
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <UART_SetConfig+0x254>
 8005af4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005af8:	d006      	beq.n	8005b08 <UART_SetConfig+0x260>
 8005afa:	e00b      	b.n	8005b14 <UART_SetConfig+0x26c>
 8005afc:	2301      	movs	r3, #1
 8005afe:	77fb      	strb	r3, [r7, #31]
 8005b00:	e076      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005b02:	2302      	movs	r3, #2
 8005b04:	77fb      	strb	r3, [r7, #31]
 8005b06:	e073      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005b08:	2304      	movs	r3, #4
 8005b0a:	77fb      	strb	r3, [r7, #31]
 8005b0c:	e070      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005b0e:	2308      	movs	r3, #8
 8005b10:	77fb      	strb	r3, [r7, #31]
 8005b12:	e06d      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005b14:	2310      	movs	r3, #16
 8005b16:	77fb      	strb	r3, [r7, #31]
 8005b18:	e06a      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a1b      	ldr	r2, [pc, #108]	@ (8005b8c <UART_SetConfig+0x2e4>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d138      	bne.n	8005b96 <UART_SetConfig+0x2ee>
 8005b24:	4b13      	ldr	r3, [pc, #76]	@ (8005b74 <UART_SetConfig+0x2cc>)
 8005b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b2a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005b2e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b32:	d017      	beq.n	8005b64 <UART_SetConfig+0x2bc>
 8005b34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b38:	d82a      	bhi.n	8005b90 <UART_SetConfig+0x2e8>
 8005b3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b3e:	d00b      	beq.n	8005b58 <UART_SetConfig+0x2b0>
 8005b40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b44:	d824      	bhi.n	8005b90 <UART_SetConfig+0x2e8>
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <UART_SetConfig+0x2aa>
 8005b4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b4e:	d006      	beq.n	8005b5e <UART_SetConfig+0x2b6>
 8005b50:	e01e      	b.n	8005b90 <UART_SetConfig+0x2e8>
 8005b52:	2300      	movs	r3, #0
 8005b54:	77fb      	strb	r3, [r7, #31]
 8005b56:	e04b      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005b58:	2302      	movs	r3, #2
 8005b5a:	77fb      	strb	r3, [r7, #31]
 8005b5c:	e048      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005b5e:	2304      	movs	r3, #4
 8005b60:	77fb      	strb	r3, [r7, #31]
 8005b62:	e045      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005b64:	2308      	movs	r3, #8
 8005b66:	77fb      	strb	r3, [r7, #31]
 8005b68:	e042      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005b6a:	bf00      	nop
 8005b6c:	efff69f3 	.word	0xefff69f3
 8005b70:	40011000 	.word	0x40011000
 8005b74:	40023800 	.word	0x40023800
 8005b78:	40004400 	.word	0x40004400
 8005b7c:	40004800 	.word	0x40004800
 8005b80:	40004c00 	.word	0x40004c00
 8005b84:	40005000 	.word	0x40005000
 8005b88:	40011400 	.word	0x40011400
 8005b8c:	40007800 	.word	0x40007800
 8005b90:	2310      	movs	r3, #16
 8005b92:	77fb      	strb	r3, [r7, #31]
 8005b94:	e02c      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a72      	ldr	r2, [pc, #456]	@ (8005d64 <UART_SetConfig+0x4bc>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d125      	bne.n	8005bec <UART_SetConfig+0x344>
 8005ba0:	4b71      	ldr	r3, [pc, #452]	@ (8005d68 <UART_SetConfig+0x4c0>)
 8005ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ba6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005baa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005bae:	d017      	beq.n	8005be0 <UART_SetConfig+0x338>
 8005bb0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005bb4:	d817      	bhi.n	8005be6 <UART_SetConfig+0x33e>
 8005bb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bba:	d00b      	beq.n	8005bd4 <UART_SetConfig+0x32c>
 8005bbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bc0:	d811      	bhi.n	8005be6 <UART_SetConfig+0x33e>
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <UART_SetConfig+0x326>
 8005bc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bca:	d006      	beq.n	8005bda <UART_SetConfig+0x332>
 8005bcc:	e00b      	b.n	8005be6 <UART_SetConfig+0x33e>
 8005bce:	2300      	movs	r3, #0
 8005bd0:	77fb      	strb	r3, [r7, #31]
 8005bd2:	e00d      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	77fb      	strb	r3, [r7, #31]
 8005bd8:	e00a      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005bda:	2304      	movs	r3, #4
 8005bdc:	77fb      	strb	r3, [r7, #31]
 8005bde:	e007      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005be0:	2308      	movs	r3, #8
 8005be2:	77fb      	strb	r3, [r7, #31]
 8005be4:	e004      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005be6:	2310      	movs	r3, #16
 8005be8:	77fb      	strb	r3, [r7, #31]
 8005bea:	e001      	b.n	8005bf0 <UART_SetConfig+0x348>
 8005bec:	2310      	movs	r3, #16
 8005bee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bf8:	d15b      	bne.n	8005cb2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005bfa:	7ffb      	ldrb	r3, [r7, #31]
 8005bfc:	2b08      	cmp	r3, #8
 8005bfe:	d828      	bhi.n	8005c52 <UART_SetConfig+0x3aa>
 8005c00:	a201      	add	r2, pc, #4	@ (adr r2, 8005c08 <UART_SetConfig+0x360>)
 8005c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c06:	bf00      	nop
 8005c08:	08005c2d 	.word	0x08005c2d
 8005c0c:	08005c35 	.word	0x08005c35
 8005c10:	08005c3d 	.word	0x08005c3d
 8005c14:	08005c53 	.word	0x08005c53
 8005c18:	08005c43 	.word	0x08005c43
 8005c1c:	08005c53 	.word	0x08005c53
 8005c20:	08005c53 	.word	0x08005c53
 8005c24:	08005c53 	.word	0x08005c53
 8005c28:	08005c4b 	.word	0x08005c4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c2c:	f7fe fa76 	bl	800411c <HAL_RCC_GetPCLK1Freq>
 8005c30:	61b8      	str	r0, [r7, #24]
        break;
 8005c32:	e013      	b.n	8005c5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c34:	f7fe fa86 	bl	8004144 <HAL_RCC_GetPCLK2Freq>
 8005c38:	61b8      	str	r0, [r7, #24]
        break;
 8005c3a:	e00f      	b.n	8005c5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c3c:	4b4b      	ldr	r3, [pc, #300]	@ (8005d6c <UART_SetConfig+0x4c4>)
 8005c3e:	61bb      	str	r3, [r7, #24]
        break;
 8005c40:	e00c      	b.n	8005c5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c42:	f7fe f959 	bl	8003ef8 <HAL_RCC_GetSysClockFreq>
 8005c46:	61b8      	str	r0, [r7, #24]
        break;
 8005c48:	e008      	b.n	8005c5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c4e:	61bb      	str	r3, [r7, #24]
        break;
 8005c50:	e004      	b.n	8005c5c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	77bb      	strb	r3, [r7, #30]
        break;
 8005c5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d074      	beq.n	8005d4c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	005a      	lsls	r2, r3, #1
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	085b      	lsrs	r3, r3, #1
 8005c6c:	441a      	add	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c76:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	2b0f      	cmp	r3, #15
 8005c7c:	d916      	bls.n	8005cac <UART_SetConfig+0x404>
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c84:	d212      	bcs.n	8005cac <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	f023 030f 	bic.w	r3, r3, #15
 8005c8e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	085b      	lsrs	r3, r3, #1
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	89fb      	ldrh	r3, [r7, #14]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	89fa      	ldrh	r2, [r7, #14]
 8005ca8:	60da      	str	r2, [r3, #12]
 8005caa:	e04f      	b.n	8005d4c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	77bb      	strb	r3, [r7, #30]
 8005cb0:	e04c      	b.n	8005d4c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cb2:	7ffb      	ldrb	r3, [r7, #31]
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d828      	bhi.n	8005d0a <UART_SetConfig+0x462>
 8005cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc0 <UART_SetConfig+0x418>)
 8005cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbe:	bf00      	nop
 8005cc0:	08005ce5 	.word	0x08005ce5
 8005cc4:	08005ced 	.word	0x08005ced
 8005cc8:	08005cf5 	.word	0x08005cf5
 8005ccc:	08005d0b 	.word	0x08005d0b
 8005cd0:	08005cfb 	.word	0x08005cfb
 8005cd4:	08005d0b 	.word	0x08005d0b
 8005cd8:	08005d0b 	.word	0x08005d0b
 8005cdc:	08005d0b 	.word	0x08005d0b
 8005ce0:	08005d03 	.word	0x08005d03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ce4:	f7fe fa1a 	bl	800411c <HAL_RCC_GetPCLK1Freq>
 8005ce8:	61b8      	str	r0, [r7, #24]
        break;
 8005cea:	e013      	b.n	8005d14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cec:	f7fe fa2a 	bl	8004144 <HAL_RCC_GetPCLK2Freq>
 8005cf0:	61b8      	str	r0, [r7, #24]
        break;
 8005cf2:	e00f      	b.n	8005d14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8005d6c <UART_SetConfig+0x4c4>)
 8005cf6:	61bb      	str	r3, [r7, #24]
        break;
 8005cf8:	e00c      	b.n	8005d14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cfa:	f7fe f8fd 	bl	8003ef8 <HAL_RCC_GetSysClockFreq>
 8005cfe:	61b8      	str	r0, [r7, #24]
        break;
 8005d00:	e008      	b.n	8005d14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d06:	61bb      	str	r3, [r7, #24]
        break;
 8005d08:	e004      	b.n	8005d14 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	77bb      	strb	r3, [r7, #30]
        break;
 8005d12:	bf00      	nop
    }

    if (pclk != 0U)
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d018      	beq.n	8005d4c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	085a      	lsrs	r2, r3, #1
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	441a      	add	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	2b0f      	cmp	r3, #15
 8005d32:	d909      	bls.n	8005d48 <UART_SetConfig+0x4a0>
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d3a:	d205      	bcs.n	8005d48 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	60da      	str	r2, [r3, #12]
 8005d46:	e001      	b.n	8005d4c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005d58:	7fbb      	ldrb	r3, [r7, #30]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3720      	adds	r7, #32
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	40007c00 	.word	0x40007c00
 8005d68:	40023800 	.word	0x40023800
 8005d6c:	00f42400 	.word	0x00f42400

08005d70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00a      	beq.n	8005d9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00a      	beq.n	8005dbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc0:	f003 0304 	and.w	r3, r3, #4
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00a      	beq.n	8005dde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de2:	f003 0308 	and.w	r3, r3, #8
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00a      	beq.n	8005e00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e04:	f003 0310 	and.w	r3, r3, #16
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00a      	beq.n	8005e22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e26:	f003 0320 	and.w	r3, r3, #32
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00a      	beq.n	8005e44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d01a      	beq.n	8005e86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e6e:	d10a      	bne.n	8005e86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	430a      	orrs	r2, r1
 8005e84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00a      	beq.n	8005ea8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	605a      	str	r2, [r3, #4]
  }
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af02      	add	r7, sp, #8
 8005eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ec4:	f7fb ff3e 	bl	8001d44 <HAL_GetTick>
 8005ec8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0308 	and.w	r3, r3, #8
 8005ed4:	2b08      	cmp	r3, #8
 8005ed6:	d10e      	bne.n	8005ef6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ed8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f81b 	bl	8005f22 <UART_WaitOnFlagUntilTimeout>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e011      	b.n	8005f1a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2220      	movs	r2, #32
 8005f00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b09c      	sub	sp, #112	@ 0x70
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	60f8      	str	r0, [r7, #12]
 8005f2a:	60b9      	str	r1, [r7, #8]
 8005f2c:	603b      	str	r3, [r7, #0]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f32:	e0a7      	b.n	8006084 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3a:	f000 80a3 	beq.w	8006084 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f3e:	f7fb ff01 	bl	8001d44 <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d302      	bcc.n	8005f54 <UART_WaitOnFlagUntilTimeout+0x32>
 8005f4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d13f      	bne.n	8005fd4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f5c:	e853 3f00 	ldrex	r3, [r3]
 8005f60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005f62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f64:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005f68:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f74:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f76:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005f78:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005f7a:	e841 2300 	strex	r3, r2, [r1]
 8005f7e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1e6      	bne.n	8005f54 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3308      	adds	r3, #8
 8005f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f90:	e853 3f00 	ldrex	r3, [r3]
 8005f94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f98:	f023 0301 	bic.w	r3, r3, #1
 8005f9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3308      	adds	r3, #8
 8005fa4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005fa6:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005fa8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005faa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005fac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fae:	e841 2300 	strex	r3, r2, [r1]
 8005fb2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005fb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1e5      	bne.n	8005f86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e068      	b.n	80060a6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0304 	and.w	r3, r3, #4
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d050      	beq.n	8006084 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ff0:	d148      	bne.n	8006084 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ffa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006004:	e853 3f00 	ldrex	r3, [r3]
 8006008:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800600a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006010:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	461a      	mov	r2, r3
 8006018:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800601a:	637b      	str	r3, [r7, #52]	@ 0x34
 800601c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006020:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006022:	e841 2300 	strex	r3, r2, [r1]
 8006026:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1e6      	bne.n	8005ffc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3308      	adds	r3, #8
 8006034:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	e853 3f00 	ldrex	r3, [r3]
 800603c:	613b      	str	r3, [r7, #16]
   return(result);
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	f023 0301 	bic.w	r3, r3, #1
 8006044:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3308      	adds	r3, #8
 800604c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800604e:	623a      	str	r2, [r7, #32]
 8006050:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006052:	69f9      	ldr	r1, [r7, #28]
 8006054:	6a3a      	ldr	r2, [r7, #32]
 8006056:	e841 2300 	strex	r3, r2, [r1]
 800605a:	61bb      	str	r3, [r7, #24]
   return(result);
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1e5      	bne.n	800602e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2220      	movs	r2, #32
 8006066:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2220      	movs	r2, #32
 800606c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2220      	movs	r2, #32
 8006074:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e010      	b.n	80060a6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	69da      	ldr	r2, [r3, #28]
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	4013      	ands	r3, r2
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	429a      	cmp	r2, r3
 8006092:	bf0c      	ite	eq
 8006094:	2301      	moveq	r3, #1
 8006096:	2300      	movne	r3, #0
 8006098:	b2db      	uxtb	r3, r3
 800609a:	461a      	mov	r2, r3
 800609c:	79fb      	ldrb	r3, [r7, #7]
 800609e:	429a      	cmp	r2, r3
 80060a0:	f43f af48 	beq.w	8005f34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3770      	adds	r7, #112	@ 0x70
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
	...

080060b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060b0:	b084      	sub	sp, #16
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b084      	sub	sp, #16
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	f107 001c 	add.w	r0, r7, #28
 80060be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d120      	bne.n	800610a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68da      	ldr	r2, [r3, #12]
 80060d8:	4b20      	ldr	r3, [pc, #128]	@ (800615c <USB_CoreInit+0xac>)
 80060da:	4013      	ands	r3, r2
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80060ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d105      	bne.n	80060fe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 fa96 	bl	8006630 <USB_CoreReset>
 8006104:	4603      	mov	r3, r0
 8006106:	73fb      	strb	r3, [r7, #15]
 8006108:	e010      	b.n	800612c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 fa8a 	bl	8006630 <USB_CoreReset>
 800611c:	4603      	mov	r3, r0
 800611e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006124:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800612c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800612e:	2b01      	cmp	r3, #1
 8006130:	d10b      	bne.n	800614a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f043 0206 	orr.w	r2, r3, #6
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f043 0220 	orr.w	r2, r3, #32
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800614a:	7bfb      	ldrb	r3, [r7, #15]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006156:	b004      	add	sp, #16
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	ffbdffbf 	.word	0xffbdffbf

08006160 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f023 0201 	bic.w	r2, r3, #1
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b084      	sub	sp, #16
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	460b      	mov	r3, r1
 800618c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800618e:	2300      	movs	r3, #0
 8006190:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800619e:	78fb      	ldrb	r3, [r7, #3]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d115      	bne.n	80061d0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80061b0:	2001      	movs	r0, #1
 80061b2:	f7fb fdd3 	bl	8001d5c <HAL_Delay>
      ms++;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	3301      	adds	r3, #1
 80061ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 fa29 	bl	8006614 <USB_GetMode>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d01e      	beq.n	8006206 <USB_SetCurrentMode+0x84>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2b31      	cmp	r3, #49	@ 0x31
 80061cc:	d9f0      	bls.n	80061b0 <USB_SetCurrentMode+0x2e>
 80061ce:	e01a      	b.n	8006206 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80061d0:	78fb      	ldrb	r3, [r7, #3]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d115      	bne.n	8006202 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80061e2:	2001      	movs	r0, #1
 80061e4:	f7fb fdba 	bl	8001d5c <HAL_Delay>
      ms++;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	3301      	adds	r3, #1
 80061ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fa10 	bl	8006614 <USB_GetMode>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d005      	beq.n	8006206 <USB_SetCurrentMode+0x84>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2b31      	cmp	r3, #49	@ 0x31
 80061fe:	d9f0      	bls.n	80061e2 <USB_SetCurrentMode+0x60>
 8006200:	e001      	b.n	8006206 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e005      	b.n	8006212 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2b32      	cmp	r3, #50	@ 0x32
 800620a:	d101      	bne.n	8006210 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e000      	b.n	8006212 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
	...

0800621c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800621c:	b084      	sub	sp, #16
 800621e:	b580      	push	{r7, lr}
 8006220:	b086      	sub	sp, #24
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800622a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800622e:	2300      	movs	r3, #0
 8006230:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006236:	2300      	movs	r3, #0
 8006238:	613b      	str	r3, [r7, #16]
 800623a:	e009      	b.n	8006250 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	3340      	adds	r3, #64	@ 0x40
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	2200      	movs	r2, #0
 8006248:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	3301      	adds	r3, #1
 800624e:	613b      	str	r3, [r7, #16]
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	2b0e      	cmp	r3, #14
 8006254:	d9f2      	bls.n	800623c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006256:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006258:	2b00      	cmp	r3, #0
 800625a:	d11c      	bne.n	8006296 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800626a:	f043 0302 	orr.w	r3, r3, #2
 800626e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006274:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	601a      	str	r2, [r3, #0]
 8006294:	e005      	b.n	80062a2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800629a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80062a8:	461a      	mov	r2, r3
 80062aa:	2300      	movs	r3, #0
 80062ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062b4:	4619      	mov	r1, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062bc:	461a      	mov	r2, r3
 80062be:	680b      	ldr	r3, [r1, #0]
 80062c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d10c      	bne.n	80062e2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80062c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d104      	bne.n	80062d8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80062ce:	2100      	movs	r1, #0
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f965 	bl	80065a0 <USB_SetDevSpeed>
 80062d6:	e008      	b.n	80062ea <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80062d8:	2101      	movs	r1, #1
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f960 	bl	80065a0 <USB_SetDevSpeed>
 80062e0:	e003      	b.n	80062ea <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80062e2:	2103      	movs	r1, #3
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f95b 	bl	80065a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80062ea:	2110      	movs	r1, #16
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f8f3 	bl	80064d8 <USB_FlushTxFifo>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f91f 	bl	8006540 <USB_FlushRxFifo>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d001      	beq.n	800630c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006312:	461a      	mov	r2, r3
 8006314:	2300      	movs	r3, #0
 8006316:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800631e:	461a      	mov	r2, r3
 8006320:	2300      	movs	r3, #0
 8006322:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800632a:	461a      	mov	r2, r3
 800632c:	2300      	movs	r3, #0
 800632e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006330:	2300      	movs	r3, #0
 8006332:	613b      	str	r3, [r7, #16]
 8006334:	e043      	b.n	80063be <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	4413      	add	r3, r2
 800633e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006348:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800634c:	d118      	bne.n	8006380 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10a      	bne.n	800636a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	4413      	add	r3, r2
 800635c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006360:	461a      	mov	r2, r3
 8006362:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006366:	6013      	str	r3, [r2, #0]
 8006368:	e013      	b.n	8006392 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	015a      	lsls	r2, r3, #5
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	4413      	add	r3, r2
 8006372:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006376:	461a      	mov	r2, r3
 8006378:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800637c:	6013      	str	r3, [r2, #0]
 800637e:	e008      	b.n	8006392 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800638c:	461a      	mov	r2, r3
 800638e:	2300      	movs	r3, #0
 8006390:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	4413      	add	r3, r2
 800639a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800639e:	461a      	mov	r2, r3
 80063a0:	2300      	movs	r3, #0
 80063a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063b0:	461a      	mov	r2, r3
 80063b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80063b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	3301      	adds	r3, #1
 80063bc:	613b      	str	r3, [r7, #16]
 80063be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d3b7      	bcc.n	8006336 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063c6:	2300      	movs	r3, #0
 80063c8:	613b      	str	r3, [r7, #16]
 80063ca:	e043      	b.n	8006454 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063e2:	d118      	bne.n	8006416 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10a      	bne.n	8006400 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	015a      	lsls	r2, r3, #5
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4413      	add	r3, r2
 80063f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063f6:	461a      	mov	r2, r3
 80063f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80063fc:	6013      	str	r3, [r2, #0]
 80063fe:	e013      	b.n	8006428 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	4413      	add	r3, r2
 8006408:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800640c:	461a      	mov	r2, r3
 800640e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006412:	6013      	str	r3, [r2, #0]
 8006414:	e008      	b.n	8006428 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	4413      	add	r3, r2
 800641e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006422:	461a      	mov	r2, r3
 8006424:	2300      	movs	r3, #0
 8006426:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006434:	461a      	mov	r2, r3
 8006436:	2300      	movs	r3, #0
 8006438:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	015a      	lsls	r2, r3, #5
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	4413      	add	r3, r2
 8006442:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006446:	461a      	mov	r2, r3
 8006448:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800644c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	3301      	adds	r3, #1
 8006452:	613b      	str	r3, [r7, #16]
 8006454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	429a      	cmp	r2, r3
 800645a:	d3b7      	bcc.n	80063cc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800646a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800646e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800647c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800647e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006480:	2b00      	cmp	r3, #0
 8006482:	d105      	bne.n	8006490 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	f043 0210 	orr.w	r2, r3, #16
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	699a      	ldr	r2, [r3, #24]
 8006494:	4b0e      	ldr	r3, [pc, #56]	@ (80064d0 <USB_DevInit+0x2b4>)
 8006496:	4313      	orrs	r3, r2
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800649c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d005      	beq.n	80064ae <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	f043 0208 	orr.w	r2, r3, #8
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80064ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d105      	bne.n	80064c0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	699a      	ldr	r2, [r3, #24]
 80064b8:	4b06      	ldr	r3, [pc, #24]	@ (80064d4 <USB_DevInit+0x2b8>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80064c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3718      	adds	r7, #24
 80064c6:	46bd      	mov	sp, r7
 80064c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064cc:	b004      	add	sp, #16
 80064ce:	4770      	bx	lr
 80064d0:	803c3800 	.word	0x803c3800
 80064d4:	40000004 	.word	0x40000004

080064d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3301      	adds	r3, #1
 80064ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	4a13      	ldr	r2, [pc, #76]	@ (800653c <USB_FlushTxFifo+0x64>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d901      	bls.n	80064f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e01b      	b.n	8006530 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	daf2      	bge.n	80064e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006500:	2300      	movs	r3, #0
 8006502:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	019b      	lsls	r3, r3, #6
 8006508:	f043 0220 	orr.w	r2, r3, #32
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	3301      	adds	r3, #1
 8006514:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	4a08      	ldr	r2, [pc, #32]	@ (800653c <USB_FlushTxFifo+0x64>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d901      	bls.n	8006522 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e006      	b.n	8006530 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f003 0320 	and.w	r3, r3, #32
 800652a:	2b20      	cmp	r3, #32
 800652c:	d0f0      	beq.n	8006510 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	00030d40 	.word	0x00030d40

08006540 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	3301      	adds	r3, #1
 8006550:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	4a11      	ldr	r2, [pc, #68]	@ (800659c <USB_FlushRxFifo+0x5c>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d901      	bls.n	800655e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e018      	b.n	8006590 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	2b00      	cmp	r3, #0
 8006564:	daf2      	bge.n	800654c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006566:	2300      	movs	r3, #0
 8006568:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2210      	movs	r2, #16
 800656e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	3301      	adds	r3, #1
 8006574:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	4a08      	ldr	r2, [pc, #32]	@ (800659c <USB_FlushRxFifo+0x5c>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d901      	bls.n	8006582 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e006      	b.n	8006590 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	f003 0310 	and.w	r3, r3, #16
 800658a:	2b10      	cmp	r3, #16
 800658c:	d0f0      	beq.n	8006570 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	00030d40 	.word	0x00030d40

080065a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	460b      	mov	r3, r1
 80065aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	78fb      	ldrb	r3, [r7, #3]
 80065ba:	68f9      	ldr	r1, [r7, #12]
 80065bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065c0:	4313      	orrs	r3, r2
 80065c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b085      	sub	sp, #20
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80065ec:	f023 0303 	bic.w	r3, r3, #3
 80065f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006600:	f043 0302 	orr.w	r3, r3, #2
 8006604:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3714      	adds	r7, #20
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	f003 0301 	and.w	r3, r3, #1
}
 8006624:	4618      	mov	r0, r3
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006638:	2300      	movs	r3, #0
 800663a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	3301      	adds	r3, #1
 8006640:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	4a13      	ldr	r2, [pc, #76]	@ (8006694 <USB_CoreReset+0x64>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d901      	bls.n	800664e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e01b      	b.n	8006686 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	2b00      	cmp	r3, #0
 8006654:	daf2      	bge.n	800663c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006656:	2300      	movs	r3, #0
 8006658:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	f043 0201 	orr.w	r2, r3, #1
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	3301      	adds	r3, #1
 800666a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4a09      	ldr	r2, [pc, #36]	@ (8006694 <USB_CoreReset+0x64>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d901      	bls.n	8006678 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e006      	b.n	8006686 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	f003 0301 	and.w	r3, r3, #1
 8006680:	2b01      	cmp	r3, #1
 8006682:	d0f0      	beq.n	8006666 <USB_CoreReset+0x36>

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3714      	adds	r7, #20
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	00030d40 	.word	0x00030d40

08006698 <BMP390_Init>:
 * @param pHSPI Pointer to SPI_HandleTypeDef, handler for SPI communication.
 * @param CS_PORT GPIO_TypeDef pointer for the chip select port.
 * @param CS_PIN Chip select pin number.
 * @return uint8_t Status of initialization (BMP390_OK or BMP390_ERROR).
 */
static uint8_t BMP390_Init(BMP390_SPI* bar, SPI_HandleTypeDef* pHSPI, GPIO_TypeDef * CS_PORT, uint8_t CS_PIN) {
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
 80066a4:	70fb      	strb	r3, [r7, #3]
	// Store SPI Interface related data
	store_SPI_intf(bar, pHSPI, CS_PORT, CS_PIN);
 80066a6:	78fb      	ldrb	r3, [r7, #3]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	68b9      	ldr	r1, [r7, #8]
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 f853 	bl	8006758 <store_SPI_intf>

	// Check CHIP_ID
	uint8_t regAdr = BMP390_ADR_CHIP_ID;
 80066b2:	2300      	movs	r3, #0
 80066b4:	75fb      	strb	r3, [r7, #23]
	uint8_t regData;
	if(BMP390_SPI_READ_REG(bar,  &regAdr, &regData ) != HAL_OK)
 80066b6:	f107 0216 	add.w	r2, r7, #22
 80066ba:	f107 0317 	add.w	r3, r7, #23
 80066be:	4619      	mov	r1, r3
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f001 f899 	bl	80077f8 <BMP390_SPI_READ_REG>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d001      	beq.n	80066d0 <BMP390_Init+0x38>
		return BMP390_ERROR;
 80066cc:	23ff      	movs	r3, #255	@ 0xff
 80066ce:	e025      	b.n	800671c <BMP390_Init+0x84>
	if(regData != BMP390_CHIP_ID)
 80066d0:	7dbb      	ldrb	r3, [r7, #22]
 80066d2:	2b60      	cmp	r3, #96	@ 0x60
 80066d4:	d001      	beq.n	80066da <BMP390_Init+0x42>
		return BMP390_ERROR;
 80066d6:	23ff      	movs	r3, #255	@ 0xff
 80066d8:	e020      	b.n	800671c <BMP390_Init+0x84>

	//  Perform Soft Reset
	if(perform_soft_reset(bar) != BMP390_OK)
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f000 f8fa 	bl	80068d4 <perform_soft_reset>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <BMP390_Init+0x52>
		return BMP390_ERROR;
 80066e6:	23ff      	movs	r3, #255	@ 0xff
 80066e8:	e018      	b.n	800671c <BMP390_Init+0x84>

	// Get Calibration Coefficients
	if(BMP390_get_coeffs(bar) != BMP390_OK)
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f000 fa3b 	bl	8006b66 <BMP390_get_coeffs>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d001      	beq.n	80066fa <BMP390_Init+0x62>
		return BMP390_ERROR;
 80066f6:	23ff      	movs	r3, #255	@ 0xff
 80066f8:	e010      	b.n	800671c <BMP390_Init+0x84>

	// Set Drone Settings
	if(set_drone_settings(bar) != BMP390_OK) {
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f000 f8a5 	bl	800684a <set_drone_settings>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <BMP390_Init+0x72>
		return BMP390_ERROR;
 8006706:	23ff      	movs	r3, #255	@ 0xff
 8006708:	e008      	b.n	800671c <BMP390_Init+0x84>
	}
	if(set_normal_mode(bar)!= BMP390_OK)
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f000 f83d 	bl	800678a <set_normal_mode>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d001      	beq.n	800671a <BMP390_Init+0x82>
		return BMP390_ERROR;
 8006716:	23ff      	movs	r3, #255	@ 0xff
 8006718:	e000      	b.n	800671c <BMP390_Init+0x84>
	return BMP390_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3718      	adds	r7, #24
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <BMP390_START>:
 * @param bar Pointer to BMP390_SPI structure.
 * @param pHSPI Pointer to SPI_HandleTypeDef, handler for SPI communication.
 * @param CS_PORT GPIO_TypeDef pointer for the chip select port.
 * @param CS_PIN Chip select pin number.
 */
void BMP390_START(BMP390_SPI* bar, SPI_HandleTypeDef* pHSPI, GPIO_TypeDef * CS_PORT, uint8_t CS_PIN) {
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
 8006730:	70fb      	strb	r3, [r7, #3]
	bar->initSuccess = BMP390_ERROR;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	22ff      	movs	r2, #255	@ 0xff
 8006736:	725a      	strb	r2, [r3, #9]
	if(BMP390_Init(bar, pHSPI, CS_PORT, CS_PIN) == BMP390_OK) {
 8006738:	78fb      	ldrb	r3, [r7, #3]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	68b9      	ldr	r1, [r7, #8]
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f7ff ffaa 	bl	8006698 <BMP390_Init>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d102      	bne.n	8006750 <BMP390_START+0x2c>
		bar->initSuccess = BMP390_OK;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	725a      	strb	r2, [r3, #9]
	}
}
 8006750:	bf00      	nop
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <store_SPI_intf>:
 * @param bar Pointer to BMP390_SPI structure.
 * @param pHSPI Pointer to SPI_HandleTypeDef, handler for SPI communication.
 * @param CS_PORT GPIO_TypeDef pointer for the chip select port.
 * @param CS_PIN Chip select pin number.
 */
static void store_SPI_intf(BMP390_SPI* bar, SPI_HandleTypeDef* pHSPI, GPIO_TypeDef * CS_PORT, uint8_t CS_PIN) {
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
 8006764:	70fb      	strb	r3, [r7, #3]
	bar->pHSPI = pHSPI;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	601a      	str	r2, [r3, #0]
	bar->pSPI_GPIO_PORT = CS_PORT;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	605a      	str	r2, [r3, #4]
	bar->pSPI_GPIO_PIN = CS_PIN;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	78fa      	ldrb	r2, [r7, #3]
 8006776:	721a      	strb	r2, [r3, #8]
	bar->dummyByte = 1;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2201      	movs	r2, #1
 800677c:	729a      	strb	r2, [r3, #10]
}
 800677e:	bf00      	nop
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <set_normal_mode>:
 * @brief Sets the BMP390 sensor to normal mode after ensuring it is in sleep mode.
 *
 * @param bar Pointer to BMP390_SPI structure.
 * @return uint8_t Status of operation (BMP390_OK or BMP390_ERROR).
 */
static uint8_t set_normal_mode(BMP390_SPI* bar) {
 800678a:	b580      	push	{r7, lr}
 800678c:	b084      	sub	sp, #16
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
	// Check if sleep mode is on, if not, switch to sleep mode.
	uint8_t dataAdr = BMP390_ADR_PWR_CTRL;
 8006792:	231b      	movs	r3, #27
 8006794:	73bb      	strb	r3, [r7, #14]
	uint8_t dataRead;
	uint8_t dataWrite;
	uint8_t temp;

	if(BMP390_SPI_READ_REG(bar, &dataAdr, &dataRead) != HAL_OK)
 8006796:	f107 020d 	add.w	r2, r7, #13
 800679a:	f107 030e 	add.w	r3, r7, #14
 800679e:	4619      	mov	r1, r3
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f001 f829 	bl	80077f8 <BMP390_SPI_READ_REG>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <set_normal_mode+0x26>
		return BMP390_ERROR;
 80067ac:	23ff      	movs	r3, #255	@ 0xff
 80067ae:	e048      	b.n	8006842 <set_normal_mode+0xb8>
	temp = (dataRead & BMP390_PWR_CTRL_MODE_SLEEP) & 0x02;
 80067b0:	2300      	movs	r3, #0
 80067b2:	73fb      	strb	r3, [r7, #15]
	if((temp >> BMP390_PWR_CTRL_MODE_POS) != 0) {
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
 80067b6:	091b      	lsrs	r3, r3, #4
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d014      	beq.n	80067e8 <set_normal_mode+0x5e>
		// Switch to sleep mode
		dataWrite = dataRead & (~BMP390_PWR_CTRL_MODE_POS);
 80067be:	7b7b      	ldrb	r3, [r7, #13]
 80067c0:	f023 0304 	bic.w	r3, r3, #4
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	733b      	strb	r3, [r7, #12]
		if(BMP390_SPI_WRITE_REG(bar, &dataAdr, &dataWrite) != HAL_OK)
 80067c8:	f107 020c 	add.w	r2, r7, #12
 80067cc:	f107 030e 	add.w	r3, r7, #14
 80067d0:	4619      	mov	r1, r3
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f001 f850 	bl	8007878 <BMP390_SPI_WRITE_REG>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <set_normal_mode+0x58>
			return BMP390_ERROR;
 80067de:	23ff      	movs	r3, #255	@ 0xff
 80067e0:	e02f      	b.n	8006842 <set_normal_mode+0xb8>
		HAL_Delay(50);
 80067e2:	2032      	movs	r0, #50	@ 0x32
 80067e4:	f7fb faba 	bl	8001d5c <HAL_Delay>
	}

	// Set power mode to normal and enable press_en and temp_en
	dataWrite = BMP390_PWR_CTRL_PRRESS_EN_ON |
 80067e8:	2333      	movs	r3, #51	@ 0x33
 80067ea:	733b      	strb	r3, [r7, #12]
			         BMP390_PWR_CTRL_TEMP_EN_ON |
					 BMP390_PWR_CTRL_MODE_NORMAL;
	if(BMP390_SPI_WRITE_REG(bar, &dataAdr, &dataWrite) != HAL_OK)
 80067ec:	f107 020c 	add.w	r2, r7, #12
 80067f0:	f107 030e 	add.w	r3, r7, #14
 80067f4:	4619      	mov	r1, r3
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f001 f83e 	bl	8007878 <BMP390_SPI_WRITE_REG>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <set_normal_mode+0x7c>
		return BMP390_ERROR;
 8006802:	23ff      	movs	r3, #255	@ 0xff
 8006804:	e01d      	b.n	8006842 <set_normal_mode+0xb8>
	HAL_Delay(50);
 8006806:	2032      	movs	r0, #50	@ 0x32
 8006808:	f7fb faa8 	bl	8001d5c <HAL_Delay>

	// Check conf_err(offset 2) bit of the ERR_REG register
	dataAdr = BMP390_ADR_ERR_REG;
 800680c:	2302      	movs	r3, #2
 800680e:	73bb      	strb	r3, [r7, #14]
	if(BMP390_SPI_READ_REG(bar, &dataAdr, &dataRead) != HAL_OK)
 8006810:	f107 020d 	add.w	r2, r7, #13
 8006814:	f107 030e 	add.w	r3, r7, #14
 8006818:	4619      	mov	r1, r3
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 ffec 	bl	80077f8 <BMP390_SPI_READ_REG>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <set_normal_mode+0xa0>
		return BMP390_ERROR;
 8006826:	23ff      	movs	r3, #255	@ 0xff
 8006828:	e00b      	b.n	8006842 <set_normal_mode+0xb8>
	temp = (dataRead >> 2) & 0x01;
 800682a:	7b7b      	ldrb	r3, [r7, #13]
 800682c:	089b      	lsrs	r3, r3, #2
 800682e:	b2db      	uxtb	r3, r3
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	73fb      	strb	r3, [r7, #15]
	if(temp != 0)
 8006836:	7bfb      	ldrb	r3, [r7, #15]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d001      	beq.n	8006840 <set_normal_mode+0xb6>
		return BMP390_ERROR;
 800683c:	23ff      	movs	r3, #255	@ 0xff
 800683e:	e000      	b.n	8006842 <set_normal_mode+0xb8>
	return BMP390_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <set_drone_settings>:
 * settings.
 *
 * @param bar Pointer to BMP390_SPI structure.
 * @return uint8_t Status of setting drone-specific configurations (BMP390_OK or BMP390_ERROR).
 */
static uint8_t set_drone_settings(BMP390_SPI* bar) {
 800684a:	b580      	push	{r7, lr}
 800684c:	b084      	sub	sp, #16
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
	uint8_t dataAdr = BMP390_ADR_ODR;
 8006852:	231d      	movs	r3, #29
 8006854:	73fb      	strb	r3, [r7, #15]
	uint8_t dataWrite = BMP390_ODR_HZ_50;
 8006856:	2302      	movs	r3, #2
 8006858:	73bb      	strb	r3, [r7, #14]
	if(BMP390_SPI_WRITE_REG(bar, &dataAdr, &dataWrite) != BMP390_OK) {
 800685a:	f107 020e 	add.w	r2, r7, #14
 800685e:	f107 030f 	add.w	r3, r7, #15
 8006862:	4619      	mov	r1, r3
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f001 f807 	bl	8007878 <BMP390_SPI_WRITE_REG>
		BMP390_ERROR;
	}
	HAL_Delay(100);
 800686a:	2064      	movs	r0, #100	@ 0x64
 800686c:	f7fb fa76 	bl	8001d5c <HAL_Delay>

	dataAdr = BMP390_ADR_OSR;
 8006870:	231c      	movs	r3, #28
 8006872:	73fb      	strb	r3, [r7, #15]
	dataWrite = BMP390_OSR_PRESSURE_OVERSAMPLING_8X |
 8006874:	2303      	movs	r3, #3
 8006876:	73bb      	strb	r3, [r7, #14]
			              BMP390_OSR_TEMP_OVERSAMPLING_NONE;
	if(BMP390_SPI_WRITE_REG(bar, &dataAdr, &dataWrite) != BMP390_OK) {
 8006878:	f107 020e 	add.w	r2, r7, #14
 800687c:	f107 030f 	add.w	r3, r7, #15
 8006880:	4619      	mov	r1, r3
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fff8 	bl	8007878 <BMP390_SPI_WRITE_REG>
		BMP390_ERROR;
	}
	HAL_Delay(100);
 8006888:	2064      	movs	r0, #100	@ 0x64
 800688a:	f7fb fa67 	bl	8001d5c <HAL_Delay>

	dataAdr = BMP390_ADR_CONFIG;
 800688e:	231f      	movs	r3, #31
 8006890:	73fb      	strb	r3, [r7, #15]
	dataWrite = BMP390_CONFIG_IIR_FILTER_COEF3;
 8006892:	2304      	movs	r3, #4
 8006894:	73bb      	strb	r3, [r7, #14]
	if(BMP390_SPI_WRITE_REG(bar, &dataAdr, &dataWrite) != BMP390_OK) {
 8006896:	f107 020e 	add.w	r2, r7, #14
 800689a:	f107 030f 	add.w	r3, r7, #15
 800689e:	4619      	mov	r1, r3
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 ffe9 	bl	8007878 <BMP390_SPI_WRITE_REG>
		BMP390_ERROR;
	}
	HAL_Delay(100);
 80068a6:	2064      	movs	r0, #100	@ 0x64
 80068a8:	f7fb fa58 	bl	8001d5c <HAL_Delay>

	dataAdr = BMP390_ADR_INT_CTRL;
 80068ac:	2319      	movs	r3, #25
 80068ae:	73fb      	strb	r3, [r7, #15]
	dataWrite = BMP390_INT_CTRL_DRDY_EN_ENABLE;
 80068b0:	2320      	movs	r3, #32
 80068b2:	73bb      	strb	r3, [r7, #14]
	if(BMP390_SPI_WRITE_REG(bar, &dataAdr, &dataWrite) != BMP390_OK) {
 80068b4:	f107 020e 	add.w	r2, r7, #14
 80068b8:	f107 030f 	add.w	r3, r7, #15
 80068bc:	4619      	mov	r1, r3
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 ffda 	bl	8007878 <BMP390_SPI_WRITE_REG>
		BMP390_ERROR;
	}
	HAL_Delay(100);
 80068c4:	2064      	movs	r0, #100	@ 0x64
 80068c6:	f7fb fa49 	bl	8001d5c <HAL_Delay>

	return BMP390_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <perform_soft_reset>:
 * @brief Performs a software reset of the BMP390 sensor.
 *
 * @param bar Pointer to BMP390_SPI structure.
 * @return uint8_t Status of the soft reset (BMP390_OK or BMP390_ERROR).
 */
static uint8_t perform_soft_reset(BMP390_SPI* bar) {
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
	uint8_t regAdr = BMP390_ADR_STATUS;
 80068dc:	2303      	movs	r3, #3
 80068de:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;
	if(BMP390_SPI_READ_REG(bar, &regAdr, &regData) != HAL_OK)
 80068e0:	f107 020e 	add.w	r2, r7, #14
 80068e4:	f107 030f 	add.w	r3, r7, #15
 80068e8:	4619      	mov	r1, r3
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 ff84 	bl	80077f8 <BMP390_SPI_READ_REG>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <perform_soft_reset+0x26>
		return BMP390_ERROR;
 80068f6:	23ff      	movs	r3, #255	@ 0xff
 80068f8:	e02c      	b.n	8006954 <perform_soft_reset+0x80>

	if((regData && BMP390_STATUS_CMD_RDY_POS)) {
 80068fa:	7bbb      	ldrb	r3, [r7, #14]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d028      	beq.n	8006952 <perform_soft_reset+0x7e>
		regAdr = BMP390_ADR_CMD;
 8006900:	237e      	movs	r3, #126	@ 0x7e
 8006902:	73fb      	strb	r3, [r7, #15]
		regData = BMP390_CMD_SOFT_RESET;
 8006904:	23b6      	movs	r3, #182	@ 0xb6
 8006906:	73bb      	strb	r3, [r7, #14]

		if(BMP390_SPI_WRITE_REG(bar, &regAdr, &regData) != HAL_OK)
 8006908:	f107 020e 	add.w	r2, r7, #14
 800690c:	f107 030f 	add.w	r3, r7, #15
 8006910:	4619      	mov	r1, r3
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 ffb0 	bl	8007878 <BMP390_SPI_WRITE_REG>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <perform_soft_reset+0x4e>
			return BMP390_ERROR;
 800691e:	23ff      	movs	r3, #255	@ 0xff
 8006920:	e018      	b.n	8006954 <perform_soft_reset+0x80>
		HAL_Delay(2000);
 8006922:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8006926:	f7fb fa19 	bl	8001d5c <HAL_Delay>

		regAdr = BMP390_ADR_ERR_REG;
 800692a:	2302      	movs	r3, #2
 800692c:	73fb      	strb	r3, [r7, #15]
		if(BMP390_SPI_READ_REG(bar, &regAdr, &regData) != HAL_OK)
 800692e:	f107 020e 	add.w	r2, r7, #14
 8006932:	f107 030f 	add.w	r3, r7, #15
 8006936:	4619      	mov	r1, r3
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 ff5d 	bl	80077f8 <BMP390_SPI_READ_REG>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d001      	beq.n	8006948 <perform_soft_reset+0x74>
			return BMP390_ERROR;
 8006944:	23ff      	movs	r3, #255	@ 0xff
 8006946:	e005      	b.n	8006954 <perform_soft_reset+0x80>
		if(regData)
 8006948:	7bbb      	ldrb	r3, [r7, #14]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <perform_soft_reset+0x7e>
			return BMP390_ERROR;
 800694e:	23ff      	movs	r3, #255	@ 0xff
 8006950:	e000      	b.n	8006954 <perform_soft_reset+0x80>
	}
	return BMP390_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	0000      	movs	r0, r0
	...

08006960 <BMP390_Get_Altitude>:
 * measured pressure. It assumes a standard sea level pressure for the calculation.
 *
 * @param bar Pointer to BMP390_SPI structure containing the sensor's operational context.
 * @return uint64_t Calculated altitude in meters.
 */
uint64_t BMP390_Get_Altitude(BMP390_SPI* bar) {
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
	uint64_t pressure = BMP390_get_pressure(bar);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 f845 	bl	80069f8 <BMP390_get_pressure>
 800696e:	e9c7 0104 	strd	r0, r1, [r7, #16]
	int64_t altitude = 44330 * (1 - pow((float)(pressure/PRESSURE_SEA_LEVEL_PA), 1/5.255));
 8006972:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006976:	f7fa f9cb 	bl	8000d10 <__aeabi_ul2f>
 800697a:	ee06 0a90 	vmov	s13, r0
 800697e:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 80069f0 <BMP390_Get_Altitude+0x90>
 8006982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006986:	ee17 0a10 	vmov	r0, s14
 800698a:	f7f9 fda1 	bl	80004d0 <__aeabi_f2d>
 800698e:	4602      	mov	r2, r0
 8006990:	460b      	mov	r3, r1
 8006992:	ed9f 1b13 	vldr	d1, [pc, #76]	@ 80069e0 <BMP390_Get_Altitude+0x80>
 8006996:	ec43 2b10 	vmov	d0, r2, r3
 800699a:	f001 faa5 	bl	8007ee8 <pow>
 800699e:	ec53 2b10 	vmov	r2, r3, d0
 80069a2:	f04f 0000 	mov.w	r0, #0
 80069a6:	4913      	ldr	r1, [pc, #76]	@ (80069f4 <BMP390_Get_Altitude+0x94>)
 80069a8:	f7f9 fc32 	bl	8000210 <__aeabi_dsub>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	4610      	mov	r0, r2
 80069b2:	4619      	mov	r1, r3
 80069b4:	a30c      	add	r3, pc, #48	@ (adr r3, 80069e8 <BMP390_Get_Altitude+0x88>)
 80069b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ba:	f7f9 fde1 	bl	8000580 <__aeabi_dmul>
 80069be:	4602      	mov	r2, r0
 80069c0:	460b      	mov	r3, r1
 80069c2:	4610      	mov	r0, r2
 80069c4:	4619      	mov	r1, r3
 80069c6:	f7fa fa51 	bl	8000e6c <__aeabi_d2lz>
 80069ca:	4602      	mov	r2, r0
 80069cc:	460b      	mov	r3, r1
 80069ce:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return altitude;
 80069d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80069d6:	4610      	mov	r0, r2
 80069d8:	4619      	mov	r1, r3
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	ccd9456c 	.word	0xccd9456c
 80069e4:	3fc85b95 	.word	0x3fc85b95
 80069e8:	00000000 	.word	0x00000000
 80069ec:	40e5a540 	.word	0x40e5a540
 80069f0:	47c5e680 	.word	0x47c5e680
 80069f4:	3ff00000 	.word	0x3ff00000

080069f8 <BMP390_get_pressure>:
 * the calibration data, and then returns the compensated pressure.
 *
 * @param bar Pointer to BMP390_SPI structure containing the sensor's operational context.
 * @return uint64_t Compensated pressure value.
 */
static uint64_t BMP390_get_pressure(BMP390_SPI*  bar) {
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b08c      	sub	sp, #48	@ 0x30
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
	if(bar->initSuccess != BMP390_OK)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	7a5b      	ldrb	r3, [r3, #9]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d004      	beq.n	8006a12 <BMP390_get_pressure+0x1a>
		return 0;
 8006a08:	f04f 0200 	mov.w	r2, #0
 8006a0c:	f04f 0300 	mov.w	r3, #0
 8006a10:	e050      	b.n	8006ab4 <BMP390_get_pressure+0xbc>
	uint8_t dataAdress = BMP390_ADR_DATA0;
 8006a12:	2304      	movs	r3, #4
 8006a14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t dataArr[BMP390_DATA_REGS_LEN] = { 0 };
 8006a18:	2300      	movs	r3, #0
 8006a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	85bb      	strh	r3, [r7, #44]	@ 0x2c

	BMP390_data_t uncomp_data = { 0 };
 8006a20:	f107 0318 	add.w	r3, r7, #24
 8006a24:	2200      	movs	r2, #0
 8006a26:	601a      	str	r2, [r3, #0]
 8006a28:	605a      	str	r2, [r3, #4]
 8006a2a:	609a      	str	r2, [r3, #8]
 8006a2c:	60da      	str	r2, [r3, #12]
	BMP390_data_t comp_data = { 0 };
 8006a2e:	f107 0308 	add.w	r3, r7, #8
 8006a32:	2200      	movs	r2, #0
 8006a34:	601a      	str	r2, [r3, #0]
 8006a36:	605a      	str	r2, [r3, #4]
 8006a38:	609a      	str	r2, [r3, #8]
 8006a3a:	60da      	str	r2, [r3, #12]


	if(BMP390_SPI_READ_MULTIPLE_REGS(bar, &dataAdress, dataArr, BMP390_DATA_REGS_LEN) != HAL_OK)
 8006a3c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8006a40:	f107 012f 	add.w	r1, r7, #47	@ 0x2f
 8006a44:	2306      	movs	r3, #6
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fe96 	bl	8007778 <BMP390_SPI_READ_MULTIPLE_REGS>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d004      	beq.n	8006a5c <BMP390_get_pressure+0x64>
		return 0;
 8006a52:	f04f 0200 	mov.w	r2, #0
 8006a56:	f04f 0300 	mov.w	r3, #0
 8006a5a:	e02b      	b.n	8006ab4 <BMP390_get_pressure+0xbc>

	if(parse_sensor_data(dataArr, &uncomp_data) != BMP390_OK) {
 8006a5c:	f107 0218 	add.w	r2, r7, #24
 8006a60:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006a64:	4611      	mov	r1, r2
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 f841 	bl	8006aee <parse_sensor_data>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d004      	beq.n	8006a7c <BMP390_get_pressure+0x84>
		return 0;
 8006a72:	f04f 0200 	mov.w	r2, #0
 8006a76:	f04f 0300 	mov.w	r3, #0
 8006a7a:	e01b      	b.n	8006ab4 <BMP390_get_pressure+0xbc>
	}

	if(get_comp_data(bar, &uncomp_data, &comp_data) != BMP390_OK) {
 8006a7c:	f107 0208 	add.w	r2, r7, #8
 8006a80:	f107 0318 	add.w	r3, r7, #24
 8006a84:	4619      	mov	r1, r3
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f819 	bl	8006abe <get_comp_data>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d004      	beq.n	8006a9c <BMP390_get_pressure+0xa4>
		return 0;
 8006a92:	f04f 0200 	mov.w	r2, #0
 8006a96:	f04f 0300 	mov.w	r3, #0
 8006a9a:	e00b      	b.n	8006ab4 <BMP390_get_pressure+0xbc>
	}
	bar->calib_data.temperature = comp_data.temperature;
 8006a9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006aa0:	6879      	ldr	r1, [r7, #4]
 8006aa2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	bar->calib_data.pressure = comp_data.pressure;
 8006aa6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006aaa:	6879      	ldr	r1, [r7, #4]
 8006aac:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

	return comp_data.pressure;
 8006ab0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	3730      	adds	r7, #48	@ 0x30
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <get_comp_data>:
 * @param bar Pointer to BMP390_SPI structure.
 * @param uncomp_data Pointer to the structure holding raw sensor data.
 * @param comp_data Pointer to the structure where compensated data will be stored.
 * @return uint8_t Status of the data compensation (BMP390_OK or error code).
 */
static uint8_t get_comp_data(BMP390_SPI* bar, BMP390_data_t* uncomp_data, BMP390_data_t* comp_data) {
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b084      	sub	sp, #16
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	60f8      	str	r0, [r7, #12]
 8006ac6:	60b9      	str	r1, [r7, #8]
 8006ac8:	607a      	str	r2, [r7, #4]

	BMP390_compensate_temperature(bar, uncomp_data, &comp_data->temperature);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	461a      	mov	r2, r3
 8006ace:	68b9      	ldr	r1, [r7, #8]
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f000 f907 	bl	8006ce4 <BMP390_compensate_temperature>

	BMP390_compensate_pressure(bar, uncomp_data, &comp_data->pressure);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	3308      	adds	r3, #8
 8006ada:	461a      	mov	r2, r3
 8006adc:	68b9      	ldr	r1, [r7, #8]
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f000 fa1e 	bl	8006f20 <BMP390_compensate_pressure>

	return BMP390_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <parse_sensor_data>:
 *
 * @param dataArr Array of raw data bytes read from the sensor.
 * @param uncomp_data Pointer to the structure where the parsed data will be stored.
 * @return uint8_t Status of the parsing operation (BMP390_OK or error code).
 */
static uint8_t parse_sensor_data(uint8_t* dataArr, BMP390_data_t* uncomp_data) {
 8006aee:	b4b0      	push	{r4, r5, r7}
 8006af0:	b087      	sub	sp, #28
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	6039      	str	r1, [r7, #0]
	uint32_t  dataXLSB;
	uint32_t  dataLSB;
	uint32_t  dataMSB;

	// Parsing Pressure Data
	dataXLSB = (uint32_t)dataArr[0];
 8006af8:	6879      	ldr	r1, [r7, #4]
 8006afa:	7809      	ldrb	r1, [r1, #0]
 8006afc:	6179      	str	r1, [r7, #20]
	dataLSB = (uint32_t)dataArr[1] << 8;
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	3101      	adds	r1, #1
 8006b02:	7809      	ldrb	r1, [r1, #0]
 8006b04:	0209      	lsls	r1, r1, #8
 8006b06:	6139      	str	r1, [r7, #16]
	dataMSB = (uint32_t)dataArr[2] << 16;
 8006b08:	6879      	ldr	r1, [r7, #4]
 8006b0a:	3102      	adds	r1, #2
 8006b0c:	7809      	ldrb	r1, [r1, #0]
 8006b0e:	0409      	lsls	r1, r1, #16
 8006b10:	60f9      	str	r1, [r7, #12]
	uncomp_data->pressure = dataXLSB | dataLSB | dataMSB;
 8006b12:	6978      	ldr	r0, [r7, #20]
 8006b14:	6939      	ldr	r1, [r7, #16]
 8006b16:	4308      	orrs	r0, r1
 8006b18:	68f9      	ldr	r1, [r7, #12]
 8006b1a:	4301      	orrs	r1, r0
 8006b1c:	2000      	movs	r0, #0
 8006b1e:	460c      	mov	r4, r1
 8006b20:	4605      	mov	r5, r0
 8006b22:	6839      	ldr	r1, [r7, #0]
 8006b24:	e9c1 4502 	strd	r4, r5, [r1, #8]

	// Parsing Pressure Data
	dataXLSB = (uint32_t)dataArr[3];
 8006b28:	6879      	ldr	r1, [r7, #4]
 8006b2a:	3103      	adds	r1, #3
 8006b2c:	7809      	ldrb	r1, [r1, #0]
 8006b2e:	6179      	str	r1, [r7, #20]
	dataLSB = (uint32_t)dataArr[4] << 8;
 8006b30:	6879      	ldr	r1, [r7, #4]
 8006b32:	3104      	adds	r1, #4
 8006b34:	7809      	ldrb	r1, [r1, #0]
 8006b36:	0209      	lsls	r1, r1, #8
 8006b38:	6139      	str	r1, [r7, #16]
	dataMSB = (uint32_t)dataArr[5] << 16;
 8006b3a:	6879      	ldr	r1, [r7, #4]
 8006b3c:	3105      	adds	r1, #5
 8006b3e:	7809      	ldrb	r1, [r1, #0]
 8006b40:	0409      	lsls	r1, r1, #16
 8006b42:	60f9      	str	r1, [r7, #12]
	uncomp_data->temperature = dataXLSB | dataLSB | dataMSB;
 8006b44:	6978      	ldr	r0, [r7, #20]
 8006b46:	6939      	ldr	r1, [r7, #16]
 8006b48:	4308      	orrs	r0, r1
 8006b4a:	68f9      	ldr	r1, [r7, #12]
 8006b4c:	4301      	orrs	r1, r0
 8006b4e:	2000      	movs	r0, #0
 8006b50:	460a      	mov	r2, r1
 8006b52:	4603      	mov	r3, r0
 8006b54:	6839      	ldr	r1, [r7, #0]
 8006b56:	e9c1 2300 	strd	r2, r3, [r1]

	return BMP390_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	371c      	adds	r7, #28
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bcb0      	pop	{r4, r5, r7}
 8006b64:	4770      	bx	lr

08006b66 <BMP390_get_coeffs>:
 * measurements and are stored in the BMP390_SPI structure for future calculations.
 *
 * @param bar Pointer to the BMP390_SPI structure.
 * @return uint8_t Returns BMP390_OK if the operation was successful, otherwise returns BMP390_ERROR.
 */
static uint8_t BMP390_get_coeffs(BMP390_SPI* bar) {
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b088      	sub	sp, #32
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
	uint8_t dataFirstADR =  BMP390_ADR_FIRST_CALIB_COEFF;
 8006b6e:	2331      	movs	r3, #49	@ 0x31
 8006b70:	77fb      	strb	r3, [r7, #31]
	uint8_t calib_coeffs[BMP390_CALIB_COEFF_SIZE] = {0};
 8006b72:	2300      	movs	r3, #0
 8006b74:	60bb      	str	r3, [r7, #8]
 8006b76:	f107 030c 	add.w	r3, r7, #12
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	601a      	str	r2, [r3, #0]
 8006b7e:	605a      	str	r2, [r3, #4]
 8006b80:	609a      	str	r2, [r3, #8]
 8006b82:	60da      	str	r2, [r3, #12]
 8006b84:	741a      	strb	r2, [r3, #16]
	if(BMP390_SPI_READ_MULTIPLE_REGS(bar, &dataFirstADR, calib_coeffs, BMP390_CALIB_COEFF_SIZE)
 8006b86:	f107 0208 	add.w	r2, r7, #8
 8006b8a:	f107 011f 	add.w	r1, r7, #31
 8006b8e:	2315      	movs	r3, #21
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fdf1 	bl	8007778 <BMP390_SPI_READ_MULTIPLE_REGS>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d001      	beq.n	8006ba0 <BMP390_get_coeffs+0x3a>
			!= HAL_OK)
		return BMP390_ERROR;
 8006b9c:	23ff      	movs	r3, #255	@ 0xff
 8006b9e:	e006      	b.n	8006bae <BMP390_get_coeffs+0x48>
	BMP390_set_calibs(bar, calib_coeffs);
 8006ba0:	f107 0308 	add.w	r3, r7, #8
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f805 	bl	8006bb6 <BMP390_set_calibs>
	return BMP390_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3720      	adds	r7, #32
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <BMP390_set_calibs>:
 * @param bar Pointer to the BMP390_SPI structure. calibration coefficients are stored
 * in bar->calib_coeffs.
 * @param reg_data Array containing the raw calibration data read from the sensor.
 * @return uint8_t Returns BMP390_OK if the calibration data was stored successfully, otherwise returns BMP390_ERROR.
 */
static uint8_t BMP390_set_calibs(BMP390_SPI* bar, uint8_t* reg_data) {
 8006bb6:	b480      	push	{r7}
 8006bb8:	b085      	sub	sp, #20
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
 8006bbe:	6039      	str	r1, [r7, #0]
	BMP390_calibData_t* cD = &bar->calib_coeffs;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	3310      	adds	r3, #16
 8006bc4:	60fb      	str	r3, [r7, #12]
	cD->t1 = BMP390_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	021b      	lsls	r3, r3, #8
 8006bce:	b21a      	sxth	r2, r3
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	b21b      	sxth	r3, r3
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	b21b      	sxth	r3, r3
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	801a      	strh	r2, [r3, #0]
	cD->t2 = BMP390_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	3303      	adds	r3, #3
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	021b      	lsls	r3, r3, #8
 8006be8:	b21a      	sxth	r2, r3
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	3302      	adds	r3, #2
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	b21b      	sxth	r3, r3
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	b21b      	sxth	r3, r3
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	805a      	strh	r2, [r3, #2]
	cD->t3 = (int8_t)reg_data[4];
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	3304      	adds	r3, #4
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	b25a      	sxtb	r2, r3
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	711a      	strb	r2, [r3, #4]
	cD->p1 = (int16_t)BMP390_CONCAT_BYTES(reg_data[6], reg_data[5]);
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	3306      	adds	r3, #6
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	021b      	lsls	r3, r3, #8
 8006c10:	b21a      	sxth	r2, r3
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	3305      	adds	r3, #5
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	b21b      	sxth	r3, r3
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	b21a      	sxth	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	80da      	strh	r2, [r3, #6]
	cD->p2 = (int16_t)BMP390_CONCAT_BYTES(reg_data[8], reg_data[7]);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	3308      	adds	r3, #8
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	021b      	lsls	r3, r3, #8
 8006c2a:	b21a      	sxth	r2, r3
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	3307      	adds	r3, #7
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	b21b      	sxth	r3, r3
 8006c34:	4313      	orrs	r3, r2
 8006c36:	b21a      	sxth	r2, r3
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	811a      	strh	r2, [r3, #8]
	cD->p3 = (int8_t)reg_data[9];
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	3309      	adds	r3, #9
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	b25a      	sxtb	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	729a      	strb	r2, [r3, #10]
	cD->p4 = (int8_t)reg_data[10];
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	330a      	adds	r3, #10
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	b25a      	sxtb	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	72da      	strb	r2, [r3, #11]
	cD->p5 = BMP390_CONCAT_BYTES(reg_data[12], reg_data[11]);
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	330c      	adds	r3, #12
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	021b      	lsls	r3, r3, #8
 8006c5c:	b21a      	sxth	r2, r3
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	330b      	adds	r3, #11
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	b21b      	sxth	r3, r3
 8006c66:	4313      	orrs	r3, r2
 8006c68:	b21b      	sxth	r3, r3
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	819a      	strh	r2, [r3, #12]
	cD->p6 = BMP390_CONCAT_BYTES(reg_data[14], reg_data[13]);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	330e      	adds	r3, #14
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	021b      	lsls	r3, r3, #8
 8006c78:	b21a      	sxth	r2, r3
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	330d      	adds	r3, #13
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	b21b      	sxth	r3, r3
 8006c82:	4313      	orrs	r3, r2
 8006c84:	b21b      	sxth	r3, r3
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	81da      	strh	r2, [r3, #14]
	cD->p7 = (int8_t)reg_data[15];
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	330f      	adds	r3, #15
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	b25a      	sxtb	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	741a      	strb	r2, [r3, #16]
	cD->p8 = (int8_t)reg_data[16];
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	3310      	adds	r3, #16
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	b25a      	sxtb	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	745a      	strb	r2, [r3, #17]
	cD->p9 = (int16_t)BMP390_CONCAT_BYTES(reg_data[18], reg_data[17]);
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	3312      	adds	r3, #18
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	021b      	lsls	r3, r3, #8
 8006cac:	b21a      	sxth	r2, r3
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	3311      	adds	r3, #17
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	b21b      	sxth	r3, r3
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	b21a      	sxth	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	825a      	strh	r2, [r3, #18]
	cD->p10 = (int8_t)reg_data[19];
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	3313      	adds	r3, #19
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	b25a      	sxtb	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	751a      	strb	r2, [r3, #20]
	cD->p11 = (int8_t)reg_data[20];
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	3314      	adds	r3, #20
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	b25a      	sxtb	r2, r3
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	755a      	strb	r2, [r3, #21]
	return BMP390_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <BMP390_compensate_temperature>:
 * @param bar Pointer to the BMP390_SPI structure containing calibration data.
 * @param uncomp_data Pointer to structure holding raw sensor data.
 * @param temperature Pointer to store the compensated temperature value.
 * @return int64_t Returns BMP390_OK if the temperature is successfully compensated, otherwise returns an error code.
 */
static uint8_t BMP390_compensate_temperature(BMP390_SPI* bar, BMP390_data_t* uncomp_data, int64_t* temperature) {
 8006ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ce8:	b0a8      	sub	sp, #160	@ 0xa0
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6678      	str	r0, [r7, #100]	@ 0x64
 8006cee:	6639      	str	r1, [r7, #96]	@ 0x60
 8006cf0:	65fa      	str	r2, [r7, #92]	@ 0x5c
	int64_t partial_data4;
	int64_t partial_data5;
	int64_t partial_data6;
	int64_t comp_temp;

	partial_data1 = (int64_t)(uncomp_data->temperature - ((int64_t)256 * bar->calib_coeffs.t1));
 8006cf2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006cf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006cf8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cfa:	8a1b      	ldrh	r3, [r3, #16]
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	2200      	movs	r2, #0
 8006d00:	461c      	mov	r4, r3
 8006d02:	4615      	mov	r5, r2
 8006d04:	f04f 0200 	mov.w	r2, #0
 8006d08:	f04f 0300 	mov.w	r3, #0
 8006d0c:	022b      	lsls	r3, r5, #8
 8006d0e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006d12:	0222      	lsls	r2, r4, #8
 8006d14:	1a84      	subs	r4, r0, r2
 8006d16:	623c      	str	r4, [r7, #32]
 8006d18:	eb61 0303 	sbc.w	r3, r1, r3
 8006d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d1e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8006d22:	e9c7 3424 	strd	r3, r4, [r7, #144]	@ 0x90
	partial_data2 = (int64_t)(bar->calib_coeffs.t2 * partial_data1);
 8006d26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d28:	8a5b      	ldrh	r3, [r3, #18]
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d30:	647a      	str	r2, [r7, #68]	@ 0x44
 8006d32:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006d36:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8006d3a:	4622      	mov	r2, r4
 8006d3c:	fb02 f203 	mul.w	r2, r2, r3
 8006d40:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006d44:	4629      	mov	r1, r5
 8006d46:	fb01 f303 	mul.w	r3, r1, r3
 8006d4a:	441a      	add	r2, r3
 8006d4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006d50:	4621      	mov	r1, r4
 8006d52:	fba3 8901 	umull	r8, r9, r3, r1
 8006d56:	eb02 0309 	add.w	r3, r2, r9
 8006d5a:	4699      	mov	r9, r3
 8006d5c:	e9c7 8922 	strd	r8, r9, [r7, #136]	@ 0x88
 8006d60:	e9c7 8922 	strd	r8, r9, [r7, #136]	@ 0x88
	partial_data3 = (int64_t)(partial_data1 * partial_data1);
 8006d64:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006d68:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006d6c:	fb03 f102 	mul.w	r1, r3, r2
 8006d70:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006d74:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006d78:	fb02 f303 	mul.w	r3, r2, r3
 8006d7c:	18ca      	adds	r2, r1, r3
 8006d7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006d82:	fba3 1303 	umull	r1, r3, r3, r3
 8006d86:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d88:	460b      	mov	r3, r1
 8006d8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d8e:	18d3      	adds	r3, r2, r3
 8006d90:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d92:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 8006d96:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
 8006d9a:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
	partial_data4 = (int64_t)partial_data3 * bar->calib_coeffs.t3;
 8006d9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006da0:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8006da4:	b25b      	sxtb	r3, r3
 8006da6:	17da      	asrs	r2, r3, #31
 8006da8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006daa:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006db0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8006db4:	4622      	mov	r2, r4
 8006db6:	fb02 f203 	mul.w	r2, r2, r3
 8006dba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	fb01 f303 	mul.w	r3, r1, r3
 8006dc4:	441a      	add	r2, r3
 8006dc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006dca:	4621      	mov	r1, r4
 8006dcc:	fba3 1301 	umull	r1, r3, r3, r1
 8006dd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dd8:	18d3      	adds	r3, r2, r3
 8006dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ddc:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8006de0:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
 8006de4:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
	partial_data5 = (int64_t)((int64_t)(partial_data2 * 262144) + partial_data4);
 8006de8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006dec:	f04f 0000 	mov.w	r0, #0
 8006df0:	f04f 0100 	mov.w	r1, #0
 8006df4:	0499      	lsls	r1, r3, #18
 8006df6:	ea41 3192 	orr.w	r1, r1, r2, lsr #14
 8006dfa:	0490      	lsls	r0, r2, #18
 8006dfc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8006e00:	1814      	adds	r4, r2, r0
 8006e02:	61bc      	str	r4, [r7, #24]
 8006e04:	414b      	adcs	r3, r1
 8006e06:	61fb      	str	r3, [r7, #28]
 8006e08:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8006e0c:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
	partial_data6 = (int64_t)(partial_data5 / 4294967296);
 8006e10:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006e14:	4610      	mov	r0, r2
 8006e16:	4619      	mov	r1, r3
 8006e18:	2900      	cmp	r1, #0
 8006e1a:	da06      	bge.n	8006e2a <BMP390_compensate_temperature+0x146>
 8006e1c:	1e43      	subs	r3, r0, #1
 8006e1e:	613b      	str	r3, [r7, #16]
 8006e20:	f141 0300 	adc.w	r3, r1, #0
 8006e24:	617b      	str	r3, [r7, #20]
 8006e26:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006e2a:	f04f 0200 	mov.w	r2, #0
 8006e2e:	f04f 0300 	mov.w	r3, #0
 8006e32:	000a      	movs	r2, r1
 8006e34:	17cb      	asrs	r3, r1, #31
 8006e36:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

    /* Store t_lin in dev. structure for pressure calculation */
	bar->calib_coeffs.t_lin = (int64_t)partial_data6;
 8006e3a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006e3c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8006e40:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    comp_temp = (int64_t)((partial_data6 * 25) / 16384);
 8006e44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006e48:	4602      	mov	r2, r0
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	1894      	adds	r4, r2, r2
 8006e4e:	60bc      	str	r4, [r7, #8]
 8006e50:	415b      	adcs	r3, r3
 8006e52:	60fb      	str	r3, [r7, #12]
 8006e54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e58:	eb12 0a00 	adds.w	sl, r2, r0
 8006e5c:	eb43 0b01 	adc.w	fp, r3, r1
 8006e60:	f04f 0200 	mov.w	r2, #0
 8006e64:	f04f 0300 	mov.w	r3, #0
 8006e68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e74:	4692      	mov	sl, r2
 8006e76:	469b      	mov	fp, r3
 8006e78:	eb1a 0300 	adds.w	r3, sl, r0
 8006e7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e7e:	eb4b 0301 	adc.w	r3, fp, r1
 8006e82:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e84:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	da08      	bge.n	8006e9e <BMP390_compensate_temperature+0x1ba>
 8006e8c:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 8006e90:	1851      	adds	r1, r2, r1
 8006e92:	6039      	str	r1, [r7, #0]
 8006e94:	f143 0300 	adc.w	r3, r3, #0
 8006e98:	607b      	str	r3, [r7, #4]
 8006e9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e9e:	f04f 0000 	mov.w	r0, #0
 8006ea2:	f04f 0100 	mov.w	r1, #0
 8006ea6:	0b90      	lsrs	r0, r2, #14
 8006ea8:	ea40 4083 	orr.w	r0, r0, r3, lsl #18
 8006eac:	1399      	asrs	r1, r3, #14
 8006eae:	e9c7 0126 	strd	r0, r1, [r7, #152]	@ 0x98

    if (comp_temp < BMP390_MIN_TEMP_INT)
 8006eb2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8006eb6:	f112 0f28 	cmn.w	r2, #40	@ 0x28
 8006eba:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8006ebe:	da05      	bge.n	8006ecc <BMP390_compensate_temperature+0x1e8>
    {
        comp_temp = BMP390_MIN_TEMP_INT;
 8006ec0:	f06f 0227 	mvn.w	r2, #39	@ 0x27
 8006ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec8:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
    }

    if (comp_temp > BMP390_MAX_TEMP_INT)
 8006ecc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8006ed0:	2a56      	cmp	r2, #86	@ 0x56
 8006ed2:	f173 0300 	sbcs.w	r3, r3, #0
 8006ed6:	db05      	blt.n	8006ee4 <BMP390_compensate_temperature+0x200>
    {
        comp_temp = BMP390_MAX_TEMP_INT;
 8006ed8:	f04f 0255 	mov.w	r2, #85	@ 0x55
 8006edc:	f04f 0300 	mov.w	r3, #0
 8006ee0:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
    }

    (*temperature) = comp_temp/10 + BMP390_TEMP_OFFSET_VAL;
 8006ee4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006ee8:	f04f 020a 	mov.w	r2, #10
 8006eec:	f04f 0300 	mov.w	r3, #0
 8006ef0:	f7f9 ff54 	bl	8000d9c <__aeabi_ldivmod>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	f112 0111 	adds.w	r1, r2, #17
 8006efc:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006efe:	f143 0300 	adc.w	r3, r3, #0
 8006f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f06:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006f0a:	e9c3 1200 	strd	r1, r2, [r3]
    return BMP390_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	37a0      	adds	r7, #160	@ 0xa0
 8006f14:	46bd      	mov	sp, r7
 8006f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f1a:	0000      	movs	r0, r0
 8006f1c:	0000      	movs	r0, r0
	...

08006f20 <BMP390_compensate_pressure>:
 * @param bar Pointer to BMP390_SPI structure containing calibration data and sensor configuration.
 * @param uncomp_data Pointer to structure holding raw sensor data.
 * @param pressure Pointer to store the compensated pressure value.
 * @return uint8_t Returns BMP390_OK if the pressure is successfully compensated, otherwise returns an error code.
 */
static uint8_t BMP390_compensate_pressure(BMP390_SPI* bar, BMP390_data_t* uncomp_data, uint64_t* pressure) {
 8006f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f24:	b0f6      	sub	sp, #472	@ 0x1d8
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 8006f2c:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
 8006f30:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
	/* Variable to store the compensated pressure */
    BMP390_calibData_t *reg_calib_data = &bar->calib_coeffs;
 8006f34:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006f38:	3310      	adds	r3, #16
 8006f3a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
    int64_t partial_data6;
    int64_t offset;
    int64_t sensitivity;
    uint64_t comp_press;

    partial_data1 = (int64_t)(reg_calib_data->t_lin * reg_calib_data->t_lin);
 8006f3e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006f42:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8006f46:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006f4a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006f4e:	fb02 f501 	mul.w	r5, r2, r1
 8006f52:	fb00 f403 	mul.w	r4, r0, r3
 8006f56:	442c      	add	r4, r5
 8006f58:	fba0 8902 	umull	r8, r9, r0, r2
 8006f5c:	eb04 0309 	add.w	r3, r4, r9
 8006f60:	4699      	mov	r9, r3
 8006f62:	e9c7 8970 	strd	r8, r9, [r7, #448]	@ 0x1c0
 8006f66:	e9c7 8970 	strd	r8, r9, [r7, #448]	@ 0x1c0
    partial_data2 = (int64_t)(partial_data1 / 64);
 8006f6a:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	da07      	bge.n	8006f82 <BMP390_compensate_pressure+0x62>
 8006f72:	f112 013f 	adds.w	r1, r2, #63	@ 0x3f
 8006f76:	67b9      	str	r1, [r7, #120]	@ 0x78
 8006f78:	f143 0300 	adc.w	r3, r3, #0
 8006f7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f7e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8006f82:	f04f 0000 	mov.w	r0, #0
 8006f86:	f04f 0100 	mov.w	r1, #0
 8006f8a:	0990      	lsrs	r0, r2, #6
 8006f8c:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8006f90:	1199      	asrs	r1, r3, #6
 8006f92:	e9c7 016e 	strd	r0, r1, [r7, #440]	@ 0x1b8
    partial_data3 = (int64_t)((partial_data2 * reg_calib_data->t_lin) / 256);
 8006f96:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006f9a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006f9e:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 8006fa2:	fb03 f001 	mul.w	r0, r3, r1
 8006fa6:	f8d7 11bc 	ldr.w	r1, [r7, #444]	@ 0x1bc
 8006faa:	fb02 f101 	mul.w	r1, r2, r1
 8006fae:	4408      	add	r0, r1
 8006fb0:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 8006fb4:	fba1 ab02 	umull	sl, fp, r1, r2
 8006fb8:	eb00 030b 	add.w	r3, r0, fp
 8006fbc:	469b      	mov	fp, r3
 8006fbe:	4652      	mov	r2, sl
 8006fc0:	465b      	mov	r3, fp
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	da07      	bge.n	8006fd6 <BMP390_compensate_pressure+0xb6>
 8006fc6:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8006fca:	6739      	str	r1, [r7, #112]	@ 0x70
 8006fcc:	f143 0300 	adc.w	r3, r3, #0
 8006fd0:	677b      	str	r3, [r7, #116]	@ 0x74
 8006fd2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006fd6:	f04f 0000 	mov.w	r0, #0
 8006fda:	f04f 0100 	mov.w	r1, #0
 8006fde:	0a10      	lsrs	r0, r2, #8
 8006fe0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8006fe4:	1219      	asrs	r1, r3, #8
 8006fe6:	e9c7 016c 	strd	r0, r1, [r7, #432]	@ 0x1b0
    partial_data4 = (int64_t)((reg_calib_data->p8 * partial_data3) / 32);
 8006fea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006fee:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8006ff2:	b25b      	sxtb	r3, r3
 8006ff4:	17da      	asrs	r2, r3, #31
 8006ff6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006ffa:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8006ffe:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8007002:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8007006:	462a      	mov	r2, r5
 8007008:	fb02 f203 	mul.w	r2, r2, r3
 800700c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8007010:	4621      	mov	r1, r4
 8007012:	fb01 f303 	mul.w	r3, r1, r3
 8007016:	441a      	add	r2, r3
 8007018:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800701c:	4621      	mov	r1, r4
 800701e:	fba3 1301 	umull	r1, r3, r3, r1
 8007022:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8007026:	460b      	mov	r3, r1
 8007028:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 800702c:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8007030:	18d3      	adds	r3, r2, r3
 8007032:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8007036:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 800703a:	2b00      	cmp	r3, #0
 800703c:	da07      	bge.n	800704e <BMP390_compensate_pressure+0x12e>
 800703e:	f112 011f 	adds.w	r1, r2, #31
 8007042:	66b9      	str	r1, [r7, #104]	@ 0x68
 8007044:	f143 0300 	adc.w	r3, r3, #0
 8007048:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800704a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800704e:	f04f 0000 	mov.w	r0, #0
 8007052:	f04f 0100 	mov.w	r1, #0
 8007056:	0950      	lsrs	r0, r2, #5
 8007058:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 800705c:	1159      	asrs	r1, r3, #5
 800705e:	e9c7 016a 	strd	r0, r1, [r7, #424]	@ 0x1a8
    partial_data5 = (int64_t)((reg_calib_data->p7 * partial_data1) * 16);
 8007062:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8007066:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800706a:	b25b      	sxtb	r3, r3
 800706c:	17da      	asrs	r2, r3, #31
 800706e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007072:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8007076:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800707a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800707e:	462a      	mov	r2, r5
 8007080:	fb02 f203 	mul.w	r2, r2, r3
 8007084:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8007088:	4621      	mov	r1, r4
 800708a:	fb01 f303 	mul.w	r3, r1, r3
 800708e:	441a      	add	r2, r3
 8007090:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8007094:	4621      	mov	r1, r4
 8007096:	fba3 1301 	umull	r1, r3, r3, r1
 800709a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 800709e:	460b      	mov	r3, r1
 80070a0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80070a4:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80070a8:	18d3      	adds	r3, r2, r3
 80070aa:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80070ae:	f04f 0200 	mov.w	r2, #0
 80070b2:	f04f 0300 	mov.w	r3, #0
 80070b6:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	@ 0x168
 80070ba:	4629      	mov	r1, r5
 80070bc:	010b      	lsls	r3, r1, #4
 80070be:	4621      	mov	r1, r4
 80070c0:	ea43 7311 	orr.w	r3, r3, r1, lsr #28
 80070c4:	4621      	mov	r1, r4
 80070c6:	010a      	lsls	r2, r1, #4
 80070c8:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0
    partial_data6 = (int64_t)((reg_calib_data->p6 * reg_calib_data->t_lin) * 4194304);
 80070cc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80070d0:	89db      	ldrh	r3, [r3, #14]
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	2200      	movs	r2, #0
 80070d6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80070da:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 80070de:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80070e2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80070e6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80070ea:	4629      	mov	r1, r5
 80070ec:	fb02 f001 	mul.w	r0, r2, r1
 80070f0:	4621      	mov	r1, r4
 80070f2:	fb01 f103 	mul.w	r1, r1, r3
 80070f6:	4401      	add	r1, r0
 80070f8:	4620      	mov	r0, r4
 80070fa:	fba0 2302 	umull	r2, r3, r0, r2
 80070fe:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8007102:	4613      	mov	r3, r2
 8007104:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8007108:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800710c:	18cb      	adds	r3, r1, r3
 800710e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8007112:	f04f 0200 	mov.w	r2, #0
 8007116:	f04f 0300 	mov.w	r3, #0
 800711a:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 800711e:	4629      	mov	r1, r5
 8007120:	058b      	lsls	r3, r1, #22
 8007122:	4621      	mov	r1, r4
 8007124:	ea43 2391 	orr.w	r3, r3, r1, lsr #10
 8007128:	4621      	mov	r1, r4
 800712a:	058a      	lsls	r2, r1, #22
 800712c:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
    offset = (int64_t)((reg_calib_data->p5 * 140737488355328) + partial_data4 + partial_data5 + partial_data6);
 8007130:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8007134:	899b      	ldrh	r3, [r3, #12]
 8007136:	b29b      	uxth	r3, r3
 8007138:	2200      	movs	r2, #0
 800713a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800713e:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8007142:	f04f 0000 	mov.w	r0, #0
 8007146:	f04f 0100 	mov.w	r1, #0
 800714a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800714e:	03d9      	lsls	r1, r3, #15
 8007150:	2000      	movs	r0, #0
 8007152:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 8007156:	1884      	adds	r4, r0, r2
 8007158:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 800715c:	eb41 0303 	adc.w	r3, r1, r3
 8007160:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007164:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 8007168:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800716c:	4621      	mov	r1, r4
 800716e:	1889      	adds	r1, r1, r2
 8007170:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 8007174:	4629      	mov	r1, r5
 8007176:	eb43 0101 	adc.w	r1, r3, r1
 800717a:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 800717e:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 8007182:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8007186:	4621      	mov	r1, r4
 8007188:	1851      	adds	r1, r2, r1
 800718a:	6639      	str	r1, [r7, #96]	@ 0x60
 800718c:	4629      	mov	r1, r5
 800718e:	eb43 0101 	adc.w	r1, r3, r1
 8007192:	6679      	str	r1, [r7, #100]	@ 0x64
 8007194:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 8007198:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
    partial_data2 = (int64_t)((reg_calib_data->p4 * partial_data3) / 32);
 800719c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80071a0:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80071a4:	b25b      	sxtb	r3, r3
 80071a6:	17da      	asrs	r2, r3, #31
 80071a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80071ac:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80071b0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80071b4:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80071b8:	462a      	mov	r2, r5
 80071ba:	fb02 f203 	mul.w	r2, r2, r3
 80071be:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80071c2:	4621      	mov	r1, r4
 80071c4:	fb01 f303 	mul.w	r3, r1, r3
 80071c8:	441a      	add	r2, r3
 80071ca:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80071ce:	4621      	mov	r1, r4
 80071d0:	fba3 1301 	umull	r1, r3, r3, r1
 80071d4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80071d8:	460b      	mov	r3, r1
 80071da:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80071de:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80071e2:	18d3      	adds	r3, r2, r3
 80071e4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80071e8:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	da07      	bge.n	8007200 <BMP390_compensate_pressure+0x2e0>
 80071f0:	f112 011f 	adds.w	r1, r2, #31
 80071f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80071f6:	f143 0300 	adc.w	r3, r3, #0
 80071fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007200:	f04f 0000 	mov.w	r0, #0
 8007204:	f04f 0100 	mov.w	r1, #0
 8007208:	0950      	lsrs	r0, r2, #5
 800720a:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 800720e:	1159      	asrs	r1, r3, #5
 8007210:	e9c7 016e 	strd	r0, r1, [r7, #440]	@ 0x1b8
    partial_data4 = (int64_t)((reg_calib_data->p3 * partial_data1) * 4);
 8007214:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8007218:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800721c:	b25b      	sxtb	r3, r3
 800721e:	17da      	asrs	r2, r3, #31
 8007220:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007224:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007228:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800722c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8007230:	462a      	mov	r2, r5
 8007232:	fb02 f203 	mul.w	r2, r2, r3
 8007236:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800723a:	4621      	mov	r1, r4
 800723c:	fb01 f303 	mul.w	r3, r1, r3
 8007240:	441a      	add	r2, r3
 8007242:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8007246:	4621      	mov	r1, r4
 8007248:	fba3 1301 	umull	r1, r3, r3, r1
 800724c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8007250:	460b      	mov	r3, r1
 8007252:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8007256:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800725a:	18d3      	adds	r3, r2, r3
 800725c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8007260:	f04f 0200 	mov.w	r2, #0
 8007264:	f04f 0300 	mov.w	r3, #0
 8007268:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 800726c:	4629      	mov	r1, r5
 800726e:	008b      	lsls	r3, r1, #2
 8007270:	4621      	mov	r1, r4
 8007272:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007276:	4621      	mov	r1, r4
 8007278:	008a      	lsls	r2, r1, #2
 800727a:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8
    partial_data5 = (int64_t)((reg_calib_data->p2 - (int32_t)16384) * reg_calib_data->t_lin * 2097152);
 800727e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8007282:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007286:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800728a:	17da      	asrs	r2, r3, #31
 800728c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007290:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8007294:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8007298:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800729c:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80072a0:	4629      	mov	r1, r5
 80072a2:	fb02 f001 	mul.w	r0, r2, r1
 80072a6:	4621      	mov	r1, r4
 80072a8:	fb01 f103 	mul.w	r1, r1, r3
 80072ac:	4401      	add	r1, r0
 80072ae:	4620      	mov	r0, r4
 80072b0:	fba0 2302 	umull	r2, r3, r0, r2
 80072b4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80072b8:	4613      	mov	r3, r2
 80072ba:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80072be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072c2:	18cb      	adds	r3, r1, r3
 80072c4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80072c8:	f04f 0200 	mov.w	r2, #0
 80072cc:	f04f 0300 	mov.w	r3, #0
 80072d0:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	@ 0x148
 80072d4:	4629      	mov	r1, r5
 80072d6:	054b      	lsls	r3, r1, #21
 80072d8:	4621      	mov	r1, r4
 80072da:	ea43 23d1 	orr.w	r3, r3, r1, lsr #11
 80072de:	4621      	mov	r1, r4
 80072e0:	054a      	lsls	r2, r1, #21
 80072e2:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0
    sensitivity =
        (int64_t)(((reg_calib_data->p1 - (int32_t)16384) * 70368744177664) + partial_data2 + partial_data4 +
 80072e6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80072ea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80072ee:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80072f2:	17da      	asrs	r2, r3, #31
 80072f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80072f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80072fc:	f04f 0000 	mov.w	r0, #0
 8007300:	f04f 0100 	mov.w	r1, #0
 8007304:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007308:	0399      	lsls	r1, r3, #14
 800730a:	2000      	movs	r0, #0
 800730c:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 8007310:	1884      	adds	r4, r0, r2
 8007312:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8007316:	eb41 0303 	adc.w	r3, r1, r3
 800731a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800731e:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 8007322:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8007326:	4621      	mov	r1, r4
 8007328:	1889      	adds	r1, r1, r2
 800732a:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 800732e:	4629      	mov	r1, r5
 8007330:	eb43 0101 	adc.w	r1, r3, r1
 8007334:	f8c7 10b4 	str.w	r1, [r7, #180]	@ 0xb4
    sensitivity =
 8007338:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 800733c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8007340:	4621      	mov	r1, r4
 8007342:	1851      	adds	r1, r2, r1
 8007344:	6539      	str	r1, [r7, #80]	@ 0x50
 8007346:	4629      	mov	r1, r5
 8007348:	eb43 0101 	adc.w	r1, r3, r1
 800734c:	6579      	str	r1, [r7, #84]	@ 0x54
 800734e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 8007352:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
                  partial_data5);
    partial_data1 = (int64_t)((sensitivity / 16777216) * uncomp_data->pressure);
 8007356:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 800735a:	2b00      	cmp	r3, #0
 800735c:	da08      	bge.n	8007370 <BMP390_compensate_pressure+0x450>
 800735e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8007362:	1851      	adds	r1, r2, r1
 8007364:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007366:	f143 0300 	adc.w	r3, r3, #0
 800736a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800736c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007370:	f04f 0000 	mov.w	r0, #0
 8007374:	f04f 0100 	mov.w	r1, #0
 8007378:	0e10      	lsrs	r0, r2, #24
 800737a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800737e:	1619      	asrs	r1, r3, #24
 8007380:	4602      	mov	r2, r0
 8007382:	460b      	mov	r3, r1
 8007384:	4610      	mov	r0, r2
 8007386:	4619      	mov	r1, r3
 8007388:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800738c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007390:	fb02 f501 	mul.w	r5, r2, r1
 8007394:	fb00 f403 	mul.w	r4, r0, r3
 8007398:	442c      	add	r4, r5
 800739a:	fba0 2302 	umull	r2, r3, r0, r2
 800739e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80073a2:	4613      	mov	r3, r2
 80073a4:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80073a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80073ac:	18e3      	adds	r3, r4, r3
 80073ae:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80073b2:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 80073b6:	e9c7 3470 	strd	r3, r4, [r7, #448]	@ 0x1c0
    partial_data2 = (int64_t)(reg_calib_data->p10 * reg_calib_data->t_lin);
 80073ba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80073be:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80073c2:	b25b      	sxtb	r3, r3
 80073c4:	17da      	asrs	r2, r3, #31
 80073c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80073ca:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80073ce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80073d2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80073d6:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 80073da:	4629      	mov	r1, r5
 80073dc:	fb02 f001 	mul.w	r0, r2, r1
 80073e0:	4621      	mov	r1, r4
 80073e2:	fb01 f103 	mul.w	r1, r1, r3
 80073e6:	4401      	add	r1, r0
 80073e8:	4620      	mov	r0, r4
 80073ea:	fba0 2302 	umull	r2, r3, r0, r2
 80073ee:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80073f2:	4613      	mov	r3, r2
 80073f4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80073f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073fc:	18cb      	adds	r3, r1, r3
 80073fe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8007402:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 8007406:	e9c7 346e 	strd	r3, r4, [r7, #440]	@ 0x1b8
 800740a:	e9c7 346e 	strd	r3, r4, [r7, #440]	@ 0x1b8
    partial_data3 = (int64_t)(partial_data2 + ((int32_t)65536 * reg_calib_data->p9));
 800740e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8007412:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007416:	041b      	lsls	r3, r3, #16
 8007418:	17da      	asrs	r2, r3, #31
 800741a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800741e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007422:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 8007426:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 800742a:	4621      	mov	r1, r4
 800742c:	1851      	adds	r1, r2, r1
 800742e:	6439      	str	r1, [r7, #64]	@ 0x40
 8007430:	4629      	mov	r1, r5
 8007432:	eb43 0101 	adc.w	r1, r3, r1
 8007436:	6479      	str	r1, [r7, #68]	@ 0x44
 8007438:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800743c:	e9c7 346c 	strd	r3, r4, [r7, #432]	@ 0x1b0
    partial_data4 = (int64_t)((partial_data3 * uncomp_data->pressure) / (int32_t)8192);
 8007440:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007444:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007448:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 800744c:	fb02 f501 	mul.w	r5, r2, r1
 8007450:	fb00 f403 	mul.w	r4, r0, r3
 8007454:	442c      	add	r4, r5
 8007456:	fba0 2302 	umull	r2, r3, r0, r2
 800745a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800745e:	4613      	mov	r3, r2
 8007460:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8007464:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8007468:	18e3      	adds	r3, r4, r3
 800746a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800746e:	f04f 0200 	mov.w	r2, #0
 8007472:	f04f 0300 	mov.w	r3, #0
 8007476:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	@ 0x138
 800747a:	4621      	mov	r1, r4
 800747c:	0b4a      	lsrs	r2, r1, #13
 800747e:	4629      	mov	r1, r5
 8007480:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8007484:	4629      	mov	r1, r5
 8007486:	0b4b      	lsrs	r3, r1, #13
 8007488:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8

    /* dividing by 10 followed by multiplying by 10
     * To avoid overflow caused by (uncomp_data->pressure * partial_data4)
     */
    partial_data5 = (int64_t)((uncomp_data->pressure * (partial_data4 / 10)) / (int32_t)512);
 800748c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007490:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8007494:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 8007498:	f04f 020a 	mov.w	r2, #10
 800749c:	f04f 0300 	mov.w	r3, #0
 80074a0:	f7f9 fc7c 	bl	8000d9c <__aeabi_ldivmod>
 80074a4:	4602      	mov	r2, r0
 80074a6:	460b      	mov	r3, r1
 80074a8:	fb02 f005 	mul.w	r0, r2, r5
 80074ac:	fb04 f103 	mul.w	r1, r4, r3
 80074b0:	4401      	add	r1, r0
 80074b2:	fba4 2302 	umull	r2, r3, r4, r2
 80074b6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80074ba:	4613      	mov	r3, r2
 80074bc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80074c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80074c4:	18cb      	adds	r3, r1, r3
 80074c6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80074ca:	f04f 0200 	mov.w	r2, #0
 80074ce:	f04f 0300 	mov.w	r3, #0
 80074d2:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	@ 0x130
 80074d6:	4621      	mov	r1, r4
 80074d8:	0a4a      	lsrs	r2, r1, #9
 80074da:	4629      	mov	r1, r5
 80074dc:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 80074e0:	4629      	mov	r1, r5
 80074e2:	0a4b      	lsrs	r3, r1, #9
 80074e4:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0
    partial_data5 = (int64_t)(partial_data5 * 10);
 80074e8:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	@ 0x1a0
 80074ec:	4622      	mov	r2, r4
 80074ee:	462b      	mov	r3, r5
 80074f0:	f04f 0000 	mov.w	r0, #0
 80074f4:	f04f 0100 	mov.w	r1, #0
 80074f8:	0099      	lsls	r1, r3, #2
 80074fa:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80074fe:	0090      	lsls	r0, r2, #2
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	1911      	adds	r1, r2, r4
 8007506:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007508:	416b      	adcs	r3, r5
 800750a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800750c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007510:	460b      	mov	r3, r1
 8007512:	18db      	adds	r3, r3, r3
 8007514:	633b      	str	r3, [r7, #48]	@ 0x30
 8007516:	4613      	mov	r3, r2
 8007518:	eb42 0303 	adc.w	r3, r2, r3
 800751c:	637b      	str	r3, [r7, #52]	@ 0x34
 800751e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8007522:	e9c7 3468 	strd	r3, r4, [r7, #416]	@ 0x1a0
    partial_data6 = (int64_t)(uncomp_data->pressure * uncomp_data->pressure);
 8007526:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800752a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800752e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007532:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007536:	fb02 f501 	mul.w	r5, r2, r1
 800753a:	fb00 f403 	mul.w	r4, r0, r3
 800753e:	442c      	add	r4, r5
 8007540:	fba0 2302 	umull	r2, r3, r0, r2
 8007544:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007548:	4613      	mov	r3, r2
 800754a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800754e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007552:	18e3      	adds	r3, r4, r3
 8007554:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007558:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	@ 0x128
 800755c:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
    partial_data2 = (int64_t)((reg_calib_data->p11 * partial_data6) / (int32_t)65536);
 8007560:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8007564:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8007568:	b25b      	sxtb	r3, r3
 800756a:	17da      	asrs	r2, r3, #31
 800756c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007570:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007574:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8007578:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800757c:	462a      	mov	r2, r5
 800757e:	fb02 f203 	mul.w	r2, r2, r3
 8007582:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8007586:	4621      	mov	r1, r4
 8007588:	fb01 f303 	mul.w	r3, r1, r3
 800758c:	441a      	add	r2, r3
 800758e:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8007592:	4621      	mov	r1, r4
 8007594:	fba3 1301 	umull	r1, r3, r3, r1
 8007598:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800759c:	460b      	mov	r3, r1
 800759e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80075a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80075a6:	18d3      	adds	r3, r2, r3
 80075a8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80075ac:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	da08      	bge.n	80075c6 <BMP390_compensate_pressure+0x6a6>
 80075b4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80075b8:	1851      	adds	r1, r2, r1
 80075ba:	62b9      	str	r1, [r7, #40]	@ 0x28
 80075bc:	f143 0300 	adc.w	r3, r3, #0
 80075c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80075c6:	f04f 0000 	mov.w	r0, #0
 80075ca:	f04f 0100 	mov.w	r1, #0
 80075ce:	0c10      	lsrs	r0, r2, #16
 80075d0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80075d4:	1419      	asrs	r1, r3, #16
 80075d6:	e9c7 016e 	strd	r0, r1, [r7, #440]	@ 0x1b8
    partial_data3 = (int64_t)((int64_t)(partial_data2 * uncomp_data->pressure) / 128);
 80075da:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80075de:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80075e2:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 80075e6:	fb02 f501 	mul.w	r5, r2, r1
 80075ea:	fb00 f403 	mul.w	r4, r0, r3
 80075ee:	442c      	add	r4, r5
 80075f0:	fba0 2302 	umull	r2, r3, r0, r2
 80075f4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80075f8:	4613      	mov	r3, r2
 80075fa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80075fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007602:	18e3      	adds	r3, r4, r3
 8007604:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8007608:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800760c:	2b00      	cmp	r3, #0
 800760e:	da07      	bge.n	8007620 <BMP390_compensate_pressure+0x700>
 8007610:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 8007614:	6239      	str	r1, [r7, #32]
 8007616:	f143 0300 	adc.w	r3, r3, #0
 800761a:	627b      	str	r3, [r7, #36]	@ 0x24
 800761c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007620:	f04f 0000 	mov.w	r0, #0
 8007624:	f04f 0100 	mov.w	r1, #0
 8007628:	09d0      	lsrs	r0, r2, #7
 800762a:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800762e:	11d9      	asrs	r1, r3, #7
 8007630:	e9c7 016c 	strd	r0, r1, [r7, #432]	@ 0x1b0
    partial_data4 = (int64_t)((offset / 4) + partial_data1 + partial_data5 + partial_data3);
 8007634:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8007638:	2b00      	cmp	r3, #0
 800763a:	da06      	bge.n	800764a <BMP390_compensate_pressure+0x72a>
 800763c:	1cd1      	adds	r1, r2, #3
 800763e:	61b9      	str	r1, [r7, #24]
 8007640:	f143 0300 	adc.w	r3, r3, #0
 8007644:	61fb      	str	r3, [r7, #28]
 8007646:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800764a:	f04f 0000 	mov.w	r0, #0
 800764e:	f04f 0100 	mov.w	r1, #0
 8007652:	0890      	lsrs	r0, r2, #2
 8007654:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8007658:	1099      	asrs	r1, r3, #2
 800765a:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 800765e:	1884      	adds	r4, r0, r2
 8007660:	f8c7 4090 	str.w	r4, [r7, #144]	@ 0x90
 8007664:	eb41 0303 	adc.w	r3, r1, r3
 8007668:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800766c:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 8007670:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007674:	4621      	mov	r1, r4
 8007676:	1889      	adds	r1, r1, r2
 8007678:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 800767c:	4629      	mov	r1, r5
 800767e:	eb43 0101 	adc.w	r1, r3, r1
 8007682:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 8007686:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 800768a:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800768e:	4621      	mov	r1, r4
 8007690:	1851      	adds	r1, r2, r1
 8007692:	6139      	str	r1, [r7, #16]
 8007694:	4629      	mov	r1, r5
 8007696:	eb43 0101 	adc.w	r1, r3, r1
 800769a:	6179      	str	r1, [r7, #20]
 800769c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80076a0:	e9c7 346a 	strd	r3, r4, [r7, #424]	@ 0x1a8
    comp_press = (((uint64_t)partial_data4 * 25) / (uint64_t)1099511627776);
 80076a4:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 80076a8:	4602      	mov	r2, r0
 80076aa:	460b      	mov	r3, r1
 80076ac:	1894      	adds	r4, r2, r2
 80076ae:	60bc      	str	r4, [r7, #8]
 80076b0:	415b      	adcs	r3, r3
 80076b2:	60fb      	str	r3, [r7, #12]
 80076b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076b8:	1814      	adds	r4, r2, r0
 80076ba:	603c      	str	r4, [r7, #0]
 80076bc:	414b      	adcs	r3, r1
 80076be:	607b      	str	r3, [r7, #4]
 80076c0:	f04f 0200 	mov.w	r2, #0
 80076c4:	f04f 0300 	mov.w	r3, #0
 80076c8:	e9d7 8900 	ldrd	r8, r9, [r7]
 80076cc:	464c      	mov	r4, r9
 80076ce:	00e3      	lsls	r3, r4, #3
 80076d0:	4644      	mov	r4, r8
 80076d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80076d6:	4644      	mov	r4, r8
 80076d8:	00e2      	lsls	r2, r4, #3
 80076da:	4614      	mov	r4, r2
 80076dc:	461d      	mov	r5, r3
 80076de:	4623      	mov	r3, r4
 80076e0:	181b      	adds	r3, r3, r0
 80076e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80076e6:	462b      	mov	r3, r5
 80076e8:	eb41 0303 	adc.w	r3, r1, r3
 80076ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80076f0:	f04f 0200 	mov.w	r2, #0
 80076f4:	f04f 0300 	mov.w	r3, #0
 80076f8:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80076fc:	0a0a      	lsrs	r2, r1, #8
 80076fe:	2300      	movs	r3, #0
 8007700:	e9c7 2374 	strd	r2, r3, [r7, #464]	@ 0x1d0


    if (comp_press < BMP390_MIN_PRES_INT)
 8007704:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 8007708:	4919      	ldr	r1, [pc, #100]	@ (8007770 <BMP390_compensate_pressure+0x850>)
 800770a:	428a      	cmp	r2, r1
 800770c:	f173 0300 	sbcs.w	r3, r3, #0
 8007710:	d204      	bcs.n	800771c <BMP390_compensate_pressure+0x7fc>
    {
        comp_press = BMP390_MIN_PRES_INT;
 8007712:	4a17      	ldr	r2, [pc, #92]	@ (8007770 <BMP390_compensate_pressure+0x850>)
 8007714:	f04f 0300 	mov.w	r3, #0
 8007718:	e9c7 2374 	strd	r2, r3, [r7, #464]	@ 0x1d0
    }

    if (comp_press > BMP390_MAX_PRES_INT)
 800771c:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 8007720:	4914      	ldr	r1, [pc, #80]	@ (8007774 <BMP390_compensate_pressure+0x854>)
 8007722:	428a      	cmp	r2, r1
 8007724:	f173 0300 	sbcs.w	r3, r3, #0
 8007728:	d304      	bcc.n	8007734 <BMP390_compensate_pressure+0x814>
    {
        comp_press = BMP390_MAX_PRES_INT;
 800772a:	a30f      	add	r3, pc, #60	@ (adr r3, 8007768 <BMP390_compensate_pressure+0x848>)
 800772c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007730:	e9c7 2374 	strd	r2, r3, [r7, #464]	@ 0x1d0
    }
    comp_press = comp_press / 100;
 8007734:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 8007738:	f04f 0264 	mov.w	r2, #100	@ 0x64
 800773c:	f04f 0300 	mov.w	r3, #0
 8007740:	f7f9 fb7c 	bl	8000e3c <__aeabi_uldivmod>
 8007744:	4602      	mov	r2, r0
 8007746:	460b      	mov	r3, r1
 8007748:	e9c7 2374 	strd	r2, r3, [r7, #464]	@ 0x1d0
    (*pressure) = comp_press;
 800774c:	f8d7 117c 	ldr.w	r1, [r7, #380]	@ 0x17c
 8007750:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 8007754:	e9c1 2300 	strd	r2, r3, [r1]

    return BMP390_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 8007760:	46bd      	mov	sp, r7
 8007762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007766:	bf00      	nop
 8007768:	00bebc20 	.word	0x00bebc20
 800776c:	00000000 	.word	0x00000000
 8007770:	002dc6c0 	.word	0x002dc6c0
 8007774:	00bebc21 	.word	0x00bebc21

08007778 <BMP390_SPI_READ_MULTIPLE_REGS>:
 * @param dataT Pointer to the first register address to read.
 * @param dataR Buffer to store the read data.
 * @param length Number of bytes to read.
 * @return HAL_StatusTypeDef HAL status code that indicates if the read operation was successful.
 */
HAL_StatusTypeDef BMP390_SPI_READ_MULTIPLE_REGS(BMP390_SPI* bar, uint8_t *dataT, uint8_t *dataR, uint8_t length) {
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
 8007784:	70fb      	strb	r3, [r7, #3]
	uint8_t dataTRead = *dataT | BMP390_SPI_READ_MASK;
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800778e:	b2db      	uxtb	r3, r3
 8007790:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(bar->pSPI_GPIO_PORT, bar->pSPI_GPIO_PIN, GPIO_PIN_RESET);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6858      	ldr	r0, [r3, #4]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	7a1b      	ldrb	r3, [r3, #8]
 800779a:	2200      	movs	r2, #0
 800779c:	4619      	mov	r1, r3
 800779e:	f7fb f8b9 	bl	8002914 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(bar->pHSPI, &dataTRead, 1, 100);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6818      	ldr	r0, [r3, #0]
 80077a6:	f107 0117 	add.w	r1, r7, #23
 80077aa:	2364      	movs	r3, #100	@ 0x64
 80077ac:	2201      	movs	r2, #1
 80077ae:	f7fd f978 	bl	8004aa2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(bar->pHSPI, &bar->dummyByte, 1, 100);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6818      	ldr	r0, [r3, #0]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f103 010a 	add.w	r1, r3, #10
 80077bc:	2364      	movs	r3, #100	@ 0x64
 80077be:	2201      	movs	r2, #1
 80077c0:	f7fd f96f 	bl	8004aa2 <HAL_SPI_Transmit>
	if(HAL_SPI_Receive(bar->pHSPI, dataR, length, 100) != HAL_OK)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6818      	ldr	r0, [r3, #0]
 80077c8:	78fb      	ldrb	r3, [r7, #3]
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	2364      	movs	r3, #100	@ 0x64
 80077ce:	6879      	ldr	r1, [r7, #4]
 80077d0:	f7fd fad5 	bl	8004d7e <HAL_SPI_Receive>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <BMP390_SPI_READ_MULTIPLE_REGS+0x66>
		return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e008      	b.n	80077f0 <BMP390_SPI_READ_MULTIPLE_REGS+0x78>
	HAL_GPIO_WritePin(bar->pSPI_GPIO_PORT, bar->pSPI_GPIO_PIN, GPIO_PIN_SET);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6858      	ldr	r0, [r3, #4]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	7a1b      	ldrb	r3, [r3, #8]
 80077e6:	2201      	movs	r2, #1
 80077e8:	4619      	mov	r1, r3
 80077ea:	f7fb f893 	bl	8002914 <HAL_GPIO_WritePin>
	return HAL_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3718      	adds	r7, #24
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <BMP390_SPI_READ_REG>:
 * @param bar Pointer to BMP390_SPI structure containing the SPI configuration.
 * @param dataT Pointer to the register address to read.
 * @param dataR Buffer to store the read data.
 * @return HAL_StatusTypeDef HAL status code that indicates if the read operation was successful.
 */
HAL_StatusTypeDef BMP390_SPI_READ_REG(BMP390_SPI* bar, uint8_t *dataT, uint8_t *dataR) {
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
	uint8_t dataTRead = *dataT;
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	75fb      	strb	r3, [r7, #23]
	dataTRead |= BMP390_SPI_READ_MASK;
 800780a:	7dfb      	ldrb	r3, [r7, #23]
 800780c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007810:	b2db      	uxtb	r3, r3
 8007812:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(bar->pSPI_GPIO_PORT, bar->pSPI_GPIO_PIN, GPIO_PIN_RESET);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6858      	ldr	r0, [r3, #4]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	7a1b      	ldrb	r3, [r3, #8]
 800781c:	2200      	movs	r2, #0
 800781e:	4619      	mov	r1, r3
 8007820:	f7fb f878 	bl	8002914 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(bar->pHSPI, &dataTRead, 1, 100);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6818      	ldr	r0, [r3, #0]
 8007828:	f107 0117 	add.w	r1, r7, #23
 800782c:	2364      	movs	r3, #100	@ 0x64
 800782e:	2201      	movs	r2, #1
 8007830:	f7fd f937 	bl	8004aa2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(bar->pHSPI, &bar->dummyByte, 1, 100);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6818      	ldr	r0, [r3, #0]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f103 010a 	add.w	r1, r3, #10
 800783e:	2364      	movs	r3, #100	@ 0x64
 8007840:	2201      	movs	r2, #1
 8007842:	f7fd f92e 	bl	8004aa2 <HAL_SPI_Transmit>
	if(HAL_SPI_Receive(bar->pHSPI, dataR, 1, 100) != HAL_OK)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6818      	ldr	r0, [r3, #0]
 800784a:	2364      	movs	r3, #100	@ 0x64
 800784c:	2201      	movs	r2, #1
 800784e:	6879      	ldr	r1, [r7, #4]
 8007850:	f7fd fa95 	bl	8004d7e <HAL_SPI_Receive>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d001      	beq.n	800785e <BMP390_SPI_READ_REG+0x66>
		return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e008      	b.n	8007870 <BMP390_SPI_READ_REG+0x78>
	HAL_GPIO_WritePin(bar->pSPI_GPIO_PORT, bar->pSPI_GPIO_PIN, GPIO_PIN_SET);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6858      	ldr	r0, [r3, #4]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	7a1b      	ldrb	r3, [r3, #8]
 8007866:	2201      	movs	r2, #1
 8007868:	4619      	mov	r1, r3
 800786a:	f7fb f853 	bl	8002914 <HAL_GPIO_WritePin>

	return HAL_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3718      	adds	r7, #24
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <BMP390_SPI_WRITE_REG>:
 * @param bar Pointer to BMP390_SPI structure containing the SPI configuration.
 * @param dataReg Pointer to the register address to write to.
 * @param dataToWrite Pointer to the data to write to the register.
 * @return HAL_StatusTypeDef HAL status code that indicates if the write operation was successful.
 */
HAL_StatusTypeDef BMP390_SPI_WRITE_REG(BMP390_SPI* bar, uint8_t *dataReg, uint8_t* dataToWrite) {
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
	uint8_t buf[2];
	buf[0] = *dataReg & BMP390_SPI_WRITE_MASK;
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800788c:	b2db      	uxtb	r3, r3
 800788e:	753b      	strb	r3, [r7, #20]
	buf[1] = *dataToWrite;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(bar->pSPI_GPIO_PORT, bar->pSPI_GPIO_PIN, GPIO_PIN_RESET);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6858      	ldr	r0, [r3, #4]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	7a1b      	ldrb	r3, [r3, #8]
 800789e:	2200      	movs	r2, #0
 80078a0:	4619      	mov	r1, r3
 80078a2:	f7fb f837 	bl	8002914 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(bar->pHSPI, &buf[0], 1, 100)!= HAL_OK)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6818      	ldr	r0, [r3, #0]
 80078aa:	f107 0114 	add.w	r1, r7, #20
 80078ae:	2364      	movs	r3, #100	@ 0x64
 80078b0:	2201      	movs	r2, #1
 80078b2:	f7fd f8f6 	bl	8004aa2 <HAL_SPI_Transmit>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <BMP390_SPI_WRITE_REG+0x48>
		return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e016      	b.n	80078ee <BMP390_SPI_WRITE_REG+0x76>
	if(HAL_SPI_Transmit(bar->pHSPI, &buf[1], 1, 100) != HAL_OK)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6818      	ldr	r0, [r3, #0]
 80078c4:	f107 0314 	add.w	r3, r7, #20
 80078c8:	1c59      	adds	r1, r3, #1
 80078ca:	2364      	movs	r3, #100	@ 0x64
 80078cc:	2201      	movs	r2, #1
 80078ce:	f7fd f8e8 	bl	8004aa2 <HAL_SPI_Transmit>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d001      	beq.n	80078dc <BMP390_SPI_WRITE_REG+0x64>
		return HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	e008      	b.n	80078ee <BMP390_SPI_WRITE_REG+0x76>
	HAL_GPIO_WritePin(bar->pSPI_GPIO_PORT, bar->pSPI_GPIO_PIN, GPIO_PIN_SET);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6858      	ldr	r0, [r3, #4]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	7a1b      	ldrb	r3, [r3, #8]
 80078e4:	2201      	movs	r2, #1
 80078e6:	4619      	mov	r1, r3
 80078e8:	f7fb f814 	bl	8002914 <HAL_GPIO_WritePin>
	return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3718      	adds	r7, #24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <LIS3MDL_Init>:
 *  Created on: Apr 14, 2024
 *      Author: eyalk
 */
#include "lis3mdl.h"

HAL_StatusTypeDef LIS3MDL_Init(LIS3MDL_I2C* dev, I2C_HandleTypeDef* pHI2C) {
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b084      	sub	sp, #16
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
 80078fe:	6039      	str	r1, [r7, #0]
	dev->i2cHandle = pHI2C;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	601a      	str	r2, [r3, #0]

	uint8_t regdata = 0;
 8007906:	2300      	movs	r3, #0
 8007908:	73fb      	strb	r3, [r7, #15]
	LIS3MDL_I2C_ReadRegister(dev, LIS3MDL_WHO_AM_I_ADDR, &regdata);
 800790a:	f107 030f 	add.w	r3, r7, #15
 800790e:	461a      	mov	r2, r3
 8007910:	210f      	movs	r1, #15
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f834 	bl	8007980 <LIS3MDL_I2C_ReadRegister>
	if(regdata != LIS3MDL_WHO_AM_I_VAL)
 8007918:	7bfb      	ldrb	r3, [r7, #15]
 800791a:	2b3d      	cmp	r3, #61	@ 0x3d
 800791c:	d001      	beq.n	8007922 <LIS3MDL_Init+0x2c>
		return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e02a      	b.n	8007978 <LIS3MDL_Init+0x82>

	/* CTRL_REG1 Configuration */
	regdata |= LIS3MDL_CTRL1_REG_DO_80HZ;
 8007922:	7bfb      	ldrb	r3, [r7, #15]
 8007924:	f043 031c 	orr.w	r3, r3, #28
 8007928:	b2db      	uxtb	r3, r3
 800792a:	73fb      	strb	r3, [r7, #15]
	regdata |= LIS3MDL_CTRL1_REG_TEMP_EN_ENABLE;
 800792c:	7bfb      	ldrb	r3, [r7, #15]
 800792e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007932:	b2db      	uxtb	r3, r3
 8007934:	73fb      	strb	r3, [r7, #15]
	LIS3MDL_I2C_WriteRegister(dev, LIS3MDL_REG_CTRL_REG1, &regdata);
 8007936:	f107 030f 	add.w	r3, r7, #15
 800793a:	461a      	mov	r2, r3
 800793c:	2120      	movs	r1, #32
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f839 	bl	80079b6 <LIS3MDL_I2C_WriteRegister>

	regdata = 0;
 8007944:	2300      	movs	r3, #0
 8007946:	73fb      	strb	r3, [r7, #15]
	/* CTRL_REG2 Configuration */
	regdata |= LIS3MDL_CTRL2_REG_FS_8_GAUSS;
 8007948:	7bfb      	ldrb	r3, [r7, #15]
 800794a:	f043 0320 	orr.w	r3, r3, #32
 800794e:	b2db      	uxtb	r3, r3
 8007950:	73fb      	strb	r3, [r7, #15]
	LIS3MDL_I2C_WriteRegister(dev, LIS3MDL_REG_CTRL_REG2, &regdata);
 8007952:	f107 030f 	add.w	r3, r7, #15
 8007956:	461a      	mov	r2, r3
 8007958:	2121      	movs	r1, #33	@ 0x21
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f82b 	bl	80079b6 <LIS3MDL_I2C_WriteRegister>

	regdata = 0;
 8007960:	2300      	movs	r3, #0
 8007962:	73fb      	strb	r3, [r7, #15]
	/* CTRL_REG3 Configuration */
	regdata |= LIS3MDL_CTRL3_REG_MD_CONTINUOUS_MODE;
 8007964:	7bfb      	ldrb	r3, [r7, #15]
 8007966:	73fb      	strb	r3, [r7, #15]
	LIS3MDL_I2C_WriteRegister(dev, LIS3MDL_REG_CTRL_REG3, &regdata);
 8007968:	f107 030f 	add.w	r3, r7, #15
 800796c:	461a      	mov	r2, r3
 800796e:	2122      	movs	r1, #34	@ 0x22
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f820 	bl	80079b6 <LIS3MDL_I2C_WriteRegister>

	return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <LIS3MDL_I2C_ReadRegister>:
/*
 * Register Operations Functions
 */


HAL_StatusTypeDef LIS3MDL_I2C_ReadRegister(LIS3MDL_I2C *dev, uint8_t reg, uint8_t *data) {
 8007980:	b580      	push	{r7, lr}
 8007982:	b088      	sub	sp, #32
 8007984:	af04      	add	r7, sp, #16
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	460b      	mov	r3, r1
 800798a:	607a      	str	r2, [r7, #4]
 800798c:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(dev->i2cHandle, LIS3MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6818      	ldr	r0, [r3, #0]
 8007992:	7afb      	ldrb	r3, [r7, #11]
 8007994:	b29a      	uxth	r2, r3
 8007996:	f04f 33ff 	mov.w	r3, #4294967295
 800799a:	9302      	str	r3, [sp, #8]
 800799c:	2301      	movs	r3, #1
 800799e:	9301      	str	r3, [sp, #4]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	9300      	str	r3, [sp, #0]
 80079a4:	2301      	movs	r3, #1
 80079a6:	2138      	movs	r1, #56	@ 0x38
 80079a8:	f7fb f972 	bl	8002c90 <HAL_I2C_Mem_Read>
 80079ac:	4603      	mov	r3, r0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <LIS3MDL_I2C_WriteRegister>:
HAL_StatusTypeDef LIS3MDL_I2C_ReadRegisters(LIS3MDL_I2C *dev, uint8_t reg, uint8_t *data, uint8_t length) {
	return HAL_I2C_Mem_Read(dev->i2cHandle, LIS3MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
}


HAL_StatusTypeDef LIS3MDL_I2C_WriteRegister(LIS3MDL_I2C *dev, uint8_t reg, uint8_t *data) {
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b088      	sub	sp, #32
 80079ba:	af04      	add	r7, sp, #16
 80079bc:	60f8      	str	r0, [r7, #12]
 80079be:	460b      	mov	r3, r1
 80079c0:	607a      	str	r2, [r7, #4]
 80079c2:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Write(dev->i2cHandle, LIS3MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6818      	ldr	r0, [r3, #0]
 80079c8:	7afb      	ldrb	r3, [r7, #11]
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	f04f 33ff 	mov.w	r3, #4294967295
 80079d0:	9302      	str	r3, [sp, #8]
 80079d2:	2301      	movs	r3, #1
 80079d4:	9301      	str	r3, [sp, #4]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	9300      	str	r3, [sp, #0]
 80079da:	2301      	movs	r3, #1
 80079dc:	2138      	movs	r1, #56	@ 0x38
 80079de:	f7fb f843 	bl	8002a68 <HAL_I2C_Mem_Write>
 80079e2:	4603      	mov	r3, r0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <LSM6DSOX_I2C_init>:





uint8_t LSM6DSOX_I2C_init(LSM6DSOX_I2C *dev, I2C_HandleTypeDef *pHI2C) {
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
	// Set dev struct
	dev->i2cHandle = pHI2C;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	683a      	ldr	r2, [r7, #0]
 80079fa:	601a      	str	r2, [r3, #0]
	dev->acc_data_mps2[0] = 0.0f;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f04f 0200 	mov.w	r2, #0
 8007a02:	611a      	str	r2, [r3, #16]
	dev->acc_data_mps2[1] = 0.0f;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f04f 0200 	mov.w	r2, #0
 8007a0a:	615a      	str	r2, [r3, #20]
	dev->acc_data_mps2[2] = 0.0f;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f04f 0200 	mov.w	r2, #0
 8007a12:	619a      	str	r2, [r3, #24]
	dev->angular_rate_dps[0] = 0.0f;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f04f 0200 	mov.w	r2, #0
 8007a1a:	629a      	str	r2, [r3, #40]	@ 0x28
	dev->angular_rate_dps[1] = 0.0f;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f04f 0200 	mov.w	r2, #0
 8007a22:	62da      	str	r2, [r3, #44]	@ 0x2c
	dev->angular_rate_dps[2] = 0.0f;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f04f 0200 	mov.w	r2, #0
 8007a2a:	631a      	str	r2, [r3, #48]	@ 0x30
	dev->temp_c = 0.0f;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f04f 0200 	mov.w	r2, #0
 8007a32:	61da      	str	r2, [r3, #28]

	HAL_StatusTypeDef status;
	uint8_t regdata;

	status = LSM6DSOX_I2C_ReadRegister(dev, LSM6DSOX_REG_WHO_AM_I, &regdata);
 8007a34:	f107 030e 	add.w	r3, r7, #14
 8007a38:	461a      	mov	r2, r3
 8007a3a:	210f      	movs	r1, #15
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f9cb 	bl	8007dd8 <LSM6DSOX_I2C_ReadRegister>
 8007a42:	4603      	mov	r3, r0
 8007a44:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK || regdata != LSM6DSOX_WHO_AM_I_VAL) {
 8007a46:	7bfb      	ldrb	r3, [r7, #15]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d102      	bne.n	8007a52 <LSM6DSOX_I2C_init+0x66>
 8007a4c:	7bbb      	ldrb	r3, [r7, #14]
 8007a4e:	2b6c      	cmp	r3, #108	@ 0x6c
 8007a50:	d001      	beq.n	8007a56 <LSM6DSOX_I2C_init+0x6a>
		//printf("Device address doesn't match");
		return 255;
 8007a52:	23ff      	movs	r3, #255	@ 0xff
 8007a54:	e05a      	b.n	8007b0c <LSM6DSOX_I2C_init+0x120>
	}

	/*   Configuring Accelerometer Sensor   */
	//CTRL1_XL
	regdata = 0;
 8007a56:	2300      	movs	r3, #0
 8007a58:	73bb      	strb	r3, [r7, #14]
	regdata |= LSM6DSOX_CTRL1_XL_SCALE_4G;
 8007a5a:	7bbb      	ldrb	r3, [r7, #14]
 8007a5c:	f043 0308 	orr.w	r3, r3, #8
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	73bb      	strb	r3, [r7, #14]
	regdata |= LSM6DSOX_CTRL1_XL_SPEED_416HZ;
 8007a64:	7bbb      	ldrb	r3, [r7, #14]
 8007a66:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	73bb      	strb	r3, [r7, #14]
	status = LSM6DSOX_I2C_WriteRegister(dev, LSM6DSOX_REG_CTRL1_XL,&regdata);
 8007a6e:	f107 030e 	add.w	r3, r7, #14
 8007a72:	461a      	mov	r2, r3
 8007a74:	2110      	movs	r1, #16
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f9e8 	bl	8007e4c <LSM6DSOX_I2C_WriteRegister>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	73fb      	strb	r3, [r7, #15]

	dev->acc_full_scale_range = 4;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2204      	movs	r2, #4
 8007a84:	711a      	strb	r2, [r3, #4]
	dev->acc_scale_resolution = 1.0/32768.0;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f04f 5260 	mov.w	r2, #939524096	@ 0x38000000
 8007a8c:	609a      	str	r2, [r3, #8]
	dev->acc_FS_to_scale = dev->acc_full_scale_range*dev->acc_scale_resolution;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	791b      	ldrb	r3, [r3, #4]
 8007a92:	ee07 3a90 	vmov	s15, r3
 8007a96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	edd3 7a02 	vldr	s15, [r3, #8]
 8007aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	edc3 7a03 	vstr	s15, [r3, #12]

	/*    Configuring Gyroscope Sensor   */
	regdata = 0;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	73bb      	strb	r3, [r7, #14]
	//CTRL2_G
	regdata |= LSM6DSOX_CTRL2_G_FS_500;
 8007aae:	7bbb      	ldrb	r3, [r7, #14]
 8007ab0:	f043 0304 	orr.w	r3, r3, #4
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	73bb      	strb	r3, [r7, #14]
	regdata |= LSM6DSOX_CTRL2_G_ODR_416HZ;
 8007ab8:	7bbb      	ldrb	r3, [r7, #14]
 8007aba:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	73bb      	strb	r3, [r7, #14]
	status = LSM6DSOX_I2C_WriteRegister(dev, LSM6DSOX_REG_CTRL2_G, &regdata);
 8007ac2:	f107 030e 	add.w	r3, r7, #14
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	2111      	movs	r1, #17
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 f9be 	bl	8007e4c <LSM6DSOX_I2C_WriteRegister>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	73fb      	strb	r3, [r7, #15]

	status = LSM6DSOX_I2C_ReadRegister(dev, LSM6DSOX_REG_CTRL2_G, &regdata);
 8007ad4:	f107 030e 	add.w	r3, r7, #14
 8007ad8:	461a      	mov	r2, r3
 8007ada:	2111      	movs	r1, #17
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f97b 	bl	8007dd8 <LSM6DSOX_I2C_ReadRegister>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	73fb      	strb	r3, [r7, #15]

	dev->angular_rate_sensitivity = 500;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8007aec:	841a      	strh	r2, [r3, #32]
	dev->angular_mdps_to_scale = dev->angular_rate_sensitivity * dev->acc_scale_resolution;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	8c1b      	ldrh	r3, [r3, #32]
 8007af2:	ee07 3a90 	vmov	s15, r3
 8007af6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	edd3 7a02 	vldr	s15, [r3, #8]
 8007b00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	return 0;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <LSM6DSOX_I2C_ReadTemp>:
 * @return 	Returns a HAL_Status_TypeDef enumerate value that indicates the operation success or error.
 * 			If the function returns 'HAL_OK', it indicates that the temperature was successfully read
 * 			and the value is available in 'dev->temp_c'.
 * 			If 'HAL_OK' isn't the returned value, the function hasn't completed successfully
 */
HAL_StatusTypeDef LSM6DSOX_I2C_ReadTemp(LSM6DSOX_I2C *dev) {
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
	uint8_t regData = 0;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	733b      	strb	r3, [r7, #12]
	int16_t getTemp = 0;
 8007b20:	2300      	movs	r3, #0
 8007b22:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef status = LSM6DSOX_I2C_ReadRegister(dev, LSM6DSOX_REG_OUT_TEMP_H, &regData);
 8007b24:	f107 030c 	add.w	r3, r7, #12
 8007b28:	461a      	mov	r2, r3
 8007b2a:	2121      	movs	r1, #33	@ 0x21
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f953 	bl	8007dd8 <LSM6DSOX_I2C_ReadRegister>
 8007b32:	4603      	mov	r3, r0
 8007b34:	737b      	strb	r3, [r7, #13]
	if(status != HAL_OK) {
 8007b36:	7b7b      	ldrb	r3, [r7, #13]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d001      	beq.n	8007b40 <LSM6DSOX_I2C_ReadTemp+0x2c>
		return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e029      	b.n	8007b94 <LSM6DSOX_I2C_ReadTemp+0x80>
	}
	getTemp |= (regData << 8);
 8007b40:	7b3b      	ldrb	r3, [r7, #12]
 8007b42:	021b      	lsls	r3, r3, #8
 8007b44:	b21a      	sxth	r2, r3
 8007b46:	89fb      	ldrh	r3, [r7, #14]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	81fb      	strh	r3, [r7, #14]
	status = LSM6DSOX_I2C_ReadRegister(dev, LSM6DSOX_REG_OUT_TEMP_L, &regData);
 8007b4c:	f107 030c 	add.w	r3, r7, #12
 8007b50:	461a      	mov	r2, r3
 8007b52:	2120      	movs	r1, #32
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f93f 	bl	8007dd8 <LSM6DSOX_I2C_ReadRegister>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	737b      	strb	r3, [r7, #13]
	getTemp |= regData;
 8007b5e:	7b3b      	ldrb	r3, [r7, #12]
 8007b60:	b21a      	sxth	r2, r3
 8007b62:	89fb      	ldrh	r3, [r7, #14]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	81fb      	strh	r3, [r7, #14]
	dev->temp_c = LSM6DSOX_CONST_TEMP_VAL_AT_0_LSB + LSM6DSOX_CONST_TEMP_SENSITIVITY_C_TO_LSB * (float)getTemp - 3;
 8007b68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b6c:	ee07 3a90 	vmov	s15, r3
 8007b70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b74:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8007b9c <LSM6DSOX_I2C_ReadTemp+0x88>
 8007b78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b7c:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8007b80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b84:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8007b88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	edc3 7a07 	vstr	s15, [r3, #28]
	return HAL_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3710      	adds	r7, #16
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	3b800000 	.word	0x3b800000

08007ba0 <LSM6DSOX_I2C_ReadAccel>:
 * @return 	Returns a HAL_Status_TypeDef enumerate value that indicates the operation success or error.
 * 			If the function returns 'HAL_OK', it indicates that the accelerometer data was successfully read
 * 			and the value is available in 'dev->acc_data_msp2'.
 * 			If 'HAL_OK' isn't the returned value, the function hasn't completed successfully
 */
HAL_StatusTypeDef LSM6DSOX_I2C_ReadAccel(LSM6DSOX_I2C *dev) {
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b086      	sub	sp, #24
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
	uint8_t regdata[6];
	// Read all Accelerometer measurements for axes x,y,z.
	HAL_StatusTypeDef status = LSM6DSOX_I2C_ReadRegisters(dev, LSM6DSOX_REG_OUTX_L_A, regdata, 6);
 8007ba8:	f107 0210 	add.w	r2, r7, #16
 8007bac:	2306      	movs	r3, #6
 8007bae:	2128      	movs	r1, #40	@ 0x28
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f92c 	bl	8007e0e <LSM6DSOX_I2C_ReadRegisters>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK)
 8007bba:	7dfb      	ldrb	r3, [r7, #23]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d001      	beq.n	8007bc4 <LSM6DSOX_I2C_ReadAccel+0x24>
		return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e08b      	b.n	8007cdc <LSM6DSOX_I2C_ReadAccel+0x13c>
	int16_t AccData[3];
	AccData[0] = ((int16_t)regdata[1] << 8) | ((int16_t)regdata[0]); // X-axis
 8007bc4:	7c7b      	ldrb	r3, [r7, #17]
 8007bc6:	021b      	lsls	r3, r3, #8
 8007bc8:	b21a      	sxth	r2, r3
 8007bca:	7c3b      	ldrb	r3, [r7, #16]
 8007bcc:	b21b      	sxth	r3, r3
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	b21b      	sxth	r3, r3
 8007bd2:	813b      	strh	r3, [r7, #8]
	AccData[1] = ((int16_t)regdata[3] << 8) | ((int16_t)regdata[2]); // Y-axis
 8007bd4:	7cfb      	ldrb	r3, [r7, #19]
 8007bd6:	021b      	lsls	r3, r3, #8
 8007bd8:	b21a      	sxth	r2, r3
 8007bda:	7cbb      	ldrb	r3, [r7, #18]
 8007bdc:	b21b      	sxth	r3, r3
 8007bde:	4313      	orrs	r3, r2
 8007be0:	b21b      	sxth	r3, r3
 8007be2:	817b      	strh	r3, [r7, #10]
	AccData[2] = ((int16_t)regdata[5] << 8) | ((int16_t)regdata[4]); // Z-axis
 8007be4:	7d7b      	ldrb	r3, [r7, #21]
 8007be6:	021b      	lsls	r3, r3, #8
 8007be8:	b21a      	sxth	r2, r3
 8007bea:	7d3b      	ldrb	r3, [r7, #20]
 8007bec:	b21b      	sxth	r3, r3
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	b21b      	sxth	r3, r3
 8007bf2:	81bb      	strh	r3, [r7, #12]

	// Convert raw data to meters per second^2
	dev->acc_data_mps2[0] = AccData[0] * dev->acc_FS_to_scale * G_ACC + LSM6DSOX_GYRO_CALIB_CONST_X;
 8007bf4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007bf8:	ee07 3a90 	vmov	s15, r3
 8007bfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	edd3 7a03 	vldr	s15, [r3, #12]
 8007c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c0a:	ee17 0a90 	vmov	r0, s15
 8007c0e:	f7f8 fc5f 	bl	80004d0 <__aeabi_f2d>
 8007c12:	a335      	add	r3, pc, #212	@ (adr r3, 8007ce8 <LSM6DSOX_I2C_ReadAccel+0x148>)
 8007c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c18:	f7f8 fcb2 	bl	8000580 <__aeabi_dmul>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	4610      	mov	r0, r2
 8007c22:	4619      	mov	r1, r3
 8007c24:	f04f 0200 	mov.w	r2, #0
 8007c28:	f04f 0300 	mov.w	r3, #0
 8007c2c:	f7f8 faf2 	bl	8000214 <__adddf3>
 8007c30:	4602      	mov	r2, r0
 8007c32:	460b      	mov	r3, r1
 8007c34:	4610      	mov	r0, r2
 8007c36:	4619      	mov	r1, r3
 8007c38:	f7f8 ff52 	bl	8000ae0 <__aeabi_d2f>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	611a      	str	r2, [r3, #16]
	dev->acc_data_mps2[1] = AccData[1] * dev->acc_FS_to_scale * G_ACC + LSM6DSOX_GYRO_CALIB_CONST_Y;
 8007c42:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007c46:	ee07 3a90 	vmov	s15, r3
 8007c4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	edd3 7a03 	vldr	s15, [r3, #12]
 8007c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c58:	ee17 0a90 	vmov	r0, s15
 8007c5c:	f7f8 fc38 	bl	80004d0 <__aeabi_f2d>
 8007c60:	a321      	add	r3, pc, #132	@ (adr r3, 8007ce8 <LSM6DSOX_I2C_ReadAccel+0x148>)
 8007c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c66:	f7f8 fc8b 	bl	8000580 <__aeabi_dmul>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	4610      	mov	r0, r2
 8007c70:	4619      	mov	r1, r3
 8007c72:	a31f      	add	r3, pc, #124	@ (adr r3, 8007cf0 <LSM6DSOX_I2C_ReadAccel+0x150>)
 8007c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c78:	f7f8 facc 	bl	8000214 <__adddf3>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	460b      	mov	r3, r1
 8007c80:	4610      	mov	r0, r2
 8007c82:	4619      	mov	r1, r3
 8007c84:	f7f8 ff2c 	bl	8000ae0 <__aeabi_d2f>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	615a      	str	r2, [r3, #20]
	dev->acc_data_mps2[2] = AccData[2] * dev->acc_FS_to_scale * G_ACC + LSM6DSOX_GYRO_CALIB_CONST_Z;
 8007c8e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007c92:	ee07 3a90 	vmov	s15, r3
 8007c96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	edd3 7a03 	vldr	s15, [r3, #12]
 8007ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ca4:	ee17 0a90 	vmov	r0, s15
 8007ca8:	f7f8 fc12 	bl	80004d0 <__aeabi_f2d>
 8007cac:	a30e      	add	r3, pc, #56	@ (adr r3, 8007ce8 <LSM6DSOX_I2C_ReadAccel+0x148>)
 8007cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb2:	f7f8 fc65 	bl	8000580 <__aeabi_dmul>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	460b      	mov	r3, r1
 8007cba:	4610      	mov	r0, r2
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	a30e      	add	r3, pc, #56	@ (adr r3, 8007cf8 <LSM6DSOX_I2C_ReadAccel+0x158>)
 8007cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc4:	f7f8 faa4 	bl	8000210 <__aeabi_dsub>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	460b      	mov	r3, r1
 8007ccc:	4610      	mov	r0, r2
 8007cce:	4619      	mov	r1, r3
 8007cd0:	f7f8 ff06 	bl	8000ae0 <__aeabi_d2f>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	619a      	str	r2, [r3, #24]

	return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3718      	adds	r7, #24
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	f3af 8000 	nop.w
 8007ce8:	51eb851f 	.word	0x51eb851f
 8007cec:	40239eb8 	.word	0x40239eb8
 8007cf0:	9999999a 	.word	0x9999999a
 8007cf4:	3fb99999 	.word	0x3fb99999
 8007cf8:	cccccccd 	.word	0xcccccccd
 8007cfc:	3fdccccc 	.word	0x3fdccccc

08007d00 <LSM6DSOX_I2C_ReadGyro>:


HAL_StatusTypeDef LSM6DSOX_I2C_ReadGyro(LSM6DSOX_I2C *dev) {
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
	uint8_t regdata[6];
	// Read all Gyroscope measurements for axes x,y,z.
	HAL_StatusTypeDef status = LSM6DSOX_I2C_ReadRegisters(dev, LSM6DSOX_REG_OUTX_L_G, regdata, 6);
 8007d08:	f107 0210 	add.w	r2, r7, #16
 8007d0c:	2306      	movs	r3, #6
 8007d0e:	2122      	movs	r1, #34	@ 0x22
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 f87c 	bl	8007e0e <LSM6DSOX_I2C_ReadRegisters>
 8007d16:	4603      	mov	r3, r0
 8007d18:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK)
 8007d1a:	7dfb      	ldrb	r3, [r7, #23]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <LSM6DSOX_I2C_ReadGyro+0x24>
		return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e051      	b.n	8007dc8 <LSM6DSOX_I2C_ReadGyro+0xc8>
	int16_t GyroData[3];
	GyroData[0] = ((int16_t)regdata[1] << 8) | ((int16_t)regdata[0]); // X-axis
 8007d24:	7c7b      	ldrb	r3, [r7, #17]
 8007d26:	021b      	lsls	r3, r3, #8
 8007d28:	b21a      	sxth	r2, r3
 8007d2a:	7c3b      	ldrb	r3, [r7, #16]
 8007d2c:	b21b      	sxth	r3, r3
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	b21b      	sxth	r3, r3
 8007d32:	813b      	strh	r3, [r7, #8]
	GyroData[1] = ((int16_t)regdata[3] << 8) | ((int16_t)regdata[2]); // Y-axis
 8007d34:	7cfb      	ldrb	r3, [r7, #19]
 8007d36:	021b      	lsls	r3, r3, #8
 8007d38:	b21a      	sxth	r2, r3
 8007d3a:	7cbb      	ldrb	r3, [r7, #18]
 8007d3c:	b21b      	sxth	r3, r3
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	b21b      	sxth	r3, r3
 8007d42:	817b      	strh	r3, [r7, #10]
	GyroData[2] = ((int16_t)regdata[5] << 8) | ((int16_t)regdata[4]); // Z-axis
 8007d44:	7d7b      	ldrb	r3, [r7, #21]
 8007d46:	021b      	lsls	r3, r3, #8
 8007d48:	b21a      	sxth	r2, r3
 8007d4a:	7d3b      	ldrb	r3, [r7, #20]
 8007d4c:	b21b      	sxth	r3, r3
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	b21b      	sxth	r3, r3
 8007d52:	81bb      	strh	r3, [r7, #12]

	// Convert raw data to dps
	dev->angular_rate_dps[0] = GyroData[0] * GYRO_DPS_TO_LSB;
 8007d54:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7f8 fba7 	bl	80004ac <__aeabi_i2d>
 8007d5e:	a31c      	add	r3, pc, #112	@ (adr r3, 8007dd0 <LSM6DSOX_I2C_ReadGyro+0xd0>)
 8007d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d64:	f7f8 fc0c 	bl	8000580 <__aeabi_dmul>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	4619      	mov	r1, r3
 8007d70:	f7f8 feb6 	bl	8000ae0 <__aeabi_d2f>
 8007d74:	4602      	mov	r2, r0
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	629a      	str	r2, [r3, #40]	@ 0x28
	dev->angular_rate_dps[1] = GyroData[1] * GYRO_DPS_TO_LSB;
 8007d7a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7f8 fb94 	bl	80004ac <__aeabi_i2d>
 8007d84:	a312      	add	r3, pc, #72	@ (adr r3, 8007dd0 <LSM6DSOX_I2C_ReadGyro+0xd0>)
 8007d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8a:	f7f8 fbf9 	bl	8000580 <__aeabi_dmul>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	460b      	mov	r3, r1
 8007d92:	4610      	mov	r0, r2
 8007d94:	4619      	mov	r1, r3
 8007d96:	f7f8 fea3 	bl	8000ae0 <__aeabi_d2f>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	62da      	str	r2, [r3, #44]	@ 0x2c
	dev->angular_rate_dps[2] = GyroData[2] * GYRO_DPS_TO_LSB;
 8007da0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7f8 fb81 	bl	80004ac <__aeabi_i2d>
 8007daa:	a309      	add	r3, pc, #36	@ (adr r3, 8007dd0 <LSM6DSOX_I2C_ReadGyro+0xd0>)
 8007dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db0:	f7f8 fbe6 	bl	8000580 <__aeabi_dmul>
 8007db4:	4602      	mov	r2, r0
 8007db6:	460b      	mov	r3, r1
 8007db8:	4610      	mov	r0, r2
 8007dba:	4619      	mov	r1, r3
 8007dbc:	f7f8 fe90 	bl	8000ae0 <__aeabi_d2f>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	631a      	str	r2, [r3, #48]	@ 0x30

	return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3718      	adds	r7, #24
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	1eb851ec 	.word	0x1eb851ec
 8007dd4:	3f91eb85 	.word	0x3f91eb85

08007dd8 <LSM6DSOX_I2C_ReadRegister>:
/*
 * Register Operations Functions
 */


HAL_StatusTypeDef LSM6DSOX_I2C_ReadRegister(LSM6DSOX_I2C *dev, uint8_t reg, uint8_t *data) {
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b088      	sub	sp, #32
 8007ddc:	af04      	add	r7, sp, #16
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	460b      	mov	r3, r1
 8007de2:	607a      	str	r2, [r7, #4]
 8007de4:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(dev->i2cHandle, LSM6DSOX_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6818      	ldr	r0, [r3, #0]
 8007dea:	7afb      	ldrb	r3, [r7, #11]
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	f04f 33ff 	mov.w	r3, #4294967295
 8007df2:	9302      	str	r3, [sp, #8]
 8007df4:	2301      	movs	r3, #1
 8007df6:	9301      	str	r3, [sp, #4]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	21d4      	movs	r1, #212	@ 0xd4
 8007e00:	f7fa ff46 	bl	8002c90 <HAL_I2C_Mem_Read>
 8007e04:	4603      	mov	r3, r0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <LSM6DSOX_I2C_ReadRegisters>:


HAL_StatusTypeDef LSM6DSOX_I2C_ReadRegisters(LSM6DSOX_I2C *dev, uint8_t reg, uint8_t *data, uint8_t length) {
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b088      	sub	sp, #32
 8007e12:	af04      	add	r7, sp, #16
 8007e14:	60f8      	str	r0, [r7, #12]
 8007e16:	607a      	str	r2, [r7, #4]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	72fb      	strb	r3, [r7, #11]
 8007e1e:	4613      	mov	r3, r2
 8007e20:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(dev->i2cHandle, LSM6DSOX_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6818      	ldr	r0, [r3, #0]
 8007e26:	7afb      	ldrb	r3, [r7, #11]
 8007e28:	b29a      	uxth	r2, r3
 8007e2a:	7abb      	ldrb	r3, [r7, #10]
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	f04f 31ff 	mov.w	r1, #4294967295
 8007e32:	9102      	str	r1, [sp, #8]
 8007e34:	9301      	str	r3, [sp, #4]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	9300      	str	r3, [sp, #0]
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	21d4      	movs	r1, #212	@ 0xd4
 8007e3e:	f7fa ff27 	bl	8002c90 <HAL_I2C_Mem_Read>
 8007e42:	4603      	mov	r3, r0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <LSM6DSOX_I2C_WriteRegister>:


HAL_StatusTypeDef LSM6DSOX_I2C_WriteRegister(LSM6DSOX_I2C *dev, uint8_t reg, uint8_t *data) {
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b088      	sub	sp, #32
 8007e50:	af04      	add	r7, sp, #16
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	460b      	mov	r3, r1
 8007e56:	607a      	str	r2, [r7, #4]
 8007e58:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Write(dev->i2cHandle, LSM6DSOX_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6818      	ldr	r0, [r3, #0]
 8007e5e:	7afb      	ldrb	r3, [r7, #11]
 8007e60:	b29a      	uxth	r2, r3
 8007e62:	f04f 33ff 	mov.w	r3, #4294967295
 8007e66:	9302      	str	r3, [sp, #8]
 8007e68:	2301      	movs	r3, #1
 8007e6a:	9301      	str	r3, [sp, #4]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	9300      	str	r3, [sp, #0]
 8007e70:	2301      	movs	r3, #1
 8007e72:	21d4      	movs	r1, #212	@ 0xd4
 8007e74:	f7fa fdf8 	bl	8002a68 <HAL_I2C_Mem_Write>
 8007e78:	4603      	mov	r3, r0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <memset>:
 8007e82:	4402      	add	r2, r0
 8007e84:	4603      	mov	r3, r0
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d100      	bne.n	8007e8c <memset+0xa>
 8007e8a:	4770      	bx	lr
 8007e8c:	f803 1b01 	strb.w	r1, [r3], #1
 8007e90:	e7f9      	b.n	8007e86 <memset+0x4>
	...

08007e94 <__errno>:
 8007e94:	4b01      	ldr	r3, [pc, #4]	@ (8007e9c <__errno+0x8>)
 8007e96:	6818      	ldr	r0, [r3, #0]
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	2000000c 	.word	0x2000000c

08007ea0 <__libc_init_array>:
 8007ea0:	b570      	push	{r4, r5, r6, lr}
 8007ea2:	4d0d      	ldr	r5, [pc, #52]	@ (8007ed8 <__libc_init_array+0x38>)
 8007ea4:	4c0d      	ldr	r4, [pc, #52]	@ (8007edc <__libc_init_array+0x3c>)
 8007ea6:	1b64      	subs	r4, r4, r5
 8007ea8:	10a4      	asrs	r4, r4, #2
 8007eaa:	2600      	movs	r6, #0
 8007eac:	42a6      	cmp	r6, r4
 8007eae:	d109      	bne.n	8007ec4 <__libc_init_array+0x24>
 8007eb0:	4d0b      	ldr	r5, [pc, #44]	@ (8007ee0 <__libc_init_array+0x40>)
 8007eb2:	4c0c      	ldr	r4, [pc, #48]	@ (8007ee4 <__libc_init_array+0x44>)
 8007eb4:	f000 ff76 	bl	8008da4 <_init>
 8007eb8:	1b64      	subs	r4, r4, r5
 8007eba:	10a4      	asrs	r4, r4, #2
 8007ebc:	2600      	movs	r6, #0
 8007ebe:	42a6      	cmp	r6, r4
 8007ec0:	d105      	bne.n	8007ece <__libc_init_array+0x2e>
 8007ec2:	bd70      	pop	{r4, r5, r6, pc}
 8007ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ec8:	4798      	blx	r3
 8007eca:	3601      	adds	r6, #1
 8007ecc:	e7ee      	b.n	8007eac <__libc_init_array+0xc>
 8007ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ed2:	4798      	blx	r3
 8007ed4:	3601      	adds	r6, #1
 8007ed6:	e7f2      	b.n	8007ebe <__libc_init_array+0x1e>
 8007ed8:	08008e10 	.word	0x08008e10
 8007edc:	08008e10 	.word	0x08008e10
 8007ee0:	08008e10 	.word	0x08008e10
 8007ee4:	08008e14 	.word	0x08008e14

08007ee8 <pow>:
 8007ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eea:	ed2d 8b02 	vpush	{d8}
 8007eee:	eeb0 8a40 	vmov.f32	s16, s0
 8007ef2:	eef0 8a60 	vmov.f32	s17, s1
 8007ef6:	ec55 4b11 	vmov	r4, r5, d1
 8007efa:	f000 f871 	bl	8007fe0 <__ieee754_pow>
 8007efe:	4622      	mov	r2, r4
 8007f00:	462b      	mov	r3, r5
 8007f02:	4620      	mov	r0, r4
 8007f04:	4629      	mov	r1, r5
 8007f06:	ec57 6b10 	vmov	r6, r7, d0
 8007f0a:	f7f8 fdd3 	bl	8000ab4 <__aeabi_dcmpun>
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	d13b      	bne.n	8007f8a <pow+0xa2>
 8007f12:	ec51 0b18 	vmov	r0, r1, d8
 8007f16:	2200      	movs	r2, #0
 8007f18:	2300      	movs	r3, #0
 8007f1a:	f7f8 fd99 	bl	8000a50 <__aeabi_dcmpeq>
 8007f1e:	b1b8      	cbz	r0, 8007f50 <pow+0x68>
 8007f20:	2200      	movs	r2, #0
 8007f22:	2300      	movs	r3, #0
 8007f24:	4620      	mov	r0, r4
 8007f26:	4629      	mov	r1, r5
 8007f28:	f7f8 fd92 	bl	8000a50 <__aeabi_dcmpeq>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	d146      	bne.n	8007fbe <pow+0xd6>
 8007f30:	ec45 4b10 	vmov	d0, r4, r5
 8007f34:	f000 f848 	bl	8007fc8 <finite>
 8007f38:	b338      	cbz	r0, 8007f8a <pow+0xa2>
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	4620      	mov	r0, r4
 8007f40:	4629      	mov	r1, r5
 8007f42:	f7f8 fd8f 	bl	8000a64 <__aeabi_dcmplt>
 8007f46:	b300      	cbz	r0, 8007f8a <pow+0xa2>
 8007f48:	f7ff ffa4 	bl	8007e94 <__errno>
 8007f4c:	2322      	movs	r3, #34	@ 0x22
 8007f4e:	e01b      	b.n	8007f88 <pow+0xa0>
 8007f50:	ec47 6b10 	vmov	d0, r6, r7
 8007f54:	f000 f838 	bl	8007fc8 <finite>
 8007f58:	b9e0      	cbnz	r0, 8007f94 <pow+0xac>
 8007f5a:	eeb0 0a48 	vmov.f32	s0, s16
 8007f5e:	eef0 0a68 	vmov.f32	s1, s17
 8007f62:	f000 f831 	bl	8007fc8 <finite>
 8007f66:	b1a8      	cbz	r0, 8007f94 <pow+0xac>
 8007f68:	ec45 4b10 	vmov	d0, r4, r5
 8007f6c:	f000 f82c 	bl	8007fc8 <finite>
 8007f70:	b180      	cbz	r0, 8007f94 <pow+0xac>
 8007f72:	4632      	mov	r2, r6
 8007f74:	463b      	mov	r3, r7
 8007f76:	4630      	mov	r0, r6
 8007f78:	4639      	mov	r1, r7
 8007f7a:	f7f8 fd9b 	bl	8000ab4 <__aeabi_dcmpun>
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	d0e2      	beq.n	8007f48 <pow+0x60>
 8007f82:	f7ff ff87 	bl	8007e94 <__errno>
 8007f86:	2321      	movs	r3, #33	@ 0x21
 8007f88:	6003      	str	r3, [r0, #0]
 8007f8a:	ecbd 8b02 	vpop	{d8}
 8007f8e:	ec47 6b10 	vmov	d0, r6, r7
 8007f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f94:	2200      	movs	r2, #0
 8007f96:	2300      	movs	r3, #0
 8007f98:	4630      	mov	r0, r6
 8007f9a:	4639      	mov	r1, r7
 8007f9c:	f7f8 fd58 	bl	8000a50 <__aeabi_dcmpeq>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	d0f2      	beq.n	8007f8a <pow+0xa2>
 8007fa4:	eeb0 0a48 	vmov.f32	s0, s16
 8007fa8:	eef0 0a68 	vmov.f32	s1, s17
 8007fac:	f000 f80c 	bl	8007fc8 <finite>
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	d0ea      	beq.n	8007f8a <pow+0xa2>
 8007fb4:	ec45 4b10 	vmov	d0, r4, r5
 8007fb8:	f000 f806 	bl	8007fc8 <finite>
 8007fbc:	e7c3      	b.n	8007f46 <pow+0x5e>
 8007fbe:	4f01      	ldr	r7, [pc, #4]	@ (8007fc4 <pow+0xdc>)
 8007fc0:	2600      	movs	r6, #0
 8007fc2:	e7e2      	b.n	8007f8a <pow+0xa2>
 8007fc4:	3ff00000 	.word	0x3ff00000

08007fc8 <finite>:
 8007fc8:	b082      	sub	sp, #8
 8007fca:	ed8d 0b00 	vstr	d0, [sp]
 8007fce:	9801      	ldr	r0, [sp, #4]
 8007fd0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8007fd4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8007fd8:	0fc0      	lsrs	r0, r0, #31
 8007fda:	b002      	add	sp, #8
 8007fdc:	4770      	bx	lr
	...

08007fe0 <__ieee754_pow>:
 8007fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe4:	b091      	sub	sp, #68	@ 0x44
 8007fe6:	ed8d 1b00 	vstr	d1, [sp]
 8007fea:	e9dd 1900 	ldrd	r1, r9, [sp]
 8007fee:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8007ff2:	ea5a 0001 	orrs.w	r0, sl, r1
 8007ff6:	ec57 6b10 	vmov	r6, r7, d0
 8007ffa:	d113      	bne.n	8008024 <__ieee754_pow+0x44>
 8007ffc:	19b3      	adds	r3, r6, r6
 8007ffe:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8008002:	4152      	adcs	r2, r2
 8008004:	4298      	cmp	r0, r3
 8008006:	4b98      	ldr	r3, [pc, #608]	@ (8008268 <__ieee754_pow+0x288>)
 8008008:	4193      	sbcs	r3, r2
 800800a:	f080 84ea 	bcs.w	80089e2 <__ieee754_pow+0xa02>
 800800e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008012:	4630      	mov	r0, r6
 8008014:	4639      	mov	r1, r7
 8008016:	f7f8 f8fd 	bl	8000214 <__adddf3>
 800801a:	ec41 0b10 	vmov	d0, r0, r1
 800801e:	b011      	add	sp, #68	@ 0x44
 8008020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008024:	4a91      	ldr	r2, [pc, #580]	@ (800826c <__ieee754_pow+0x28c>)
 8008026:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800802a:	4590      	cmp	r8, r2
 800802c:	463d      	mov	r5, r7
 800802e:	4633      	mov	r3, r6
 8008030:	d806      	bhi.n	8008040 <__ieee754_pow+0x60>
 8008032:	d101      	bne.n	8008038 <__ieee754_pow+0x58>
 8008034:	2e00      	cmp	r6, #0
 8008036:	d1ea      	bne.n	800800e <__ieee754_pow+0x2e>
 8008038:	4592      	cmp	sl, r2
 800803a:	d801      	bhi.n	8008040 <__ieee754_pow+0x60>
 800803c:	d10e      	bne.n	800805c <__ieee754_pow+0x7c>
 800803e:	b169      	cbz	r1, 800805c <__ieee754_pow+0x7c>
 8008040:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8008044:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8008048:	431d      	orrs	r5, r3
 800804a:	d1e0      	bne.n	800800e <__ieee754_pow+0x2e>
 800804c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008050:	18db      	adds	r3, r3, r3
 8008052:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8008056:	4152      	adcs	r2, r2
 8008058:	429d      	cmp	r5, r3
 800805a:	e7d4      	b.n	8008006 <__ieee754_pow+0x26>
 800805c:	2d00      	cmp	r5, #0
 800805e:	46c3      	mov	fp, r8
 8008060:	da3a      	bge.n	80080d8 <__ieee754_pow+0xf8>
 8008062:	4a83      	ldr	r2, [pc, #524]	@ (8008270 <__ieee754_pow+0x290>)
 8008064:	4592      	cmp	sl, r2
 8008066:	d84d      	bhi.n	8008104 <__ieee754_pow+0x124>
 8008068:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800806c:	4592      	cmp	sl, r2
 800806e:	f240 84c7 	bls.w	8008a00 <__ieee754_pow+0xa20>
 8008072:	ea4f 522a 	mov.w	r2, sl, asr #20
 8008076:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800807a:	2a14      	cmp	r2, #20
 800807c:	dd0f      	ble.n	800809e <__ieee754_pow+0xbe>
 800807e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8008082:	fa21 f402 	lsr.w	r4, r1, r2
 8008086:	fa04 f202 	lsl.w	r2, r4, r2
 800808a:	428a      	cmp	r2, r1
 800808c:	f040 84b8 	bne.w	8008a00 <__ieee754_pow+0xa20>
 8008090:	f004 0401 	and.w	r4, r4, #1
 8008094:	f1c4 0402 	rsb	r4, r4, #2
 8008098:	2900      	cmp	r1, #0
 800809a:	d158      	bne.n	800814e <__ieee754_pow+0x16e>
 800809c:	e00e      	b.n	80080bc <__ieee754_pow+0xdc>
 800809e:	2900      	cmp	r1, #0
 80080a0:	d154      	bne.n	800814c <__ieee754_pow+0x16c>
 80080a2:	f1c2 0214 	rsb	r2, r2, #20
 80080a6:	fa4a f402 	asr.w	r4, sl, r2
 80080aa:	fa04 f202 	lsl.w	r2, r4, r2
 80080ae:	4552      	cmp	r2, sl
 80080b0:	f040 84a3 	bne.w	80089fa <__ieee754_pow+0xa1a>
 80080b4:	f004 0401 	and.w	r4, r4, #1
 80080b8:	f1c4 0402 	rsb	r4, r4, #2
 80080bc:	4a6d      	ldr	r2, [pc, #436]	@ (8008274 <__ieee754_pow+0x294>)
 80080be:	4592      	cmp	sl, r2
 80080c0:	d12e      	bne.n	8008120 <__ieee754_pow+0x140>
 80080c2:	f1b9 0f00 	cmp.w	r9, #0
 80080c6:	f280 8494 	bge.w	80089f2 <__ieee754_pow+0xa12>
 80080ca:	496a      	ldr	r1, [pc, #424]	@ (8008274 <__ieee754_pow+0x294>)
 80080cc:	4632      	mov	r2, r6
 80080ce:	463b      	mov	r3, r7
 80080d0:	2000      	movs	r0, #0
 80080d2:	f7f8 fb7f 	bl	80007d4 <__aeabi_ddiv>
 80080d6:	e7a0      	b.n	800801a <__ieee754_pow+0x3a>
 80080d8:	2400      	movs	r4, #0
 80080da:	bbc1      	cbnz	r1, 800814e <__ieee754_pow+0x16e>
 80080dc:	4a63      	ldr	r2, [pc, #396]	@ (800826c <__ieee754_pow+0x28c>)
 80080de:	4592      	cmp	sl, r2
 80080e0:	d1ec      	bne.n	80080bc <__ieee754_pow+0xdc>
 80080e2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80080e6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80080ea:	431a      	orrs	r2, r3
 80080ec:	f000 8479 	beq.w	80089e2 <__ieee754_pow+0xa02>
 80080f0:	4b61      	ldr	r3, [pc, #388]	@ (8008278 <__ieee754_pow+0x298>)
 80080f2:	4598      	cmp	r8, r3
 80080f4:	d908      	bls.n	8008108 <__ieee754_pow+0x128>
 80080f6:	f1b9 0f00 	cmp.w	r9, #0
 80080fa:	f2c0 8476 	blt.w	80089ea <__ieee754_pow+0xa0a>
 80080fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008102:	e78a      	b.n	800801a <__ieee754_pow+0x3a>
 8008104:	2402      	movs	r4, #2
 8008106:	e7e8      	b.n	80080da <__ieee754_pow+0xfa>
 8008108:	f1b9 0f00 	cmp.w	r9, #0
 800810c:	f04f 0000 	mov.w	r0, #0
 8008110:	f04f 0100 	mov.w	r1, #0
 8008114:	da81      	bge.n	800801a <__ieee754_pow+0x3a>
 8008116:	e9dd 0300 	ldrd	r0, r3, [sp]
 800811a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800811e:	e77c      	b.n	800801a <__ieee754_pow+0x3a>
 8008120:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8008124:	d106      	bne.n	8008134 <__ieee754_pow+0x154>
 8008126:	4632      	mov	r2, r6
 8008128:	463b      	mov	r3, r7
 800812a:	4630      	mov	r0, r6
 800812c:	4639      	mov	r1, r7
 800812e:	f7f8 fa27 	bl	8000580 <__aeabi_dmul>
 8008132:	e772      	b.n	800801a <__ieee754_pow+0x3a>
 8008134:	4a51      	ldr	r2, [pc, #324]	@ (800827c <__ieee754_pow+0x29c>)
 8008136:	4591      	cmp	r9, r2
 8008138:	d109      	bne.n	800814e <__ieee754_pow+0x16e>
 800813a:	2d00      	cmp	r5, #0
 800813c:	db07      	blt.n	800814e <__ieee754_pow+0x16e>
 800813e:	ec47 6b10 	vmov	d0, r6, r7
 8008142:	b011      	add	sp, #68	@ 0x44
 8008144:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008148:	f000 bd52 	b.w	8008bf0 <__ieee754_sqrt>
 800814c:	2400      	movs	r4, #0
 800814e:	ec47 6b10 	vmov	d0, r6, r7
 8008152:	9302      	str	r3, [sp, #8]
 8008154:	f000 fc88 	bl	8008a68 <fabs>
 8008158:	9b02      	ldr	r3, [sp, #8]
 800815a:	ec51 0b10 	vmov	r0, r1, d0
 800815e:	bb53      	cbnz	r3, 80081b6 <__ieee754_pow+0x1d6>
 8008160:	4b44      	ldr	r3, [pc, #272]	@ (8008274 <__ieee754_pow+0x294>)
 8008162:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8008166:	429a      	cmp	r2, r3
 8008168:	d002      	beq.n	8008170 <__ieee754_pow+0x190>
 800816a:	f1b8 0f00 	cmp.w	r8, #0
 800816e:	d122      	bne.n	80081b6 <__ieee754_pow+0x1d6>
 8008170:	f1b9 0f00 	cmp.w	r9, #0
 8008174:	da05      	bge.n	8008182 <__ieee754_pow+0x1a2>
 8008176:	4602      	mov	r2, r0
 8008178:	460b      	mov	r3, r1
 800817a:	2000      	movs	r0, #0
 800817c:	493d      	ldr	r1, [pc, #244]	@ (8008274 <__ieee754_pow+0x294>)
 800817e:	f7f8 fb29 	bl	80007d4 <__aeabi_ddiv>
 8008182:	2d00      	cmp	r5, #0
 8008184:	f6bf af49 	bge.w	800801a <__ieee754_pow+0x3a>
 8008188:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800818c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8008190:	ea58 0804 	orrs.w	r8, r8, r4
 8008194:	d108      	bne.n	80081a8 <__ieee754_pow+0x1c8>
 8008196:	4602      	mov	r2, r0
 8008198:	460b      	mov	r3, r1
 800819a:	4610      	mov	r0, r2
 800819c:	4619      	mov	r1, r3
 800819e:	f7f8 f837 	bl	8000210 <__aeabi_dsub>
 80081a2:	4602      	mov	r2, r0
 80081a4:	460b      	mov	r3, r1
 80081a6:	e794      	b.n	80080d2 <__ieee754_pow+0xf2>
 80081a8:	2c01      	cmp	r4, #1
 80081aa:	f47f af36 	bne.w	800801a <__ieee754_pow+0x3a>
 80081ae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80081b2:	4619      	mov	r1, r3
 80081b4:	e731      	b.n	800801a <__ieee754_pow+0x3a>
 80081b6:	0feb      	lsrs	r3, r5, #31
 80081b8:	3b01      	subs	r3, #1
 80081ba:	ea53 0204 	orrs.w	r2, r3, r4
 80081be:	d102      	bne.n	80081c6 <__ieee754_pow+0x1e6>
 80081c0:	4632      	mov	r2, r6
 80081c2:	463b      	mov	r3, r7
 80081c4:	e7e9      	b.n	800819a <__ieee754_pow+0x1ba>
 80081c6:	3c01      	subs	r4, #1
 80081c8:	431c      	orrs	r4, r3
 80081ca:	d016      	beq.n	80081fa <__ieee754_pow+0x21a>
 80081cc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8008258 <__ieee754_pow+0x278>
 80081d0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80081d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80081d8:	f240 8112 	bls.w	8008400 <__ieee754_pow+0x420>
 80081dc:	4b28      	ldr	r3, [pc, #160]	@ (8008280 <__ieee754_pow+0x2a0>)
 80081de:	459a      	cmp	sl, r3
 80081e0:	4b25      	ldr	r3, [pc, #148]	@ (8008278 <__ieee754_pow+0x298>)
 80081e2:	d916      	bls.n	8008212 <__ieee754_pow+0x232>
 80081e4:	4598      	cmp	r8, r3
 80081e6:	d80b      	bhi.n	8008200 <__ieee754_pow+0x220>
 80081e8:	f1b9 0f00 	cmp.w	r9, #0
 80081ec:	da0b      	bge.n	8008206 <__ieee754_pow+0x226>
 80081ee:	2000      	movs	r0, #0
 80081f0:	b011      	add	sp, #68	@ 0x44
 80081f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f6:	f000 bcf3 	b.w	8008be0 <__math_oflow>
 80081fa:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8008260 <__ieee754_pow+0x280>
 80081fe:	e7e7      	b.n	80081d0 <__ieee754_pow+0x1f0>
 8008200:	f1b9 0f00 	cmp.w	r9, #0
 8008204:	dcf3      	bgt.n	80081ee <__ieee754_pow+0x20e>
 8008206:	2000      	movs	r0, #0
 8008208:	b011      	add	sp, #68	@ 0x44
 800820a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800820e:	f000 bcdf 	b.w	8008bd0 <__math_uflow>
 8008212:	4598      	cmp	r8, r3
 8008214:	d20c      	bcs.n	8008230 <__ieee754_pow+0x250>
 8008216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800821a:	2200      	movs	r2, #0
 800821c:	2300      	movs	r3, #0
 800821e:	f7f8 fc21 	bl	8000a64 <__aeabi_dcmplt>
 8008222:	3800      	subs	r0, #0
 8008224:	bf18      	it	ne
 8008226:	2001      	movne	r0, #1
 8008228:	f1b9 0f00 	cmp.w	r9, #0
 800822c:	daec      	bge.n	8008208 <__ieee754_pow+0x228>
 800822e:	e7df      	b.n	80081f0 <__ieee754_pow+0x210>
 8008230:	4b10      	ldr	r3, [pc, #64]	@ (8008274 <__ieee754_pow+0x294>)
 8008232:	4598      	cmp	r8, r3
 8008234:	f04f 0200 	mov.w	r2, #0
 8008238:	d924      	bls.n	8008284 <__ieee754_pow+0x2a4>
 800823a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800823e:	2300      	movs	r3, #0
 8008240:	f7f8 fc10 	bl	8000a64 <__aeabi_dcmplt>
 8008244:	3800      	subs	r0, #0
 8008246:	bf18      	it	ne
 8008248:	2001      	movne	r0, #1
 800824a:	f1b9 0f00 	cmp.w	r9, #0
 800824e:	dccf      	bgt.n	80081f0 <__ieee754_pow+0x210>
 8008250:	e7da      	b.n	8008208 <__ieee754_pow+0x228>
 8008252:	bf00      	nop
 8008254:	f3af 8000 	nop.w
 8008258:	00000000 	.word	0x00000000
 800825c:	3ff00000 	.word	0x3ff00000
 8008260:	00000000 	.word	0x00000000
 8008264:	bff00000 	.word	0xbff00000
 8008268:	fff00000 	.word	0xfff00000
 800826c:	7ff00000 	.word	0x7ff00000
 8008270:	433fffff 	.word	0x433fffff
 8008274:	3ff00000 	.word	0x3ff00000
 8008278:	3fefffff 	.word	0x3fefffff
 800827c:	3fe00000 	.word	0x3fe00000
 8008280:	43f00000 	.word	0x43f00000
 8008284:	4b5a      	ldr	r3, [pc, #360]	@ (80083f0 <__ieee754_pow+0x410>)
 8008286:	f7f7 ffc3 	bl	8000210 <__aeabi_dsub>
 800828a:	a351      	add	r3, pc, #324	@ (adr r3, 80083d0 <__ieee754_pow+0x3f0>)
 800828c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008290:	4604      	mov	r4, r0
 8008292:	460d      	mov	r5, r1
 8008294:	f7f8 f974 	bl	8000580 <__aeabi_dmul>
 8008298:	a34f      	add	r3, pc, #316	@ (adr r3, 80083d8 <__ieee754_pow+0x3f8>)
 800829a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829e:	4606      	mov	r6, r0
 80082a0:	460f      	mov	r7, r1
 80082a2:	4620      	mov	r0, r4
 80082a4:	4629      	mov	r1, r5
 80082a6:	f7f8 f96b 	bl	8000580 <__aeabi_dmul>
 80082aa:	4b52      	ldr	r3, [pc, #328]	@ (80083f4 <__ieee754_pow+0x414>)
 80082ac:	4682      	mov	sl, r0
 80082ae:	468b      	mov	fp, r1
 80082b0:	2200      	movs	r2, #0
 80082b2:	4620      	mov	r0, r4
 80082b4:	4629      	mov	r1, r5
 80082b6:	f7f8 f963 	bl	8000580 <__aeabi_dmul>
 80082ba:	4602      	mov	r2, r0
 80082bc:	460b      	mov	r3, r1
 80082be:	a148      	add	r1, pc, #288	@ (adr r1, 80083e0 <__ieee754_pow+0x400>)
 80082c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082c4:	f7f7 ffa4 	bl	8000210 <__aeabi_dsub>
 80082c8:	4622      	mov	r2, r4
 80082ca:	462b      	mov	r3, r5
 80082cc:	f7f8 f958 	bl	8000580 <__aeabi_dmul>
 80082d0:	4602      	mov	r2, r0
 80082d2:	460b      	mov	r3, r1
 80082d4:	2000      	movs	r0, #0
 80082d6:	4948      	ldr	r1, [pc, #288]	@ (80083f8 <__ieee754_pow+0x418>)
 80082d8:	f7f7 ff9a 	bl	8000210 <__aeabi_dsub>
 80082dc:	4622      	mov	r2, r4
 80082de:	4680      	mov	r8, r0
 80082e0:	4689      	mov	r9, r1
 80082e2:	462b      	mov	r3, r5
 80082e4:	4620      	mov	r0, r4
 80082e6:	4629      	mov	r1, r5
 80082e8:	f7f8 f94a 	bl	8000580 <__aeabi_dmul>
 80082ec:	4602      	mov	r2, r0
 80082ee:	460b      	mov	r3, r1
 80082f0:	4640      	mov	r0, r8
 80082f2:	4649      	mov	r1, r9
 80082f4:	f7f8 f944 	bl	8000580 <__aeabi_dmul>
 80082f8:	a33b      	add	r3, pc, #236	@ (adr r3, 80083e8 <__ieee754_pow+0x408>)
 80082fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fe:	f7f8 f93f 	bl	8000580 <__aeabi_dmul>
 8008302:	4602      	mov	r2, r0
 8008304:	460b      	mov	r3, r1
 8008306:	4650      	mov	r0, sl
 8008308:	4659      	mov	r1, fp
 800830a:	f7f7 ff81 	bl	8000210 <__aeabi_dsub>
 800830e:	4602      	mov	r2, r0
 8008310:	460b      	mov	r3, r1
 8008312:	4680      	mov	r8, r0
 8008314:	4689      	mov	r9, r1
 8008316:	4630      	mov	r0, r6
 8008318:	4639      	mov	r1, r7
 800831a:	f7f7 ff7b 	bl	8000214 <__adddf3>
 800831e:	2400      	movs	r4, #0
 8008320:	4632      	mov	r2, r6
 8008322:	463b      	mov	r3, r7
 8008324:	4620      	mov	r0, r4
 8008326:	460d      	mov	r5, r1
 8008328:	f7f7 ff72 	bl	8000210 <__aeabi_dsub>
 800832c:	4602      	mov	r2, r0
 800832e:	460b      	mov	r3, r1
 8008330:	4640      	mov	r0, r8
 8008332:	4649      	mov	r1, r9
 8008334:	f7f7 ff6c 	bl	8000210 <__aeabi_dsub>
 8008338:	e9dd 2300 	ldrd	r2, r3, [sp]
 800833c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008340:	2300      	movs	r3, #0
 8008342:	9304      	str	r3, [sp, #16]
 8008344:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008348:	4606      	mov	r6, r0
 800834a:	460f      	mov	r7, r1
 800834c:	4652      	mov	r2, sl
 800834e:	465b      	mov	r3, fp
 8008350:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008354:	f7f7 ff5c 	bl	8000210 <__aeabi_dsub>
 8008358:	4622      	mov	r2, r4
 800835a:	462b      	mov	r3, r5
 800835c:	f7f8 f910 	bl	8000580 <__aeabi_dmul>
 8008360:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008364:	4680      	mov	r8, r0
 8008366:	4689      	mov	r9, r1
 8008368:	4630      	mov	r0, r6
 800836a:	4639      	mov	r1, r7
 800836c:	f7f8 f908 	bl	8000580 <__aeabi_dmul>
 8008370:	4602      	mov	r2, r0
 8008372:	460b      	mov	r3, r1
 8008374:	4640      	mov	r0, r8
 8008376:	4649      	mov	r1, r9
 8008378:	f7f7 ff4c 	bl	8000214 <__adddf3>
 800837c:	4652      	mov	r2, sl
 800837e:	465b      	mov	r3, fp
 8008380:	4606      	mov	r6, r0
 8008382:	460f      	mov	r7, r1
 8008384:	4620      	mov	r0, r4
 8008386:	4629      	mov	r1, r5
 8008388:	f7f8 f8fa 	bl	8000580 <__aeabi_dmul>
 800838c:	460b      	mov	r3, r1
 800838e:	4602      	mov	r2, r0
 8008390:	4680      	mov	r8, r0
 8008392:	4689      	mov	r9, r1
 8008394:	4630      	mov	r0, r6
 8008396:	4639      	mov	r1, r7
 8008398:	f7f7 ff3c 	bl	8000214 <__adddf3>
 800839c:	4b17      	ldr	r3, [pc, #92]	@ (80083fc <__ieee754_pow+0x41c>)
 800839e:	4299      	cmp	r1, r3
 80083a0:	4604      	mov	r4, r0
 80083a2:	460d      	mov	r5, r1
 80083a4:	468a      	mov	sl, r1
 80083a6:	468b      	mov	fp, r1
 80083a8:	f340 82ef 	ble.w	800898a <__ieee754_pow+0x9aa>
 80083ac:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80083b0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80083b4:	4303      	orrs	r3, r0
 80083b6:	f000 81e8 	beq.w	800878a <__ieee754_pow+0x7aa>
 80083ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083be:	2200      	movs	r2, #0
 80083c0:	2300      	movs	r3, #0
 80083c2:	f7f8 fb4f 	bl	8000a64 <__aeabi_dcmplt>
 80083c6:	3800      	subs	r0, #0
 80083c8:	bf18      	it	ne
 80083ca:	2001      	movne	r0, #1
 80083cc:	e710      	b.n	80081f0 <__ieee754_pow+0x210>
 80083ce:	bf00      	nop
 80083d0:	60000000 	.word	0x60000000
 80083d4:	3ff71547 	.word	0x3ff71547
 80083d8:	f85ddf44 	.word	0xf85ddf44
 80083dc:	3e54ae0b 	.word	0x3e54ae0b
 80083e0:	55555555 	.word	0x55555555
 80083e4:	3fd55555 	.word	0x3fd55555
 80083e8:	652b82fe 	.word	0x652b82fe
 80083ec:	3ff71547 	.word	0x3ff71547
 80083f0:	3ff00000 	.word	0x3ff00000
 80083f4:	3fd00000 	.word	0x3fd00000
 80083f8:	3fe00000 	.word	0x3fe00000
 80083fc:	408fffff 	.word	0x408fffff
 8008400:	4bd5      	ldr	r3, [pc, #852]	@ (8008758 <__ieee754_pow+0x778>)
 8008402:	402b      	ands	r3, r5
 8008404:	2200      	movs	r2, #0
 8008406:	b92b      	cbnz	r3, 8008414 <__ieee754_pow+0x434>
 8008408:	4bd4      	ldr	r3, [pc, #848]	@ (800875c <__ieee754_pow+0x77c>)
 800840a:	f7f8 f8b9 	bl	8000580 <__aeabi_dmul>
 800840e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8008412:	468b      	mov	fp, r1
 8008414:	ea4f 532b 	mov.w	r3, fp, asr #20
 8008418:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800841c:	4413      	add	r3, r2
 800841e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008420:	4bcf      	ldr	r3, [pc, #828]	@ (8008760 <__ieee754_pow+0x780>)
 8008422:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8008426:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800842a:	459b      	cmp	fp, r3
 800842c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008430:	dd08      	ble.n	8008444 <__ieee754_pow+0x464>
 8008432:	4bcc      	ldr	r3, [pc, #816]	@ (8008764 <__ieee754_pow+0x784>)
 8008434:	459b      	cmp	fp, r3
 8008436:	f340 81a5 	ble.w	8008784 <__ieee754_pow+0x7a4>
 800843a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800843c:	3301      	adds	r3, #1
 800843e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008440:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8008444:	f04f 0a00 	mov.w	sl, #0
 8008448:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800844c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800844e:	4bc6      	ldr	r3, [pc, #792]	@ (8008768 <__ieee754_pow+0x788>)
 8008450:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008454:	ed93 7b00 	vldr	d7, [r3]
 8008458:	4629      	mov	r1, r5
 800845a:	ec53 2b17 	vmov	r2, r3, d7
 800845e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008462:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008466:	f7f7 fed3 	bl	8000210 <__aeabi_dsub>
 800846a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800846e:	4606      	mov	r6, r0
 8008470:	460f      	mov	r7, r1
 8008472:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008476:	f7f7 fecd 	bl	8000214 <__adddf3>
 800847a:	4602      	mov	r2, r0
 800847c:	460b      	mov	r3, r1
 800847e:	2000      	movs	r0, #0
 8008480:	49ba      	ldr	r1, [pc, #744]	@ (800876c <__ieee754_pow+0x78c>)
 8008482:	f7f8 f9a7 	bl	80007d4 <__aeabi_ddiv>
 8008486:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800848a:	4602      	mov	r2, r0
 800848c:	460b      	mov	r3, r1
 800848e:	4630      	mov	r0, r6
 8008490:	4639      	mov	r1, r7
 8008492:	f7f8 f875 	bl	8000580 <__aeabi_dmul>
 8008496:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800849a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800849e:	106d      	asrs	r5, r5, #1
 80084a0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80084a4:	f04f 0b00 	mov.w	fp, #0
 80084a8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80084ac:	4661      	mov	r1, ip
 80084ae:	2200      	movs	r2, #0
 80084b0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80084b4:	4658      	mov	r0, fp
 80084b6:	46e1      	mov	r9, ip
 80084b8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80084bc:	4614      	mov	r4, r2
 80084be:	461d      	mov	r5, r3
 80084c0:	f7f8 f85e 	bl	8000580 <__aeabi_dmul>
 80084c4:	4602      	mov	r2, r0
 80084c6:	460b      	mov	r3, r1
 80084c8:	4630      	mov	r0, r6
 80084ca:	4639      	mov	r1, r7
 80084cc:	f7f7 fea0 	bl	8000210 <__aeabi_dsub>
 80084d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084d4:	4606      	mov	r6, r0
 80084d6:	460f      	mov	r7, r1
 80084d8:	4620      	mov	r0, r4
 80084da:	4629      	mov	r1, r5
 80084dc:	f7f7 fe98 	bl	8000210 <__aeabi_dsub>
 80084e0:	4602      	mov	r2, r0
 80084e2:	460b      	mov	r3, r1
 80084e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80084e8:	f7f7 fe92 	bl	8000210 <__aeabi_dsub>
 80084ec:	465a      	mov	r2, fp
 80084ee:	464b      	mov	r3, r9
 80084f0:	f7f8 f846 	bl	8000580 <__aeabi_dmul>
 80084f4:	4602      	mov	r2, r0
 80084f6:	460b      	mov	r3, r1
 80084f8:	4630      	mov	r0, r6
 80084fa:	4639      	mov	r1, r7
 80084fc:	f7f7 fe88 	bl	8000210 <__aeabi_dsub>
 8008500:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008504:	f7f8 f83c 	bl	8000580 <__aeabi_dmul>
 8008508:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800850c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008510:	4610      	mov	r0, r2
 8008512:	4619      	mov	r1, r3
 8008514:	f7f8 f834 	bl	8000580 <__aeabi_dmul>
 8008518:	a37d      	add	r3, pc, #500	@ (adr r3, 8008710 <__ieee754_pow+0x730>)
 800851a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851e:	4604      	mov	r4, r0
 8008520:	460d      	mov	r5, r1
 8008522:	f7f8 f82d 	bl	8000580 <__aeabi_dmul>
 8008526:	a37c      	add	r3, pc, #496	@ (adr r3, 8008718 <__ieee754_pow+0x738>)
 8008528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852c:	f7f7 fe72 	bl	8000214 <__adddf3>
 8008530:	4622      	mov	r2, r4
 8008532:	462b      	mov	r3, r5
 8008534:	f7f8 f824 	bl	8000580 <__aeabi_dmul>
 8008538:	a379      	add	r3, pc, #484	@ (adr r3, 8008720 <__ieee754_pow+0x740>)
 800853a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853e:	f7f7 fe69 	bl	8000214 <__adddf3>
 8008542:	4622      	mov	r2, r4
 8008544:	462b      	mov	r3, r5
 8008546:	f7f8 f81b 	bl	8000580 <__aeabi_dmul>
 800854a:	a377      	add	r3, pc, #476	@ (adr r3, 8008728 <__ieee754_pow+0x748>)
 800854c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008550:	f7f7 fe60 	bl	8000214 <__adddf3>
 8008554:	4622      	mov	r2, r4
 8008556:	462b      	mov	r3, r5
 8008558:	f7f8 f812 	bl	8000580 <__aeabi_dmul>
 800855c:	a374      	add	r3, pc, #464	@ (adr r3, 8008730 <__ieee754_pow+0x750>)
 800855e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008562:	f7f7 fe57 	bl	8000214 <__adddf3>
 8008566:	4622      	mov	r2, r4
 8008568:	462b      	mov	r3, r5
 800856a:	f7f8 f809 	bl	8000580 <__aeabi_dmul>
 800856e:	a372      	add	r3, pc, #456	@ (adr r3, 8008738 <__ieee754_pow+0x758>)
 8008570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008574:	f7f7 fe4e 	bl	8000214 <__adddf3>
 8008578:	4622      	mov	r2, r4
 800857a:	4606      	mov	r6, r0
 800857c:	460f      	mov	r7, r1
 800857e:	462b      	mov	r3, r5
 8008580:	4620      	mov	r0, r4
 8008582:	4629      	mov	r1, r5
 8008584:	f7f7 fffc 	bl	8000580 <__aeabi_dmul>
 8008588:	4602      	mov	r2, r0
 800858a:	460b      	mov	r3, r1
 800858c:	4630      	mov	r0, r6
 800858e:	4639      	mov	r1, r7
 8008590:	f7f7 fff6 	bl	8000580 <__aeabi_dmul>
 8008594:	465a      	mov	r2, fp
 8008596:	4604      	mov	r4, r0
 8008598:	460d      	mov	r5, r1
 800859a:	464b      	mov	r3, r9
 800859c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085a0:	f7f7 fe38 	bl	8000214 <__adddf3>
 80085a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80085a8:	f7f7 ffea 	bl	8000580 <__aeabi_dmul>
 80085ac:	4622      	mov	r2, r4
 80085ae:	462b      	mov	r3, r5
 80085b0:	f7f7 fe30 	bl	8000214 <__adddf3>
 80085b4:	465a      	mov	r2, fp
 80085b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80085ba:	464b      	mov	r3, r9
 80085bc:	4658      	mov	r0, fp
 80085be:	4649      	mov	r1, r9
 80085c0:	f7f7 ffde 	bl	8000580 <__aeabi_dmul>
 80085c4:	4b6a      	ldr	r3, [pc, #424]	@ (8008770 <__ieee754_pow+0x790>)
 80085c6:	2200      	movs	r2, #0
 80085c8:	4606      	mov	r6, r0
 80085ca:	460f      	mov	r7, r1
 80085cc:	f7f7 fe22 	bl	8000214 <__adddf3>
 80085d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80085d4:	f7f7 fe1e 	bl	8000214 <__adddf3>
 80085d8:	46d8      	mov	r8, fp
 80085da:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80085de:	460d      	mov	r5, r1
 80085e0:	465a      	mov	r2, fp
 80085e2:	460b      	mov	r3, r1
 80085e4:	4640      	mov	r0, r8
 80085e6:	4649      	mov	r1, r9
 80085e8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80085ec:	f7f7 ffc8 	bl	8000580 <__aeabi_dmul>
 80085f0:	465c      	mov	r4, fp
 80085f2:	4680      	mov	r8, r0
 80085f4:	4689      	mov	r9, r1
 80085f6:	4b5e      	ldr	r3, [pc, #376]	@ (8008770 <__ieee754_pow+0x790>)
 80085f8:	2200      	movs	r2, #0
 80085fa:	4620      	mov	r0, r4
 80085fc:	4629      	mov	r1, r5
 80085fe:	f7f7 fe07 	bl	8000210 <__aeabi_dsub>
 8008602:	4632      	mov	r2, r6
 8008604:	463b      	mov	r3, r7
 8008606:	f7f7 fe03 	bl	8000210 <__aeabi_dsub>
 800860a:	4602      	mov	r2, r0
 800860c:	460b      	mov	r3, r1
 800860e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008612:	f7f7 fdfd 	bl	8000210 <__aeabi_dsub>
 8008616:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800861a:	f7f7 ffb1 	bl	8000580 <__aeabi_dmul>
 800861e:	4622      	mov	r2, r4
 8008620:	4606      	mov	r6, r0
 8008622:	460f      	mov	r7, r1
 8008624:	462b      	mov	r3, r5
 8008626:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800862a:	f7f7 ffa9 	bl	8000580 <__aeabi_dmul>
 800862e:	4602      	mov	r2, r0
 8008630:	460b      	mov	r3, r1
 8008632:	4630      	mov	r0, r6
 8008634:	4639      	mov	r1, r7
 8008636:	f7f7 fded 	bl	8000214 <__adddf3>
 800863a:	4606      	mov	r6, r0
 800863c:	460f      	mov	r7, r1
 800863e:	4602      	mov	r2, r0
 8008640:	460b      	mov	r3, r1
 8008642:	4640      	mov	r0, r8
 8008644:	4649      	mov	r1, r9
 8008646:	f7f7 fde5 	bl	8000214 <__adddf3>
 800864a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800864e:	a33c      	add	r3, pc, #240	@ (adr r3, 8008740 <__ieee754_pow+0x760>)
 8008650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008654:	4658      	mov	r0, fp
 8008656:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800865a:	460d      	mov	r5, r1
 800865c:	f7f7 ff90 	bl	8000580 <__aeabi_dmul>
 8008660:	465c      	mov	r4, fp
 8008662:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008666:	4642      	mov	r2, r8
 8008668:	464b      	mov	r3, r9
 800866a:	4620      	mov	r0, r4
 800866c:	4629      	mov	r1, r5
 800866e:	f7f7 fdcf 	bl	8000210 <__aeabi_dsub>
 8008672:	4602      	mov	r2, r0
 8008674:	460b      	mov	r3, r1
 8008676:	4630      	mov	r0, r6
 8008678:	4639      	mov	r1, r7
 800867a:	f7f7 fdc9 	bl	8000210 <__aeabi_dsub>
 800867e:	a332      	add	r3, pc, #200	@ (adr r3, 8008748 <__ieee754_pow+0x768>)
 8008680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008684:	f7f7 ff7c 	bl	8000580 <__aeabi_dmul>
 8008688:	a331      	add	r3, pc, #196	@ (adr r3, 8008750 <__ieee754_pow+0x770>)
 800868a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868e:	4606      	mov	r6, r0
 8008690:	460f      	mov	r7, r1
 8008692:	4620      	mov	r0, r4
 8008694:	4629      	mov	r1, r5
 8008696:	f7f7 ff73 	bl	8000580 <__aeabi_dmul>
 800869a:	4602      	mov	r2, r0
 800869c:	460b      	mov	r3, r1
 800869e:	4630      	mov	r0, r6
 80086a0:	4639      	mov	r1, r7
 80086a2:	f7f7 fdb7 	bl	8000214 <__adddf3>
 80086a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80086a8:	4b32      	ldr	r3, [pc, #200]	@ (8008774 <__ieee754_pow+0x794>)
 80086aa:	4413      	add	r3, r2
 80086ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b0:	f7f7 fdb0 	bl	8000214 <__adddf3>
 80086b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80086b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80086ba:	f7f7 fef7 	bl	80004ac <__aeabi_i2d>
 80086be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80086c0:	4b2d      	ldr	r3, [pc, #180]	@ (8008778 <__ieee754_pow+0x798>)
 80086c2:	4413      	add	r3, r2
 80086c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086c8:	4606      	mov	r6, r0
 80086ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086ce:	460f      	mov	r7, r1
 80086d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086d4:	f7f7 fd9e 	bl	8000214 <__adddf3>
 80086d8:	4642      	mov	r2, r8
 80086da:	464b      	mov	r3, r9
 80086dc:	f7f7 fd9a 	bl	8000214 <__adddf3>
 80086e0:	4632      	mov	r2, r6
 80086e2:	463b      	mov	r3, r7
 80086e4:	f7f7 fd96 	bl	8000214 <__adddf3>
 80086e8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80086ec:	4632      	mov	r2, r6
 80086ee:	463b      	mov	r3, r7
 80086f0:	4658      	mov	r0, fp
 80086f2:	460d      	mov	r5, r1
 80086f4:	f7f7 fd8c 	bl	8000210 <__aeabi_dsub>
 80086f8:	4642      	mov	r2, r8
 80086fa:	464b      	mov	r3, r9
 80086fc:	f7f7 fd88 	bl	8000210 <__aeabi_dsub>
 8008700:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008704:	f7f7 fd84 	bl	8000210 <__aeabi_dsub>
 8008708:	465c      	mov	r4, fp
 800870a:	4602      	mov	r2, r0
 800870c:	e036      	b.n	800877c <__ieee754_pow+0x79c>
 800870e:	bf00      	nop
 8008710:	4a454eef 	.word	0x4a454eef
 8008714:	3fca7e28 	.word	0x3fca7e28
 8008718:	93c9db65 	.word	0x93c9db65
 800871c:	3fcd864a 	.word	0x3fcd864a
 8008720:	a91d4101 	.word	0xa91d4101
 8008724:	3fd17460 	.word	0x3fd17460
 8008728:	518f264d 	.word	0x518f264d
 800872c:	3fd55555 	.word	0x3fd55555
 8008730:	db6fabff 	.word	0xdb6fabff
 8008734:	3fdb6db6 	.word	0x3fdb6db6
 8008738:	33333303 	.word	0x33333303
 800873c:	3fe33333 	.word	0x3fe33333
 8008740:	e0000000 	.word	0xe0000000
 8008744:	3feec709 	.word	0x3feec709
 8008748:	dc3a03fd 	.word	0xdc3a03fd
 800874c:	3feec709 	.word	0x3feec709
 8008750:	145b01f5 	.word	0x145b01f5
 8008754:	be3e2fe0 	.word	0xbe3e2fe0
 8008758:	7ff00000 	.word	0x7ff00000
 800875c:	43400000 	.word	0x43400000
 8008760:	0003988e 	.word	0x0003988e
 8008764:	000bb679 	.word	0x000bb679
 8008768:	08008df8 	.word	0x08008df8
 800876c:	3ff00000 	.word	0x3ff00000
 8008770:	40080000 	.word	0x40080000
 8008774:	08008dd8 	.word	0x08008dd8
 8008778:	08008de8 	.word	0x08008de8
 800877c:	460b      	mov	r3, r1
 800877e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008782:	e5d7      	b.n	8008334 <__ieee754_pow+0x354>
 8008784:	f04f 0a01 	mov.w	sl, #1
 8008788:	e65e      	b.n	8008448 <__ieee754_pow+0x468>
 800878a:	a3b4      	add	r3, pc, #720	@ (adr r3, 8008a5c <__ieee754_pow+0xa7c>)
 800878c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008790:	4630      	mov	r0, r6
 8008792:	4639      	mov	r1, r7
 8008794:	f7f7 fd3e 	bl	8000214 <__adddf3>
 8008798:	4642      	mov	r2, r8
 800879a:	e9cd 0100 	strd	r0, r1, [sp]
 800879e:	464b      	mov	r3, r9
 80087a0:	4620      	mov	r0, r4
 80087a2:	4629      	mov	r1, r5
 80087a4:	f7f7 fd34 	bl	8000210 <__aeabi_dsub>
 80087a8:	4602      	mov	r2, r0
 80087aa:	460b      	mov	r3, r1
 80087ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087b0:	f7f8 f976 	bl	8000aa0 <__aeabi_dcmpgt>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	f47f ae00 	bne.w	80083ba <__ieee754_pow+0x3da>
 80087ba:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80087be:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80087c2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80087c6:	fa43 fa0a 	asr.w	sl, r3, sl
 80087ca:	44da      	add	sl, fp
 80087cc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80087d0:	489d      	ldr	r0, [pc, #628]	@ (8008a48 <__ieee754_pow+0xa68>)
 80087d2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80087d6:	4108      	asrs	r0, r1
 80087d8:	ea00 030a 	and.w	r3, r0, sl
 80087dc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80087e0:	f1c1 0114 	rsb	r1, r1, #20
 80087e4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80087e8:	fa4a fa01 	asr.w	sl, sl, r1
 80087ec:	f1bb 0f00 	cmp.w	fp, #0
 80087f0:	4640      	mov	r0, r8
 80087f2:	4649      	mov	r1, r9
 80087f4:	f04f 0200 	mov.w	r2, #0
 80087f8:	bfb8      	it	lt
 80087fa:	f1ca 0a00 	rsblt	sl, sl, #0
 80087fe:	f7f7 fd07 	bl	8000210 <__aeabi_dsub>
 8008802:	4680      	mov	r8, r0
 8008804:	4689      	mov	r9, r1
 8008806:	4632      	mov	r2, r6
 8008808:	463b      	mov	r3, r7
 800880a:	4640      	mov	r0, r8
 800880c:	4649      	mov	r1, r9
 800880e:	f7f7 fd01 	bl	8000214 <__adddf3>
 8008812:	2400      	movs	r4, #0
 8008814:	a37c      	add	r3, pc, #496	@ (adr r3, 8008a08 <__ieee754_pow+0xa28>)
 8008816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881a:	4620      	mov	r0, r4
 800881c:	460d      	mov	r5, r1
 800881e:	f7f7 feaf 	bl	8000580 <__aeabi_dmul>
 8008822:	4642      	mov	r2, r8
 8008824:	e9cd 0100 	strd	r0, r1, [sp]
 8008828:	464b      	mov	r3, r9
 800882a:	4620      	mov	r0, r4
 800882c:	4629      	mov	r1, r5
 800882e:	f7f7 fcef 	bl	8000210 <__aeabi_dsub>
 8008832:	4602      	mov	r2, r0
 8008834:	460b      	mov	r3, r1
 8008836:	4630      	mov	r0, r6
 8008838:	4639      	mov	r1, r7
 800883a:	f7f7 fce9 	bl	8000210 <__aeabi_dsub>
 800883e:	a374      	add	r3, pc, #464	@ (adr r3, 8008a10 <__ieee754_pow+0xa30>)
 8008840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008844:	f7f7 fe9c 	bl	8000580 <__aeabi_dmul>
 8008848:	a373      	add	r3, pc, #460	@ (adr r3, 8008a18 <__ieee754_pow+0xa38>)
 800884a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884e:	4680      	mov	r8, r0
 8008850:	4689      	mov	r9, r1
 8008852:	4620      	mov	r0, r4
 8008854:	4629      	mov	r1, r5
 8008856:	f7f7 fe93 	bl	8000580 <__aeabi_dmul>
 800885a:	4602      	mov	r2, r0
 800885c:	460b      	mov	r3, r1
 800885e:	4640      	mov	r0, r8
 8008860:	4649      	mov	r1, r9
 8008862:	f7f7 fcd7 	bl	8000214 <__adddf3>
 8008866:	4604      	mov	r4, r0
 8008868:	460d      	mov	r5, r1
 800886a:	4602      	mov	r2, r0
 800886c:	460b      	mov	r3, r1
 800886e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008872:	f7f7 fccf 	bl	8000214 <__adddf3>
 8008876:	e9dd 2300 	ldrd	r2, r3, [sp]
 800887a:	4680      	mov	r8, r0
 800887c:	4689      	mov	r9, r1
 800887e:	f7f7 fcc7 	bl	8000210 <__aeabi_dsub>
 8008882:	4602      	mov	r2, r0
 8008884:	460b      	mov	r3, r1
 8008886:	4620      	mov	r0, r4
 8008888:	4629      	mov	r1, r5
 800888a:	f7f7 fcc1 	bl	8000210 <__aeabi_dsub>
 800888e:	4642      	mov	r2, r8
 8008890:	4606      	mov	r6, r0
 8008892:	460f      	mov	r7, r1
 8008894:	464b      	mov	r3, r9
 8008896:	4640      	mov	r0, r8
 8008898:	4649      	mov	r1, r9
 800889a:	f7f7 fe71 	bl	8000580 <__aeabi_dmul>
 800889e:	a360      	add	r3, pc, #384	@ (adr r3, 8008a20 <__ieee754_pow+0xa40>)
 80088a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a4:	4604      	mov	r4, r0
 80088a6:	460d      	mov	r5, r1
 80088a8:	f7f7 fe6a 	bl	8000580 <__aeabi_dmul>
 80088ac:	a35e      	add	r3, pc, #376	@ (adr r3, 8008a28 <__ieee754_pow+0xa48>)
 80088ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b2:	f7f7 fcad 	bl	8000210 <__aeabi_dsub>
 80088b6:	4622      	mov	r2, r4
 80088b8:	462b      	mov	r3, r5
 80088ba:	f7f7 fe61 	bl	8000580 <__aeabi_dmul>
 80088be:	a35c      	add	r3, pc, #368	@ (adr r3, 8008a30 <__ieee754_pow+0xa50>)
 80088c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c4:	f7f7 fca6 	bl	8000214 <__adddf3>
 80088c8:	4622      	mov	r2, r4
 80088ca:	462b      	mov	r3, r5
 80088cc:	f7f7 fe58 	bl	8000580 <__aeabi_dmul>
 80088d0:	a359      	add	r3, pc, #356	@ (adr r3, 8008a38 <__ieee754_pow+0xa58>)
 80088d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d6:	f7f7 fc9b 	bl	8000210 <__aeabi_dsub>
 80088da:	4622      	mov	r2, r4
 80088dc:	462b      	mov	r3, r5
 80088de:	f7f7 fe4f 	bl	8000580 <__aeabi_dmul>
 80088e2:	a357      	add	r3, pc, #348	@ (adr r3, 8008a40 <__ieee754_pow+0xa60>)
 80088e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e8:	f7f7 fc94 	bl	8000214 <__adddf3>
 80088ec:	4622      	mov	r2, r4
 80088ee:	462b      	mov	r3, r5
 80088f0:	f7f7 fe46 	bl	8000580 <__aeabi_dmul>
 80088f4:	4602      	mov	r2, r0
 80088f6:	460b      	mov	r3, r1
 80088f8:	4640      	mov	r0, r8
 80088fa:	4649      	mov	r1, r9
 80088fc:	f7f7 fc88 	bl	8000210 <__aeabi_dsub>
 8008900:	4604      	mov	r4, r0
 8008902:	460d      	mov	r5, r1
 8008904:	4602      	mov	r2, r0
 8008906:	460b      	mov	r3, r1
 8008908:	4640      	mov	r0, r8
 800890a:	4649      	mov	r1, r9
 800890c:	f7f7 fe38 	bl	8000580 <__aeabi_dmul>
 8008910:	2200      	movs	r2, #0
 8008912:	e9cd 0100 	strd	r0, r1, [sp]
 8008916:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800891a:	4620      	mov	r0, r4
 800891c:	4629      	mov	r1, r5
 800891e:	f7f7 fc77 	bl	8000210 <__aeabi_dsub>
 8008922:	4602      	mov	r2, r0
 8008924:	460b      	mov	r3, r1
 8008926:	e9dd 0100 	ldrd	r0, r1, [sp]
 800892a:	f7f7 ff53 	bl	80007d4 <__aeabi_ddiv>
 800892e:	4632      	mov	r2, r6
 8008930:	4604      	mov	r4, r0
 8008932:	460d      	mov	r5, r1
 8008934:	463b      	mov	r3, r7
 8008936:	4640      	mov	r0, r8
 8008938:	4649      	mov	r1, r9
 800893a:	f7f7 fe21 	bl	8000580 <__aeabi_dmul>
 800893e:	4632      	mov	r2, r6
 8008940:	463b      	mov	r3, r7
 8008942:	f7f7 fc67 	bl	8000214 <__adddf3>
 8008946:	4602      	mov	r2, r0
 8008948:	460b      	mov	r3, r1
 800894a:	4620      	mov	r0, r4
 800894c:	4629      	mov	r1, r5
 800894e:	f7f7 fc5f 	bl	8000210 <__aeabi_dsub>
 8008952:	4642      	mov	r2, r8
 8008954:	464b      	mov	r3, r9
 8008956:	f7f7 fc5b 	bl	8000210 <__aeabi_dsub>
 800895a:	460b      	mov	r3, r1
 800895c:	4602      	mov	r2, r0
 800895e:	493b      	ldr	r1, [pc, #236]	@ (8008a4c <__ieee754_pow+0xa6c>)
 8008960:	2000      	movs	r0, #0
 8008962:	f7f7 fc55 	bl	8000210 <__aeabi_dsub>
 8008966:	ec41 0b10 	vmov	d0, r0, r1
 800896a:	ee10 3a90 	vmov	r3, s1
 800896e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008972:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008976:	da30      	bge.n	80089da <__ieee754_pow+0x9fa>
 8008978:	4650      	mov	r0, sl
 800897a:	f000 f87d 	bl	8008a78 <scalbn>
 800897e:	ec51 0b10 	vmov	r0, r1, d0
 8008982:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008986:	f7ff bbd2 	b.w	800812e <__ieee754_pow+0x14e>
 800898a:	4c31      	ldr	r4, [pc, #196]	@ (8008a50 <__ieee754_pow+0xa70>)
 800898c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008990:	42a3      	cmp	r3, r4
 8008992:	d91a      	bls.n	80089ca <__ieee754_pow+0x9ea>
 8008994:	4b2f      	ldr	r3, [pc, #188]	@ (8008a54 <__ieee754_pow+0xa74>)
 8008996:	440b      	add	r3, r1
 8008998:	4303      	orrs	r3, r0
 800899a:	d009      	beq.n	80089b0 <__ieee754_pow+0x9d0>
 800899c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089a0:	2200      	movs	r2, #0
 80089a2:	2300      	movs	r3, #0
 80089a4:	f7f8 f85e 	bl	8000a64 <__aeabi_dcmplt>
 80089a8:	3800      	subs	r0, #0
 80089aa:	bf18      	it	ne
 80089ac:	2001      	movne	r0, #1
 80089ae:	e42b      	b.n	8008208 <__ieee754_pow+0x228>
 80089b0:	4642      	mov	r2, r8
 80089b2:	464b      	mov	r3, r9
 80089b4:	f7f7 fc2c 	bl	8000210 <__aeabi_dsub>
 80089b8:	4632      	mov	r2, r6
 80089ba:	463b      	mov	r3, r7
 80089bc:	f7f8 f866 	bl	8000a8c <__aeabi_dcmpge>
 80089c0:	2800      	cmp	r0, #0
 80089c2:	d1eb      	bne.n	800899c <__ieee754_pow+0x9bc>
 80089c4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8008a64 <__ieee754_pow+0xa84>
 80089c8:	e6f7      	b.n	80087ba <__ieee754_pow+0x7da>
 80089ca:	469a      	mov	sl, r3
 80089cc:	4b22      	ldr	r3, [pc, #136]	@ (8008a58 <__ieee754_pow+0xa78>)
 80089ce:	459a      	cmp	sl, r3
 80089d0:	f63f aef3 	bhi.w	80087ba <__ieee754_pow+0x7da>
 80089d4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80089d8:	e715      	b.n	8008806 <__ieee754_pow+0x826>
 80089da:	ec51 0b10 	vmov	r0, r1, d0
 80089de:	4619      	mov	r1, r3
 80089e0:	e7cf      	b.n	8008982 <__ieee754_pow+0x9a2>
 80089e2:	491a      	ldr	r1, [pc, #104]	@ (8008a4c <__ieee754_pow+0xa6c>)
 80089e4:	2000      	movs	r0, #0
 80089e6:	f7ff bb18 	b.w	800801a <__ieee754_pow+0x3a>
 80089ea:	2000      	movs	r0, #0
 80089ec:	2100      	movs	r1, #0
 80089ee:	f7ff bb14 	b.w	800801a <__ieee754_pow+0x3a>
 80089f2:	4630      	mov	r0, r6
 80089f4:	4639      	mov	r1, r7
 80089f6:	f7ff bb10 	b.w	800801a <__ieee754_pow+0x3a>
 80089fa:	460c      	mov	r4, r1
 80089fc:	f7ff bb5e 	b.w	80080bc <__ieee754_pow+0xdc>
 8008a00:	2400      	movs	r4, #0
 8008a02:	f7ff bb49 	b.w	8008098 <__ieee754_pow+0xb8>
 8008a06:	bf00      	nop
 8008a08:	00000000 	.word	0x00000000
 8008a0c:	3fe62e43 	.word	0x3fe62e43
 8008a10:	fefa39ef 	.word	0xfefa39ef
 8008a14:	3fe62e42 	.word	0x3fe62e42
 8008a18:	0ca86c39 	.word	0x0ca86c39
 8008a1c:	be205c61 	.word	0xbe205c61
 8008a20:	72bea4d0 	.word	0x72bea4d0
 8008a24:	3e663769 	.word	0x3e663769
 8008a28:	c5d26bf1 	.word	0xc5d26bf1
 8008a2c:	3ebbbd41 	.word	0x3ebbbd41
 8008a30:	af25de2c 	.word	0xaf25de2c
 8008a34:	3f11566a 	.word	0x3f11566a
 8008a38:	16bebd93 	.word	0x16bebd93
 8008a3c:	3f66c16c 	.word	0x3f66c16c
 8008a40:	5555553e 	.word	0x5555553e
 8008a44:	3fc55555 	.word	0x3fc55555
 8008a48:	fff00000 	.word	0xfff00000
 8008a4c:	3ff00000 	.word	0x3ff00000
 8008a50:	4090cbff 	.word	0x4090cbff
 8008a54:	3f6f3400 	.word	0x3f6f3400
 8008a58:	3fe00000 	.word	0x3fe00000
 8008a5c:	652b82fe 	.word	0x652b82fe
 8008a60:	3c971547 	.word	0x3c971547
 8008a64:	4090cc00 	.word	0x4090cc00

08008a68 <fabs>:
 8008a68:	ec51 0b10 	vmov	r0, r1, d0
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008a72:	ec43 2b10 	vmov	d0, r2, r3
 8008a76:	4770      	bx	lr

08008a78 <scalbn>:
 8008a78:	b570      	push	{r4, r5, r6, lr}
 8008a7a:	ec55 4b10 	vmov	r4, r5, d0
 8008a7e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008a82:	4606      	mov	r6, r0
 8008a84:	462b      	mov	r3, r5
 8008a86:	b991      	cbnz	r1, 8008aae <scalbn+0x36>
 8008a88:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008a8c:	4323      	orrs	r3, r4
 8008a8e:	d03d      	beq.n	8008b0c <scalbn+0x94>
 8008a90:	4b35      	ldr	r3, [pc, #212]	@ (8008b68 <scalbn+0xf0>)
 8008a92:	4620      	mov	r0, r4
 8008a94:	4629      	mov	r1, r5
 8008a96:	2200      	movs	r2, #0
 8008a98:	f7f7 fd72 	bl	8000580 <__aeabi_dmul>
 8008a9c:	4b33      	ldr	r3, [pc, #204]	@ (8008b6c <scalbn+0xf4>)
 8008a9e:	429e      	cmp	r6, r3
 8008aa0:	4604      	mov	r4, r0
 8008aa2:	460d      	mov	r5, r1
 8008aa4:	da0f      	bge.n	8008ac6 <scalbn+0x4e>
 8008aa6:	a328      	add	r3, pc, #160	@ (adr r3, 8008b48 <scalbn+0xd0>)
 8008aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aac:	e01e      	b.n	8008aec <scalbn+0x74>
 8008aae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008ab2:	4291      	cmp	r1, r2
 8008ab4:	d10b      	bne.n	8008ace <scalbn+0x56>
 8008ab6:	4622      	mov	r2, r4
 8008ab8:	4620      	mov	r0, r4
 8008aba:	4629      	mov	r1, r5
 8008abc:	f7f7 fbaa 	bl	8000214 <__adddf3>
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	460d      	mov	r5, r1
 8008ac4:	e022      	b.n	8008b0c <scalbn+0x94>
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008acc:	3936      	subs	r1, #54	@ 0x36
 8008ace:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8008ad2:	4296      	cmp	r6, r2
 8008ad4:	dd0d      	ble.n	8008af2 <scalbn+0x7a>
 8008ad6:	2d00      	cmp	r5, #0
 8008ad8:	a11d      	add	r1, pc, #116	@ (adr r1, 8008b50 <scalbn+0xd8>)
 8008ada:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ade:	da02      	bge.n	8008ae6 <scalbn+0x6e>
 8008ae0:	a11d      	add	r1, pc, #116	@ (adr r1, 8008b58 <scalbn+0xe0>)
 8008ae2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ae6:	a31a      	add	r3, pc, #104	@ (adr r3, 8008b50 <scalbn+0xd8>)
 8008ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aec:	f7f7 fd48 	bl	8000580 <__aeabi_dmul>
 8008af0:	e7e6      	b.n	8008ac0 <scalbn+0x48>
 8008af2:	1872      	adds	r2, r6, r1
 8008af4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008af8:	428a      	cmp	r2, r1
 8008afa:	dcec      	bgt.n	8008ad6 <scalbn+0x5e>
 8008afc:	2a00      	cmp	r2, #0
 8008afe:	dd08      	ble.n	8008b12 <scalbn+0x9a>
 8008b00:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008b04:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008b08:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008b0c:	ec45 4b10 	vmov	d0, r4, r5
 8008b10:	bd70      	pop	{r4, r5, r6, pc}
 8008b12:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008b16:	da08      	bge.n	8008b2a <scalbn+0xb2>
 8008b18:	2d00      	cmp	r5, #0
 8008b1a:	a10b      	add	r1, pc, #44	@ (adr r1, 8008b48 <scalbn+0xd0>)
 8008b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b20:	dac1      	bge.n	8008aa6 <scalbn+0x2e>
 8008b22:	a10f      	add	r1, pc, #60	@ (adr r1, 8008b60 <scalbn+0xe8>)
 8008b24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b28:	e7bd      	b.n	8008aa6 <scalbn+0x2e>
 8008b2a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008b2e:	3236      	adds	r2, #54	@ 0x36
 8008b30:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008b34:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008b38:	4620      	mov	r0, r4
 8008b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8008b70 <scalbn+0xf8>)
 8008b3c:	4629      	mov	r1, r5
 8008b3e:	2200      	movs	r2, #0
 8008b40:	e7d4      	b.n	8008aec <scalbn+0x74>
 8008b42:	bf00      	nop
 8008b44:	f3af 8000 	nop.w
 8008b48:	c2f8f359 	.word	0xc2f8f359
 8008b4c:	01a56e1f 	.word	0x01a56e1f
 8008b50:	8800759c 	.word	0x8800759c
 8008b54:	7e37e43c 	.word	0x7e37e43c
 8008b58:	8800759c 	.word	0x8800759c
 8008b5c:	fe37e43c 	.word	0xfe37e43c
 8008b60:	c2f8f359 	.word	0xc2f8f359
 8008b64:	81a56e1f 	.word	0x81a56e1f
 8008b68:	43500000 	.word	0x43500000
 8008b6c:	ffff3cb0 	.word	0xffff3cb0
 8008b70:	3c900000 	.word	0x3c900000

08008b74 <with_errno>:
 8008b74:	b510      	push	{r4, lr}
 8008b76:	ed2d 8b02 	vpush	{d8}
 8008b7a:	eeb0 8a40 	vmov.f32	s16, s0
 8008b7e:	eef0 8a60 	vmov.f32	s17, s1
 8008b82:	4604      	mov	r4, r0
 8008b84:	f7ff f986 	bl	8007e94 <__errno>
 8008b88:	eeb0 0a48 	vmov.f32	s0, s16
 8008b8c:	eef0 0a68 	vmov.f32	s1, s17
 8008b90:	ecbd 8b02 	vpop	{d8}
 8008b94:	6004      	str	r4, [r0, #0]
 8008b96:	bd10      	pop	{r4, pc}

08008b98 <xflow>:
 8008b98:	4603      	mov	r3, r0
 8008b9a:	b507      	push	{r0, r1, r2, lr}
 8008b9c:	ec51 0b10 	vmov	r0, r1, d0
 8008ba0:	b183      	cbz	r3, 8008bc4 <xflow+0x2c>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008ba8:	e9cd 2300 	strd	r2, r3, [sp]
 8008bac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bb0:	f7f7 fce6 	bl	8000580 <__aeabi_dmul>
 8008bb4:	ec41 0b10 	vmov	d0, r0, r1
 8008bb8:	2022      	movs	r0, #34	@ 0x22
 8008bba:	b003      	add	sp, #12
 8008bbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bc0:	f7ff bfd8 	b.w	8008b74 <with_errno>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	e7ee      	b.n	8008ba8 <xflow+0x10>
 8008bca:	0000      	movs	r0, r0
 8008bcc:	0000      	movs	r0, r0
	...

08008bd0 <__math_uflow>:
 8008bd0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008bd8 <__math_uflow+0x8>
 8008bd4:	f7ff bfe0 	b.w	8008b98 <xflow>
 8008bd8:	00000000 	.word	0x00000000
 8008bdc:	10000000 	.word	0x10000000

08008be0 <__math_oflow>:
 8008be0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008be8 <__math_oflow+0x8>
 8008be4:	f7ff bfd8 	b.w	8008b98 <xflow>
 8008be8:	00000000 	.word	0x00000000
 8008bec:	70000000 	.word	0x70000000

08008bf0 <__ieee754_sqrt>:
 8008bf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf4:	4a68      	ldr	r2, [pc, #416]	@ (8008d98 <__ieee754_sqrt+0x1a8>)
 8008bf6:	ec55 4b10 	vmov	r4, r5, d0
 8008bfa:	43aa      	bics	r2, r5
 8008bfc:	462b      	mov	r3, r5
 8008bfe:	4621      	mov	r1, r4
 8008c00:	d110      	bne.n	8008c24 <__ieee754_sqrt+0x34>
 8008c02:	4622      	mov	r2, r4
 8008c04:	4620      	mov	r0, r4
 8008c06:	4629      	mov	r1, r5
 8008c08:	f7f7 fcba 	bl	8000580 <__aeabi_dmul>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	460b      	mov	r3, r1
 8008c10:	4620      	mov	r0, r4
 8008c12:	4629      	mov	r1, r5
 8008c14:	f7f7 fafe 	bl	8000214 <__adddf3>
 8008c18:	4604      	mov	r4, r0
 8008c1a:	460d      	mov	r5, r1
 8008c1c:	ec45 4b10 	vmov	d0, r4, r5
 8008c20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c24:	2d00      	cmp	r5, #0
 8008c26:	dc0e      	bgt.n	8008c46 <__ieee754_sqrt+0x56>
 8008c28:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8008c2c:	4322      	orrs	r2, r4
 8008c2e:	d0f5      	beq.n	8008c1c <__ieee754_sqrt+0x2c>
 8008c30:	b19d      	cbz	r5, 8008c5a <__ieee754_sqrt+0x6a>
 8008c32:	4622      	mov	r2, r4
 8008c34:	4620      	mov	r0, r4
 8008c36:	4629      	mov	r1, r5
 8008c38:	f7f7 faea 	bl	8000210 <__aeabi_dsub>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	460b      	mov	r3, r1
 8008c40:	f7f7 fdc8 	bl	80007d4 <__aeabi_ddiv>
 8008c44:	e7e8      	b.n	8008c18 <__ieee754_sqrt+0x28>
 8008c46:	152a      	asrs	r2, r5, #20
 8008c48:	d115      	bne.n	8008c76 <__ieee754_sqrt+0x86>
 8008c4a:	2000      	movs	r0, #0
 8008c4c:	e009      	b.n	8008c62 <__ieee754_sqrt+0x72>
 8008c4e:	0acb      	lsrs	r3, r1, #11
 8008c50:	3a15      	subs	r2, #21
 8008c52:	0549      	lsls	r1, r1, #21
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d0fa      	beq.n	8008c4e <__ieee754_sqrt+0x5e>
 8008c58:	e7f7      	b.n	8008c4a <__ieee754_sqrt+0x5a>
 8008c5a:	462a      	mov	r2, r5
 8008c5c:	e7fa      	b.n	8008c54 <__ieee754_sqrt+0x64>
 8008c5e:	005b      	lsls	r3, r3, #1
 8008c60:	3001      	adds	r0, #1
 8008c62:	02dc      	lsls	r4, r3, #11
 8008c64:	d5fb      	bpl.n	8008c5e <__ieee754_sqrt+0x6e>
 8008c66:	1e44      	subs	r4, r0, #1
 8008c68:	1b12      	subs	r2, r2, r4
 8008c6a:	f1c0 0420 	rsb	r4, r0, #32
 8008c6e:	fa21 f404 	lsr.w	r4, r1, r4
 8008c72:	4323      	orrs	r3, r4
 8008c74:	4081      	lsls	r1, r0
 8008c76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c7a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8008c7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c82:	07d2      	lsls	r2, r2, #31
 8008c84:	bf5c      	itt	pl
 8008c86:	005b      	lslpl	r3, r3, #1
 8008c88:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8008c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008c90:	bf58      	it	pl
 8008c92:	0049      	lslpl	r1, r1, #1
 8008c94:	2600      	movs	r6, #0
 8008c96:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8008c9a:	106d      	asrs	r5, r5, #1
 8008c9c:	0049      	lsls	r1, r1, #1
 8008c9e:	2016      	movs	r0, #22
 8008ca0:	4632      	mov	r2, r6
 8008ca2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8008ca6:	1917      	adds	r7, r2, r4
 8008ca8:	429f      	cmp	r7, r3
 8008caa:	bfde      	ittt	le
 8008cac:	193a      	addle	r2, r7, r4
 8008cae:	1bdb      	suble	r3, r3, r7
 8008cb0:	1936      	addle	r6, r6, r4
 8008cb2:	0fcf      	lsrs	r7, r1, #31
 8008cb4:	3801      	subs	r0, #1
 8008cb6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8008cba:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008cbe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008cc2:	d1f0      	bne.n	8008ca6 <__ieee754_sqrt+0xb6>
 8008cc4:	4604      	mov	r4, r0
 8008cc6:	2720      	movs	r7, #32
 8008cc8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	eb00 0e0c 	add.w	lr, r0, ip
 8008cd2:	db02      	blt.n	8008cda <__ieee754_sqrt+0xea>
 8008cd4:	d113      	bne.n	8008cfe <__ieee754_sqrt+0x10e>
 8008cd6:	458e      	cmp	lr, r1
 8008cd8:	d811      	bhi.n	8008cfe <__ieee754_sqrt+0x10e>
 8008cda:	f1be 0f00 	cmp.w	lr, #0
 8008cde:	eb0e 000c 	add.w	r0, lr, ip
 8008ce2:	da42      	bge.n	8008d6a <__ieee754_sqrt+0x17a>
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	db40      	blt.n	8008d6a <__ieee754_sqrt+0x17a>
 8008ce8:	f102 0801 	add.w	r8, r2, #1
 8008cec:	1a9b      	subs	r3, r3, r2
 8008cee:	458e      	cmp	lr, r1
 8008cf0:	bf88      	it	hi
 8008cf2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008cf6:	eba1 010e 	sub.w	r1, r1, lr
 8008cfa:	4464      	add	r4, ip
 8008cfc:	4642      	mov	r2, r8
 8008cfe:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8008d02:	3f01      	subs	r7, #1
 8008d04:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008d08:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008d0c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008d10:	d1dc      	bne.n	8008ccc <__ieee754_sqrt+0xdc>
 8008d12:	4319      	orrs	r1, r3
 8008d14:	d01b      	beq.n	8008d4e <__ieee754_sqrt+0x15e>
 8008d16:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8008d9c <__ieee754_sqrt+0x1ac>
 8008d1a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8008da0 <__ieee754_sqrt+0x1b0>
 8008d1e:	e9da 0100 	ldrd	r0, r1, [sl]
 8008d22:	e9db 2300 	ldrd	r2, r3, [fp]
 8008d26:	f7f7 fa73 	bl	8000210 <__aeabi_dsub>
 8008d2a:	e9da 8900 	ldrd	r8, r9, [sl]
 8008d2e:	4602      	mov	r2, r0
 8008d30:	460b      	mov	r3, r1
 8008d32:	4640      	mov	r0, r8
 8008d34:	4649      	mov	r1, r9
 8008d36:	f7f7 fe9f 	bl	8000a78 <__aeabi_dcmple>
 8008d3a:	b140      	cbz	r0, 8008d4e <__ieee754_sqrt+0x15e>
 8008d3c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008d40:	e9da 0100 	ldrd	r0, r1, [sl]
 8008d44:	e9db 2300 	ldrd	r2, r3, [fp]
 8008d48:	d111      	bne.n	8008d6e <__ieee754_sqrt+0x17e>
 8008d4a:	3601      	adds	r6, #1
 8008d4c:	463c      	mov	r4, r7
 8008d4e:	1072      	asrs	r2, r6, #1
 8008d50:	0863      	lsrs	r3, r4, #1
 8008d52:	07f1      	lsls	r1, r6, #31
 8008d54:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008d58:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8008d5c:	bf48      	it	mi
 8008d5e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008d62:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8008d66:	4618      	mov	r0, r3
 8008d68:	e756      	b.n	8008c18 <__ieee754_sqrt+0x28>
 8008d6a:	4690      	mov	r8, r2
 8008d6c:	e7be      	b.n	8008cec <__ieee754_sqrt+0xfc>
 8008d6e:	f7f7 fa51 	bl	8000214 <__adddf3>
 8008d72:	e9da 8900 	ldrd	r8, r9, [sl]
 8008d76:	4602      	mov	r2, r0
 8008d78:	460b      	mov	r3, r1
 8008d7a:	4640      	mov	r0, r8
 8008d7c:	4649      	mov	r1, r9
 8008d7e:	f7f7 fe71 	bl	8000a64 <__aeabi_dcmplt>
 8008d82:	b120      	cbz	r0, 8008d8e <__ieee754_sqrt+0x19e>
 8008d84:	1ca0      	adds	r0, r4, #2
 8008d86:	bf08      	it	eq
 8008d88:	3601      	addeq	r6, #1
 8008d8a:	3402      	adds	r4, #2
 8008d8c:	e7df      	b.n	8008d4e <__ieee754_sqrt+0x15e>
 8008d8e:	1c63      	adds	r3, r4, #1
 8008d90:	f023 0401 	bic.w	r4, r3, #1
 8008d94:	e7db      	b.n	8008d4e <__ieee754_sqrt+0x15e>
 8008d96:	bf00      	nop
 8008d98:	7ff00000 	.word	0x7ff00000
 8008d9c:	20000068 	.word	0x20000068
 8008da0:	20000060 	.word	0x20000060

08008da4 <_init>:
 8008da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008da6:	bf00      	nop
 8008da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008daa:	bc08      	pop	{r3}
 8008dac:	469e      	mov	lr, r3
 8008dae:	4770      	bx	lr

08008db0 <_fini>:
 8008db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008db2:	bf00      	nop
 8008db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008db6:	bc08      	pop	{r3}
 8008db8:	469e      	mov	lr, r3
 8008dba:	4770      	bx	lr
